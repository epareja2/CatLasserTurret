

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Feb 16 14:09:59 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	12F683
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36     0000                     
    37                           ; Generated 05/01/2024 GMT
    38                           ; 
    39                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC12F683 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71     0000                     	;# 
    72     0001                     	;# 
    73     0002                     	;# 
    74     0003                     	;# 
    75     0004                     	;# 
    76     0005                     	;# 
    77     000A                     	;# 
    78     000B                     	;# 
    79     000C                     	;# 
    80     000E                     	;# 
    81     000E                     	;# 
    82     000F                     	;# 
    83     0010                     	;# 
    84     0011                     	;# 
    85     0012                     	;# 
    86     0013                     	;# 
    87     0013                     	;# 
    88     0014                     	;# 
    89     0015                     	;# 
    90     0018                     	;# 
    91     0019                     	;# 
    92     001A                     	;# 
    93     001E                     	;# 
    94     001F                     	;# 
    95     0081                     	;# 
    96     0085                     	;# 
    97     008C                     	;# 
    98     008E                     	;# 
    99     008F                     	;# 
   100     0090                     	;# 
   101     0092                     	;# 
   102     0095                     	;# 
   103     0095                     	;# 
   104     0096                     	;# 
   105     0096                     	;# 
   106     0099                     	;# 
   107     009A                     	;# 
   108     009A                     	;# 
   109     009B                     	;# 
   110     009C                     	;# 
   111     009D                     	;# 
   112     009E                     	;# 
   113     009F                     	;# 
   114     0000                     	;# 
   115     0001                     	;# 
   116     0002                     	;# 
   117     0003                     	;# 
   118     0004                     	;# 
   119     0005                     	;# 
   120     000A                     	;# 
   121     000B                     	;# 
   122     000C                     	;# 
   123     000E                     	;# 
   124     000E                     	;# 
   125     000F                     	;# 
   126     0010                     	;# 
   127     0011                     	;# 
   128     0012                     	;# 
   129     0013                     	;# 
   130     0013                     	;# 
   131     0014                     	;# 
   132     0015                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001E                     	;# 
   137     001F                     	;# 
   138     0081                     	;# 
   139     0085                     	;# 
   140     008C                     	;# 
   141     008E                     	;# 
   142     008F                     	;# 
   143     0090                     	;# 
   144     0092                     	;# 
   145     0095                     	;# 
   146     0095                     	;# 
   147     0096                     	;# 
   148     0096                     	;# 
   149     0099                     	;# 
   150     009A                     	;# 
   151     009A                     	;# 
   152     009B                     	;# 
   153     009C                     	;# 
   154     009D                     	;# 
   155     009E                     	;# 
   156     009F                     	;# 
   157                           
   158                           	psect	idataBANK1
   159     05AB                     __pidataBANK1:
   160                           
   161                           ;initializer for _randx
   162     05AB  3401               	retlw	1
   163     05AC  3400               	retlw	0
   164     05AD  3400               	retlw	0
   165     05AE  3400               	retlw	0
   166                           
   167                           	psect	nvBANK0
   168     0064                     __pnvBANK0:
   169     0064                     _MaskMotor:
   170     0064                     	ds	1
   171     000E                     _TMR1	set	14
   172     0005                     _GPIObits	set	5
   173     0012                     _T2CON	set	18
   174     0015                     _CCP1CON	set	21
   175     0010                     _T1CONbits	set	16
   176     0010                     _T1CON	set	16
   177     0011                     _TMR2	set	17
   178     0005                     _GPIO	set	5
   179     000C                     _PIR1bits	set	12
   180     0001                     _TMR0	set	1
   181     000B                     _INTCONbits	set	11
   182     002A                     _GP2	set	42
   183     0061                     _TMR2IF	set	97
   184     0092                     _TMR2ON	set	146
   185     008C                     _PIE1bits	set	140
   186     0085                     _TRISIO	set	133
   187     009F                     _ANSEL	set	159
   188     008F                     _OSCCON	set	143
   189     0081                     _OPTION_REGbits	set	129
   190     0081                     _OPTION_REG	set	129
   191     0092                     _PR2	set	146
   192                           
   193                           	psect	cinit
   194     000F                     start_initialization:	
   195                           ; #config settings
   196                           
   197     000F                     __initialization:
   198                           
   199                           ; Initialize objects allocated to BANK1
   200     000F  1683               	bsf	3,5	;RP0=1, select bank1
   201     0010  25AB               	fcall	__pidataBANK1	;fetch initializer
   202     0011  00A4               	movwf	__pdataBANK1& (0+127)
   203     0012  25AC               	fcall	__pidataBANK1+1	;fetch initializer
   204     0013  00A5               	movwf	(__pdataBANK1+1)& (0+127)
   205     0014  25AD               	fcall	__pidataBANK1+2	;fetch initializer
   206     0015  00A6               	movwf	(__pdataBANK1+2)& (0+127)
   207     0016  25AE               	fcall	__pidataBANK1+3	;fetch initializer
   208     0017  00A7               	movwf	(__pdataBANK1+3)& (0+127)
   209                           
   210                           ; Clear objects allocated to BANK1
   211     0018  1383               	bcf	3,7	;select IRP bank0
   212     0019  30A0               	movlw	low __pbssBANK1
   213     001A  0084               	movwf	4
   214     001B  30A4               	movlw	low (__pbssBANK1+4)
   215     001C  25A3               	fcall	clear_ram0
   216                           
   217                           ; Clear objects allocated to BANK0
   218     001D  3051               	movlw	low __pbssBANK0
   219     001E  0084               	movwf	4
   220     001F  3064               	movlw	low (__pbssBANK0+19)
   221     0020  25A3               	fcall	clear_ram0
   222                           
   223                           ; Clear objects allocated to COMMON
   224     0021  3071               	movlw	low __pbssCOMMON
   225     0022  0084               	movwf	4
   226     0023  3076               	movlw	low (__pbssCOMMON+5)
   227     0024  25A3               	fcall	clear_ram0
   228     0025                     end_of_initialization:	
   229                           ;End of C runtime variable initialization code
   230                           
   231     0025                     __end_of__initialization:
   232     0025  0183               	clrf	3
   233     0026  2980               	ljmp	_main	;jump to C main() function
   234                           
   235                           	psect	bssCOMMON
   236     0071                     __pbssCOMMON:
   237     0071                     _ContadorMotor:
   238     0071                     	ds	1
   239     0072                     _contador1Seg:
   240     0072                     	ds	1
   241     0073                     _EstadoRCServo:
   242     0073                     	ds	1
   243     0074                     _mustStopNow:
   244     0074                     	ds	1
   245     0075                     _mustCheckServos:
   246     0075                     	ds	1
   247                           
   248                           	psect	bssBANK0
   249     0051                     __pbssBANK0:
   250     0051                     _motorAngle:
   251     0051                     	ds	4
   252     0055                     _motorIncrement:
   253     0055                     	ds	4
   254     0059                     _motorTarget:
   255     0059                     	ds	4
   256     005D                     _overflow_count:
   257     005D                     	ds	2
   258     005F                     _contadorTimeShutOff:
   259     005F                     	ds	2
   260     0061                     _motorRawValueTarget:
   261     0061                     	ds	2
   262     0063                     _activeMotor:
   263     0063                     	ds	1
   264                           
   265                           	psect	bssBANK1
   266     00A0                     __pbssBANK1:
   267     00A0                     _speed:
   268     00A0                     	ds	2
   269     00A2                     _pwmActual:
   270     00A2                     	ds	2
   271                           
   272                           	psect	dataBANK1
   273     00A4                     __pdataBANK1:
   274     00A4                     _randx:
   275     00A4                     	ds	4
   276                           
   277                           	psect	clrtext
   278     05A3                     clear_ram0:	
   279                           ;	Called with FSR containing the base address, and
   280                           ;	W with the last address+1
   281                           
   282     05A3  0064               	clrwdt	;clear the watchdog before getting into this loop
   283     05A4                     clrloop0:
   284     05A4  0180               	clrf	0	;clear RAM location pointed to by FSR
   285     05A5  0A84               	incf	4,f	;increment pointer
   286     05A6  0604               	xorwf	4,w	;XOR with final address
   287     05A7  1903               	btfsc	3,2	;have we reached the end yet?
   288     05A8  3400               	retlw	0	;all done for this memory range, return
   289     05A9  0604               	xorwf	4,w	;XOR again to restore value
   290     05AA  2DA4               	goto	clrloop0	;do the next byte
   291                           
   292                           	psect	cstackBANK1
   293     00A8                     __pcstackBANK1:
   294     00A8                     ??_main:
   295                           
   296                           ; 1 bytes @ 0x0
   297     00A8                     	ds	3
   298                           
   299                           	psect	cstackCOMMON
   300     0076                     __pcstackCOMMON:
   301     0076                     ?_timer1InterruptHandler:
   302     0076                     ??_timer1InterruptHandler:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0076                     ?_myISR:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0076                     ?_setupTimer0:	
   309                           ; 1 bytes @ 0x0
   310                           
   311     0076                     ?_setupTimer1:	
   312                           ; 1 bytes @ 0x0
   313                           
   314     0076                     ?_initPWM:	
   315                           ; 1 bytes @ 0x0
   316                           
   317     0076                     ?_setup:	
   318                           ; 1 bytes @ 0x0
   319                           
   320     0076                     ?_setTorretPosition:	
   321                           ; 1 bytes @ 0x0
   322                           
   323     0076                     ?_main:	
   324                           ; 1 bytes @ 0x0
   325                           
   326                           
   327                           ; 1 bytes @ 0x0
   328     0076                     	ds	1
   329     0077                     ??_myISR:
   330                           
   331                           ; 1 bytes @ 0x1
   332     0077                     	ds	4
   333                           
   334                           	psect	cstackBANK0
   335     0020                     __pcstackBANK0:
   336     0020                     ?_srand:
   337     0020                     ??_setupTimer0:	
   338                           ; 1 bytes @ 0x0
   339                           
   340     0020                     ??_setupTimer1:	
   341                           ; 1 bytes @ 0x0
   342                           
   343     0020                     ??_initPWM:	
   344                           ; 1 bytes @ 0x0
   345                           
   346     0020                     ?___wmul:	
   347                           ; 1 bytes @ 0x0
   348                           
   349     0020                     ?___lmul:	
   350                           ; 2 bytes @ 0x0
   351                           
   352     0020                     ___wmul@multiplier:	
   353                           ; 4 bytes @ 0x0
   354                           
   355     0020                     srand@x:	
   356                           ; 2 bytes @ 0x0
   357                           
   358     0020                     ___lmul@multiplier:	
   359                           ; 2 bytes @ 0x0
   360                           
   361                           
   362                           ; 4 bytes @ 0x0
   363     0020                     	ds	2
   364     0022                     ??_srand:
   365     0022                     ??_setup:	
   366                           ; 1 bytes @ 0x2
   367                           
   368     0022                     ___wmul@multiplicand:	
   369                           ; 1 bytes @ 0x2
   370                           
   371                           
   372                           ; 2 bytes @ 0x2
   373     0022                     	ds	2
   374     0024                     ??___wmul:
   375     0024                     ___wmul@product:	
   376                           ; 1 bytes @ 0x4
   377                           
   378     0024                     ___lmul@multiplicand:	
   379                           ; 2 bytes @ 0x4
   380                           
   381                           
   382                           ; 4 bytes @ 0x4
   383     0024                     	ds	2
   384     0026                     ?___awdiv:
   385     0026                     ___awdiv@divisor:	
   386                           ; 2 bytes @ 0x6
   387                           
   388                           
   389                           ; 2 bytes @ 0x6
   390     0026                     	ds	2
   391     0028                     ??___lmul:
   392     0028                     ___awdiv@dividend:	
   393                           ; 1 bytes @ 0x8
   394                           
   395                           
   396                           ; 2 bytes @ 0x8
   397     0028                     	ds	1
   398     0029                     ___lmul@product:
   399                           
   400                           ; 4 bytes @ 0x9
   401     0029                     	ds	1
   402     002A                     ??___awdiv:
   403     002A                     ___awdiv@counter:	
   404                           ; 1 bytes @ 0xA
   405                           
   406                           
   407                           ; 1 bytes @ 0xA
   408     002A                     	ds	1
   409     002B                     ___awdiv@sign:
   410                           
   411                           ; 1 bytes @ 0xB
   412     002B                     	ds	1
   413     002C                     ___awdiv@quotient:
   414                           
   415                           ; 2 bytes @ 0xC
   416     002C                     	ds	1
   417     002D                     ?_rand:
   418                           
   419                           ; 2 bytes @ 0xD
   420     002D                     	ds	1
   421     002E                     ?_convertAngle:
   422     002E                     convertAngle@value:	
   423                           ; 1 bytes @ 0xE
   424                           
   425                           
   426                           ; 2 bytes @ 0xE
   427     002E                     	ds	1
   428     002F                     ??_rand:
   429                           
   430                           ; 1 bytes @ 0xF
   431     002F                     	ds	1
   432     0030                     ??_convertAngle:
   433     0030                     convertAngle@temp:	
   434                           ; 1 bytes @ 0x10
   435                           
   436                           
   437                           ; 2 bytes @ 0x10
   438     0030                     	ds	4
   439     0034                     ?___awmod:
   440     0034                     ___awmod@divisor:	
   441                           ; 2 bytes @ 0x14
   442                           
   443                           
   444                           ; 2 bytes @ 0x14
   445     0034                     	ds	2
   446     0036                     ___awmod@dividend:
   447                           
   448                           ; 2 bytes @ 0x16
   449     0036                     	ds	2
   450     0038                     ??___awmod:
   451     0038                     ___awmod@counter:	
   452                           ; 1 bytes @ 0x18
   453                           
   454                           
   455                           ; 1 bytes @ 0x18
   456     0038                     	ds	1
   457     0039                     ___awmod@sign:
   458                           
   459                           ; 1 bytes @ 0x19
   460     0039                     	ds	1
   461     003A                     ?_generateRandom:
   462     003A                     generateRandom@min:	
   463                           ; 2 bytes @ 0x1A
   464                           
   465                           
   466                           ; 2 bytes @ 0x1A
   467     003A                     	ds	2
   468     003C                     generateRandom@max:
   469                           
   470                           ; 2 bytes @ 0x1C
   471     003C                     	ds	2
   472     003E                     ??_generateRandom:
   473                           
   474                           ; 1 bytes @ 0x1E
   475     003E                     	ds	2
   476     0040                     generateRandom@randomNumber:
   477                           
   478                           ; 2 bytes @ 0x20
   479     0040                     	ds	2
   480     0042                     ?_calculateSpeedIncrement:
   481                           
   482                           ; 2 bytes @ 0x22
   483     0042                     	ds	2
   484     0044                     ??_calculateSpeedIncrement:
   485                           
   486                           ; 1 bytes @ 0x24
   487     0044                     	ds	7
   488     004B                     calculateSpeedIncrement@speed:
   489                           
   490                           ; 2 bytes @ 0x2B
   491     004B                     	ds	2
   492     004D                     calculateSpeedIncrement@increment:
   493                           
   494                           ; 2 bytes @ 0x2D
   495     004D                     	ds	2
   496     004F                     calculateSpeedIncrement@index:
   497                           
   498                           ; 1 bytes @ 0x2F
   499     004F                     	ds	1
   500     0050                     ??_setTorretPosition:
   501                           
   502                           ; 1 bytes @ 0x30
   503     0050                     	ds	1
   504                           
   505                           	psect	maintext
   506     0180                     __pmaintext:	
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 312 in file "main.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B00/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1
   526 ;;      Params:         0       0       0
   527 ;;      Locals:         0       0       0
   528 ;;      Temps:          0       0       3
   529 ;;      Totals:         0       0       3
   530 ;;Total ram usage:        3 bytes
   531 ;; Hardware stack levels required when called: 7
   532 ;; This function calls:
   533 ;;		_convertAngle
   534 ;;		_setTorretPosition
   535 ;;		_setup
   536 ;; This function is called by:
   537 ;;		Startup code after reset
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541     0180                     _main:	
   542                           ;psect for function _main
   543                           
   544     0180                     l1943:	
   545                           ;incstack = 0
   546                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   547                           
   548                           
   549                           ;main.c: 313: setup();
   550     0180  2555               	fcall	_setup
   551     0181                     l1945:
   552                           
   553                           ;main.c: 314: motorAngle[0] = 0;
   554     0181  1283               	bcf	3,5	;RP0=0, select bank0
   555     0182  01D1               	clrf	_motorAngle
   556     0183  01D2               	clrf	_motorAngle+1
   557     0184                     l1947:
   558                           
   559                           ;main.c: 315: motorAngle[1] = 0;
   560     0184  01D3               	clrf	_motorAngle+2
   561     0185  01D4               	clrf	_motorAngle+3
   562     0186                     l1949:
   563                           
   564                           ;main.c: 316: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   565     0186  0852               	movf	_motorAngle+1,w
   566     0187  00AF               	movwf	convertAngle@value+1
   567     0188  0851               	movf	_motorAngle,w
   568     0189  00AE               	movwf	convertAngle@value
   569     018A  24C3               	fcall	_convertAngle
   570     018B  1283               	bcf	3,5	;RP0=0, select bank0
   571     018C  00E1               	movwf	_motorRawValueTarget
   572     018D                     l1951:
   573                           
   574                           ;main.c: 317: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   575     018D  0854               	movf	_motorAngle+3,w
   576     018E  00AF               	movwf	convertAngle@value+1
   577     018F  0853               	movf	_motorAngle+2,w
   578     0190  00AE               	movwf	convertAngle@value
   579     0191  24C3               	fcall	_convertAngle
   580     0192  1283               	bcf	3,5	;RP0=0, select bank0
   581     0193  00E2               	movwf	_motorRawValueTarget+1
   582     0194                     l1953:
   583                           
   584                           ;main.c: 318: GP2 = 0;
   585     0194  1105               	bcf	5,2	;volatile
   586     0195                     l1955:
   587                           
   588                           ;main.c: 334: _delay((unsigned long)((1000)*(8000000/4000.0)));
   589     0195  300B               	movlw	11
   590     0196  1683               	bsf	3,5	;RP0=1, select bank1
   591     0197  00AA               	movwf	(??_main^(0+128)+2)
   592     0198  3026               	movlw	38
   593     0199  00A9               	movwf	(??_main^(0+128)+1)
   594     019A  305D               	movlw	93
   595     019B  00A8               	movwf	??_main^(0+128)
   596     019C                     u1647:
   597     019C  0BA8               	decfsz	??_main^(0+128),f
   598     019D  299C               	goto	u1647
   599     019E  0BA9               	decfsz	(??_main^(0+128)+1),f
   600     019F  299C               	goto	u1647
   601     01A0  0BAA               	decfsz	(??_main^(0+128)+2),f
   602     01A1  299C               	goto	u1647
   603     01A2  0000               	nop
   604     01A3                     l1957:
   605                           
   606                           ;main.c: 336: motorAngle[0] = -60;
   607     01A3  30C4               	movlw	196
   608     01A4  1283               	bcf	3,5	;RP0=0, select bank0
   609     01A5  00D1               	movwf	_motorAngle
   610     01A6  30FF               	movlw	255
   611     01A7  00D2               	movwf	_motorAngle+1
   612     01A8                     l1959:
   613                           
   614                           ;main.c: 337: motorAngle[1] = -65;
   615     01A8  30BF               	movlw	191
   616     01A9  00D3               	movwf	_motorAngle+2
   617     01AA  30FF               	movlw	255
   618     01AB  00D4               	movwf	_motorAngle+3
   619     01AC                     l1961:
   620                           
   621                           ;main.c: 338: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   622     01AC  0852               	movf	_motorAngle+1,w
   623     01AD  00AF               	movwf	convertAngle@value+1
   624     01AE  0851               	movf	_motorAngle,w
   625     01AF  00AE               	movwf	convertAngle@value
   626     01B0  24C3               	fcall	_convertAngle
   627     01B1  1283               	bcf	3,5	;RP0=0, select bank0
   628     01B2  00E1               	movwf	_motorRawValueTarget
   629     01B3                     l1963:
   630                           
   631                           ;main.c: 339: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   632     01B3  0854               	movf	_motorAngle+3,w
   633     01B4  00AF               	movwf	convertAngle@value+1
   634     01B5  0853               	movf	_motorAngle+2,w
   635     01B6  00AE               	movwf	convertAngle@value
   636     01B7  24C3               	fcall	_convertAngle
   637     01B8  1283               	bcf	3,5	;RP0=0, select bank0
   638     01B9  00E2               	movwf	_motorRawValueTarget+1
   639     01BA                     l1965:
   640                           
   641                           ;main.c: 341: _delay((unsigned long)((1000)*(8000000/4000.0)));
   642     01BA  300B               	movlw	11
   643     01BB  1683               	bsf	3,5	;RP0=1, select bank1
   644     01BC  00AA               	movwf	(??_main^(0+128)+2)
   645     01BD  3026               	movlw	38
   646     01BE  00A9               	movwf	(??_main^(0+128)+1)
   647     01BF  305D               	movlw	93
   648     01C0  00A8               	movwf	??_main^(0+128)
   649     01C1                     u1657:
   650     01C1  0BA8               	decfsz	??_main^(0+128),f
   651     01C2  29C1               	goto	u1657
   652     01C3  0BA9               	decfsz	(??_main^(0+128)+1),f
   653     01C4  29C1               	goto	u1657
   654     01C5  0BAA               	decfsz	(??_main^(0+128)+2),f
   655     01C6  29C1               	goto	u1657
   656     01C7  0000               	nop
   657     01C8                     l1967:
   658                           
   659                           ;main.c: 342: motorAngle[0] = 60;
   660     01C8  303C               	movlw	60
   661     01C9  1283               	bcf	3,5	;RP0=0, select bank0
   662     01CA  00D1               	movwf	_motorAngle
   663     01CB  3000               	movlw	0
   664     01CC  00D2               	movwf	_motorAngle+1
   665     01CD                     l1969:
   666                           
   667                           ;main.c: 343: motorAngle[1] = -5;
   668     01CD  30FB               	movlw	251
   669     01CE  00D3               	movwf	_motorAngle+2
   670     01CF  30FF               	movlw	255
   671     01D0  00D4               	movwf	_motorAngle+3
   672     01D1                     l1971:
   673                           
   674                           ;main.c: 344: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   675     01D1  0852               	movf	_motorAngle+1,w
   676     01D2  00AF               	movwf	convertAngle@value+1
   677     01D3  0851               	movf	_motorAngle,w
   678     01D4  00AE               	movwf	convertAngle@value
   679     01D5  24C3               	fcall	_convertAngle
   680     01D6  1283               	bcf	3,5	;RP0=0, select bank0
   681     01D7  00E1               	movwf	_motorRawValueTarget
   682     01D8                     l1973:
   683                           
   684                           ;main.c: 345: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   685     01D8  0854               	movf	_motorAngle+3,w
   686     01D9  00AF               	movwf	convertAngle@value+1
   687     01DA  0853               	movf	_motorAngle+2,w
   688     01DB  00AE               	movwf	convertAngle@value
   689     01DC  24C3               	fcall	_convertAngle
   690     01DD  1283               	bcf	3,5	;RP0=0, select bank0
   691     01DE  00E2               	movwf	_motorRawValueTarget+1
   692     01DF                     l1975:
   693                           
   694                           ;main.c: 347: _delay((unsigned long)((1000)*(8000000/4000.0)));
   695     01DF  300B               	movlw	11
   696     01E0  1683               	bsf	3,5	;RP0=1, select bank1
   697     01E1  00AA               	movwf	(??_main^(0+128)+2)
   698     01E2  3026               	movlw	38
   699     01E3  00A9               	movwf	(??_main^(0+128)+1)
   700     01E4  305D               	movlw	93
   701     01E5  00A8               	movwf	??_main^(0+128)
   702     01E6                     u1667:
   703     01E6  0BA8               	decfsz	??_main^(0+128),f
   704     01E7  29E6               	goto	u1667
   705     01E8  0BA9               	decfsz	(??_main^(0+128)+1),f
   706     01E9  29E6               	goto	u1667
   707     01EA  0BAA               	decfsz	(??_main^(0+128)+2),f
   708     01EB  29E6               	goto	u1667
   709     01EC  0000               	nop
   710     01ED                     l1977:
   711                           
   712                           ;main.c: 348: motorAngle[0] = 0;
   713     01ED  1283               	bcf	3,5	;RP0=0, select bank0
   714     01EE  01D1               	clrf	_motorAngle
   715     01EF  01D2               	clrf	_motorAngle+1
   716     01F0                     l1979:
   717                           
   718                           ;main.c: 349: motorAngle[1] = 0;
   719     01F0  01D3               	clrf	_motorAngle+2
   720     01F1  01D4               	clrf	_motorAngle+3
   721     01F2                     l1981:
   722                           
   723                           ;main.c: 350: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   724     01F2  0852               	movf	_motorAngle+1,w
   725     01F3  00AF               	movwf	convertAngle@value+1
   726     01F4  0851               	movf	_motorAngle,w
   727     01F5  00AE               	movwf	convertAngle@value
   728     01F6  24C3               	fcall	_convertAngle
   729     01F7  1283               	bcf	3,5	;RP0=0, select bank0
   730     01F8  00E1               	movwf	_motorRawValueTarget
   731     01F9                     l1983:
   732                           
   733                           ;main.c: 351: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   734     01F9  0854               	movf	_motorAngle+3,w
   735     01FA  00AF               	movwf	convertAngle@value+1
   736     01FB  0853               	movf	_motorAngle+2,w
   737     01FC  00AE               	movwf	convertAngle@value
   738     01FD  24C3               	fcall	_convertAngle
   739     01FE  1283               	bcf	3,5	;RP0=0, select bank0
   740     01FF  00E2               	movwf	_motorRawValueTarget+1
   741     0200                     l1985:
   742                           
   743                           ;main.c: 353: _delay((unsigned long)((1000)*(8000000/4000.0)));
   744     0200  300B               	movlw	11
   745     0201  1683               	bsf	3,5	;RP0=1, select bank1
   746     0202  00AA               	movwf	(??_main^(0+128)+2)
   747     0203  3026               	movlw	38
   748     0204  00A9               	movwf	(??_main^(0+128)+1)
   749     0205  305D               	movlw	93
   750     0206  00A8               	movwf	??_main^(0+128)
   751     0207                     u1677:
   752     0207  0BA8               	decfsz	??_main^(0+128),f
   753     0208  2A07               	goto	u1677
   754     0209  0BA9               	decfsz	(??_main^(0+128)+1),f
   755     020A  2A07               	goto	u1677
   756     020B  0BAA               	decfsz	(??_main^(0+128)+2),f
   757     020C  2A07               	goto	u1677
   758     020D  0000               	nop
   759     020E                     l1987:
   760                           
   761                           ;main.c: 354: GP2 = 1;
   762     020E  1283               	bcf	3,5	;RP0=0, select bank0
   763     020F  1505               	bsf	5,2	;volatile
   764     0210                     l1989:
   765                           
   766                           ;main.c: 357: if (mustCheckServos == 1 && !mustStopNow) {
   767     0210  0375               	decf	_mustCheckServos,w
   768     0211  1D03               	btfss	3,2
   769     0212  2A14               	goto	u1611
   770     0213  2A15               	goto	u1610
   771     0214                     u1611:
   772     0214  2A1C               	goto	l1997
   773     0215                     u1610:
   774     0215                     l1991:
   775     0215  0874               	movf	_mustStopNow,w
   776     0216  1D03               	btfss	3,2
   777     0217  2A19               	goto	u1621
   778     0218  2A1A               	goto	u1620
   779     0219                     u1621:
   780     0219  2A1C               	goto	l1997
   781     021A                     u1620:
   782     021A                     l1993:
   783                           
   784                           ;main.c: 358: mustCheckServos = 0;
   785     021A  01F5               	clrf	_mustCheckServos
   786     021B                     l1995:
   787                           
   788                           ;main.c: 359: setTorretPosition();
   789     021B  2027               	fcall	_setTorretPosition
   790     021C                     l1997:
   791                           
   792                           ;main.c: 360: };main.c: 361: if (mustStopNow == 1) {
   793     021C  0374               	decf	_mustStopNow,w
   794     021D  1D03               	btfss	3,2
   795     021E  2A20               	goto	u1631
   796     021F  2A21               	goto	u1630
   797     0220                     u1631:
   798     0220  2A10               	goto	l1989
   799     0221                     u1630:
   800     0221                     l1999:
   801                           
   802                           ;main.c: 362: GP2 = 0;
   803     0221  1283               	bcf	3,5	;RP0=0, select bank0
   804     0222  1105               	bcf	5,2	;volatile
   805     0223                     l2001:
   806                           
   807                           ;main.c: 363: motorAngle[0] = 0;
   808     0223  01D1               	clrf	_motorAngle
   809     0224  01D2               	clrf	_motorAngle+1
   810                           
   811                           ;main.c: 364: motorAngle[1] = 0;
   812     0225  01D3               	clrf	_motorAngle+2
   813     0226  01D4               	clrf	_motorAngle+3
   814     0227                     l2003:
   815                           
   816                           ;main.c: 365: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   817     0227  0852               	movf	_motorAngle+1,w
   818     0228  00AF               	movwf	convertAngle@value+1
   819     0229  0851               	movf	_motorAngle,w
   820     022A  00AE               	movwf	convertAngle@value
   821     022B  24C3               	fcall	_convertAngle
   822     022C  1283               	bcf	3,5	;RP0=0, select bank0
   823     022D  00E1               	movwf	_motorRawValueTarget
   824     022E                     l2005:
   825                           
   826                           ;main.c: 366: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   827     022E  0854               	movf	_motorAngle+3,w
   828     022F  00AF               	movwf	convertAngle@value+1
   829     0230  0853               	movf	_motorAngle+2,w
   830     0231  00AE               	movwf	convertAngle@value
   831     0232  24C3               	fcall	_convertAngle
   832     0233  1283               	bcf	3,5	;RP0=0, select bank0
   833     0234  00E2               	movwf	_motorRawValueTarget+1
   834     0235  2A10               	goto	l1989
   835     0236  280E               	ljmp	start
   836     0237                     __end_of_main:
   837                           
   838                           	psect	text1
   839     0555                     __ptext1:	
   840 ;; *************** function _setup *****************
   841 ;; Defined at:
   842 ;;		line 199 in file "main.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, status,2, status,0, pclath, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1
   856 ;;      Params:         0       0       0
   857 ;;      Locals:         0       0       0
   858 ;;      Temps:          0       0       0
   859 ;;      Totals:         0       0       0
   860 ;;Total ram usage:        0 bytes
   861 ;; Hardware stack levels used: 1
   862 ;; Hardware stack levels required when called: 3
   863 ;; This function calls:
   864 ;;		_initPWM
   865 ;;		_setupTimer0
   866 ;;		_setupTimer1
   867 ;;		_srand
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873     0555                     _setup:	
   874                           ;psect for function _setup
   875                           
   876     0555                     l1839:	
   877                           ;incstack = 0
   878                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   879                           
   880                           
   881                           ;main.c: 200: srand(TMR1);
   882     0555  1283               	bcf	3,5	;RP0=0, select bank0
   883     0556  080F               	movf	15,w	;volatile
   884     0557  00A1               	movwf	srand@x+1
   885     0558  080E               	movf	14,w	;volatile
   886     0559  00A0               	movwf	srand@x
   887     055A  2584               	fcall	_srand
   888     055B                     l1841:
   889                           
   890                           ;main.c: 201: OSCCON = 0x71;
   891     055B  3071               	movlw	113
   892     055C  1683               	bsf	3,5	;RP0=1, select bank1
   893     055D  008F               	movwf	15	;volatile
   894     055E                     l1843:
   895                           
   896                           ;main.c: 202: ANSEL = 0;
   897     055E  019F               	clrf	31	;volatile
   898     055F                     l1845:
   899                           
   900                           ;main.c: 203: TRISIO = 0b00000011;
   901     055F  3003               	movlw	3
   902     0560  0085               	movwf	5	;volatile
   903     0561                     l1847:
   904                           
   905                           ;main.c: 204: initPWM();
   906     0561  2577               	fcall	_initPWM
   907     0562                     l1849:
   908                           
   909                           ;main.c: 205: setupTimer1();
   910     0562  258F               	fcall	_setupTimer1
   911     0563                     l1851:
   912                           
   913                           ;main.c: 206: setupTimer0();
   914     0563  2599               	fcall	_setupTimer0
   915                           
   916                           ;main.c: 207: ContadorMotor = 0;
   917     0564  01F1               	clrf	_ContadorMotor
   918                           
   919                           ;main.c: 208: contador1Seg =0;
   920     0565  01F2               	clrf	_contador1Seg
   921                           
   922                           ;main.c: 209: contadorTimeShutOff =0;
   923     0566  1283               	bcf	3,5	;RP0=0, select bank0
   924     0567  01DF               	clrf	_contadorTimeShutOff
   925     0568  01E0               	clrf	_contadorTimeShutOff+1
   926                           
   927                           ;main.c: 210: mustStopNow = 0;
   928     0569  01F4               	clrf	_mustStopNow
   929     056A                     l1853:
   930                           
   931                           ;main.c: 211: GPIObits.GP2 = 0;
   932     056A  1105               	bcf	5,2	;volatile
   933     056B                     l1855:
   934                           
   935                           ;main.c: 212: GPIObits.GP4 = 0;
   936     056B  1205               	bcf	5,4	;volatile
   937     056C                     l1857:
   938                           
   939                           ;main.c: 213: GPIObits.GP5 = 0;
   940     056C  1285               	bcf	5,5	;volatile
   941     056D                     l1859:
   942                           
   943                           ;main.c: 216: INTCONbits.GIE = 1;
   944     056D  178B               	bsf	11,7	;volatile
   945     056E                     l1861:
   946                           
   947                           ;main.c: 217: INTCONbits.PEIE = 1;
   948     056E  170B               	bsf	11,6	;volatile
   949     056F                     l1863:
   950                           
   951                           ;main.c: 219: INTCONbits.TMR0IF = 0;
   952     056F  110B               	bcf	11,2	;volatile
   953     0570                     l1865:
   954                           
   955                           ;main.c: 220: PIR1bits.TMR1IF = 0;
   956     0570  100C               	bcf	12,0	;volatile
   957     0571                     l1867:
   958                           
   959                           ;main.c: 221: PIR1bits.TMR2IF = 0;
   960     0571  108C               	bcf	12,1	;volatile
   961     0572                     l1869:
   962                           
   963                           ;main.c: 222: INTCONbits.TMR0IE = 1;
   964     0572  168B               	bsf	11,5	;volatile
   965     0573                     l1871:
   966                           
   967                           ;main.c: 223: PIE1bits.TMR2IE = 1;
   968     0573  1683               	bsf	3,5	;RP0=1, select bank1
   969     0574  148C               	bsf	12,1	;volatile
   970     0575                     l1873:
   971                           
   972                           ;main.c: 224: PIE1bits.TMR1IE = 1;
   973     0575  140C               	bsf	12,0	;volatile
   974     0576                     l118:
   975     0576  0008               	return
   976     0577                     __end_of_setup:
   977                           
   978                           	psect	text2
   979     0584                     __ptext2:	
   980 ;; *************** function _srand *****************
   981 ;; Defined at:
   982 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\rand.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  x               2    0[BANK0 ] unsigned int 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1
   996 ;;      Params:         0       2       0
   997 ;;      Locals:         0       0       0
   998 ;;      Temps:          0       0       0
   999 ;;      Totals:         0       2       0
  1000 ;;Total ram usage:        2 bytes
  1001 ;; Hardware stack levels used: 1
  1002 ;; Hardware stack levels required when called: 2
  1003 ;; This function calls:
  1004 ;;		Nothing
  1005 ;; This function is called by:
  1006 ;;		_setup
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010     0584                     _srand:	
  1011                           ;psect for function _srand
  1012                           
  1013     0584                     l1803:	
  1014                           ;incstack = 0
  1015                           ; Regs used in _srand: [wreg]
  1016                           
  1017     0584  1283               	bcf	3,5	;RP0=0, select bank0
  1018     0585  0820               	movf	srand@x,w
  1019     0586  1683               	bsf	3,5	;RP0=1, select bank1
  1020     0587  00A4               	movwf	_randx^(0+128)
  1021     0588  1283               	bcf	3,5	;RP0=0, select bank0
  1022     0589  0821               	movf	srand@x+1,w
  1023     058A  1683               	bsf	3,5	;RP0=1, select bank1
  1024     058B  00A5               	movwf	(_randx^(0+128)+1)
  1025     058C  01A6               	clrf	(_randx^(0+128)+2)
  1026     058D  01A7               	clrf	(_randx^(0+128)+3)
  1027     058E                     l706:
  1028     058E  0008               	return
  1029     058F                     __end_of_srand:
  1030                           
  1031                           	psect	text3
  1032     058F                     __ptext3:	
  1033 ;; *************** function _setupTimer1 *****************
  1034 ;; Defined at:
  1035 ;;		line 178 in file "main.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;		None
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      void 
  1042 ;; Registers used:
  1043 ;;		wreg, status,2, status,0
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON   BANK0   BANK1
  1049 ;;      Params:         0       0       0
  1050 ;;      Locals:         0       0       0
  1051 ;;      Temps:          0       0       0
  1052 ;;      Totals:         0       0       0
  1053 ;;Total ram usage:        0 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; Hardware stack levels required when called: 2
  1056 ;; This function calls:
  1057 ;;		Nothing
  1058 ;; This function is called by:
  1059 ;;		_setup
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063     058F                     _setupTimer1:	
  1064                           ;psect for function _setupTimer1
  1065                           
  1066     058F                     l1783:	
  1067                           ;incstack = 0
  1068                           ; Regs used in _setupTimer1: [wreg+status,2+status,0]
  1069                           
  1070                           
  1071                           ;main.c: 179: T1CON = 0;
  1072     058F  1283               	bcf	3,5	;RP0=0, select bank0
  1073     0590  0190               	clrf	16	;volatile
  1074     0591                     l1785:
  1075                           
  1076                           ;main.c: 180: T1CONbits.T1CKPS = 0;
  1077     0591  30CF               	movlw	-49
  1078     0592  0590               	andwf	16,f	;volatile
  1079     0593                     l1787:
  1080                           
  1081                           ;main.c: 181: TMR1 = 61561;
  1082     0593  30F0               	movlw	240
  1083     0594  008F               	movwf	15	;volatile
  1084     0595  3079               	movlw	121
  1085     0596  008E               	movwf	14	;volatile
  1086     0597                     l1789:
  1087                           
  1088                           ;main.c: 182: T1CONbits.TMR1ON = 1;
  1089     0597  1410               	bsf	16,0	;volatile
  1090     0598                     l112:
  1091     0598  0008               	return
  1092     0599                     __end_of_setupTimer1:
  1093                           
  1094                           	psect	text4
  1095     0599                     __ptext4:	
  1096 ;; *************** function _setupTimer0 *****************
  1097 ;; Defined at:
  1098 ;;		line 170 in file "main.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1
  1112 ;;      Params:         0       0       0
  1113 ;;      Locals:         0       0       0
  1114 ;;      Temps:          0       0       0
  1115 ;;      Totals:         0       0       0
  1116 ;;Total ram usage:        0 bytes
  1117 ;; Hardware stack levels used: 1
  1118 ;; Hardware stack levels required when called: 2
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_setup
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126     0599                     _setupTimer0:	
  1127                           ;psect for function _setupTimer0
  1128                           
  1129     0599                     l1773:	
  1130                           ;incstack = 0
  1131                           ; Regs used in _setupTimer0: [wreg+status,2+status,0]
  1132                           
  1133                           
  1134                           ;main.c: 171: OPTION_REG = 0;
  1135     0599  1683               	bsf	3,5	;RP0=1, select bank1
  1136     059A  0181               	clrf	1	;volatile
  1137     059B                     l1775:
  1138                           
  1139                           ;main.c: 172: OPTION_REGbits.PSA = 0;
  1140     059B  1181               	bcf	1,3	;volatile
  1141     059C                     l1777:
  1142                           
  1143                           ;main.c: 173: OPTION_REGbits.PS = 7;
  1144     059C  3007               	movlw	7
  1145     059D  0481               	iorwf	1,f	;volatile
  1146     059E                     l1779:
  1147                           
  1148                           ;main.c: 174: TMR0 = 176;
  1149     059E  30B0               	movlw	176
  1150     059F  1283               	bcf	3,5	;RP0=0, select bank0
  1151     05A0  0081               	movwf	1	;volatile
  1152     05A1                     l1781:
  1153                           
  1154                           ;main.c: 175: INTCONbits.TMR0IE = 1;
  1155     05A1  168B               	bsf	11,5	;volatile
  1156     05A2                     l109:
  1157     05A2  0008               	return
  1158     05A3                     __end_of_setupTimer0:
  1159                           
  1160                           	psect	text5
  1161     0577                     __ptext5:	
  1162 ;; *************** function _initPWM *****************
  1163 ;; Defined at:
  1164 ;;		line 185 in file "main.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;		None
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1
  1178 ;;      Params:         0       0       0
  1179 ;;      Locals:         0       0       0
  1180 ;;      Temps:          0       0       0
  1181 ;;      Totals:         0       0       0
  1182 ;;Total ram usage:        0 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; Hardware stack levels required when called: 2
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_setup
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192     0577                     _initPWM:	
  1193                           ;psect for function _initPWM
  1194                           
  1195     0577                     l1791:	
  1196                           ;incstack = 0
  1197                           ; Regs used in _initPWM: [wreg+status,2]
  1198                           
  1199                           
  1200                           ;main.c: 186: CCP1CON = 0b00000000;
  1201     0577  1283               	bcf	3,5	;RP0=0, select bank0
  1202     0578  0195               	clrf	21	;volatile
  1203     0579                     l1793:
  1204                           
  1205                           ;main.c: 187: T2CON = 0b00000011;
  1206     0579  3003               	movlw	3
  1207     057A  0092               	movwf	18	;volatile
  1208     057B                     l1795:
  1209                           
  1210                           ;main.c: 192: PR2 = 249;
  1211     057B  30F9               	movlw	249
  1212     057C  1683               	bsf	3,5	;RP0=1, select bank1
  1213     057D  0092               	movwf	18	;volatile
  1214     057E                     l1797:
  1215                           
  1216                           ;main.c: 194: MaskMotor = 0b00010000;
  1217     057E  3010               	movlw	16
  1218     057F  1283               	bcf	3,5	;RP0=0, select bank0
  1219     0580  00E4               	movwf	_MaskMotor
  1220     0581                     l1799:
  1221                           
  1222                           ;main.c: 195: EstadoRCServo = 0;
  1223     0581  01F3               	clrf	_EstadoRCServo
  1224     0582                     l1801:
  1225                           
  1226                           ;main.c: 196: ContadorMotor = 0;
  1227     0582  01F1               	clrf	_ContadorMotor
  1228     0583                     l115:
  1229     0583  0008               	return
  1230     0584                     __end_of_initPWM:
  1231                           
  1232                           	psect	text6
  1233     0027                     __ptext6:	
  1234 ;; *************** function _setTorretPosition *****************
  1235 ;; Defined at:
  1236 ;;		line 266 in file "main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMMON   BANK0   BANK1
  1250 ;;      Params:         0       0       0
  1251 ;;      Locals:         0       0       0
  1252 ;;      Temps:          0       1       0
  1253 ;;      Totals:         0       1       0
  1254 ;;Total ram usage:        1 bytes
  1255 ;; Hardware stack levels used: 1
  1256 ;; Hardware stack levels required when called: 6
  1257 ;; This function calls:
  1258 ;;		_calculateSpeedIncrement
  1259 ;;		_convertAngle
  1260 ;;		_generateRandom
  1261 ;; This function is called by:
  1262 ;;		_main
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266     0027                     _setTorretPosition:	
  1267                           ;psect for function _setTorretPosition
  1268                           
  1269     0027                     l1875:	
  1270                           ;incstack = 0
  1271                           ; Regs used in _setTorretPosition: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1272                           
  1273                           
  1274                           ;main.c: 269: __nop();
  1275     0027  0000               	nop
  1276                           
  1277                           ;main.c: 270: if ((motorIncrement[0] >= 0 && (motorAngle[0] >= motorTarget[0])) ||;main.
      +                          c: 271: ((motorIncrement[0] < 0 && (motorAngle[0] <= motorTarget[0])))) {
  1278     0028  1283               	bcf	3,5	;RP0=0, select bank0
  1279     0029  1BD6               	btfsc	_motorIncrement+1,7
  1280     002A  282C               	goto	u1491
  1281     002B  282D               	goto	u1490
  1282     002C                     u1491:
  1283     002C  283B               	goto	l141
  1284     002D                     u1490:
  1285     002D                     l1877:
  1286     002D  0852               	movf	_motorAngle+1,w
  1287     002E  3A80               	xorlw	128
  1288     002F  00D0               	movwf	??_setTorretPosition
  1289     0030  085A               	movf	_motorTarget+1,w
  1290     0031  3A80               	xorlw	128
  1291     0032  0250               	subwf	??_setTorretPosition,w
  1292     0033  1D03               	skipz
  1293     0034  2837               	goto	u1505
  1294     0035  0859               	movf	_motorTarget,w
  1295     0036  0251               	subwf	_motorAngle,w
  1296     0037                     u1505:
  1297     0037  1803               	skipnc
  1298     0038  283A               	goto	u1501
  1299     0039  283B               	goto	u1500
  1300     003A                     u1501:
  1301     003A  284E               	goto	l1881
  1302     003B                     u1500:
  1303     003B                     l141:
  1304     003B  1283               	bcf	3,5	;RP0=0, select bank0
  1305     003C  1FD6               	btfss	_motorIncrement+1,7
  1306     003D  283F               	goto	u1511
  1307     003E  2840               	goto	u1510
  1308     003F                     u1511:
  1309     003F  2865               	goto	l1885
  1310     0040                     u1510:
  1311     0040                     l1879:
  1312     0040  085A               	movf	_motorTarget+1,w
  1313     0041  3A80               	xorlw	128
  1314     0042  00D0               	movwf	??_setTorretPosition
  1315     0043  0852               	movf	_motorAngle+1,w
  1316     0044  3A80               	xorlw	128
  1317     0045  0250               	subwf	??_setTorretPosition,w
  1318     0046  1D03               	skipz
  1319     0047  284A               	goto	u1525
  1320     0048  0851               	movf	_motorAngle,w
  1321     0049  0259               	subwf	_motorTarget,w
  1322     004A                     u1525:
  1323     004A  1C03               	skipc
  1324     004B  284D               	goto	u1521
  1325     004C  284E               	goto	u1520
  1326     004D                     u1521:
  1327     004D  2865               	goto	l1885
  1328     004E                     u1520:
  1329     004E                     l1881:
  1330                           
  1331                           ;main.c: 272: motorTarget[0] = (int)generateRandom(-60, 60);
  1332     004E  30C4               	movlw	196
  1333     004F  1283               	bcf	3,5	;RP0=0, select bank0
  1334     0050  00BA               	movwf	generateRandom@min
  1335     0051  30FF               	movlw	255
  1336     0052  00BB               	movwf	generateRandom@min+1
  1337     0053  303C               	movlw	60
  1338     0054  00BC               	movwf	generateRandom@max
  1339     0055  3000               	movlw	0
  1340     0056  00BD               	movwf	generateRandom@max+1
  1341     0057  252F               	fcall	_generateRandom
  1342     0058  1283               	bcf	3,5	;RP0=0, select bank0
  1343     0059  083B               	movf	?_generateRandom+1,w
  1344     005A  00DA               	movwf	_motorTarget+1
  1345     005B  083A               	movf	?_generateRandom,w
  1346     005C  00D9               	movwf	_motorTarget
  1347     005D                     l1883:
  1348                           
  1349                           ;main.c: 273: motorIncrement[0] = calculateSpeedIncrement(0);
  1350     005D  3000               	movlw	0
  1351     005E  2237               	fcall	_calculateSpeedIncrement
  1352     005F  1283               	bcf	3,5	;RP0=0, select bank0
  1353     0060  0843               	movf	?_calculateSpeedIncrement+1,w
  1354     0061  00D6               	movwf	_motorIncrement+1
  1355     0062  0842               	movf	?_calculateSpeedIncrement,w
  1356     0063  00D5               	movwf	_motorIncrement
  1357                           
  1358                           ;main.c: 274: } else if (motorAngle[0] < -60) {
  1359     0064  28D5               	goto	l1909
  1360     0065                     l1885:
  1361     0065  1283               	bcf	3,5	;RP0=0, select bank0
  1362     0066  0852               	movf	_motorAngle+1,w
  1363     0067  3A80               	xorlw	128
  1364     0068  00FF               	movwf	btemp+1
  1365     0069  307F               	movlw	127
  1366     006A  027F               	subwf	btemp+1,w
  1367     006B  1D03               	skipz
  1368     006C  286F               	goto	u1535
  1369     006D  30C4               	movlw	196
  1370     006E  0251               	subwf	_motorAngle,w
  1371     006F                     u1535:
  1372     006F  1803               	skipnc
  1373     0070  2872               	goto	u1531
  1374     0071  2873               	goto	u1530
  1375     0072                     u1531:
  1376     0072  2895               	goto	l1895
  1377     0073                     u1530:
  1378     0073                     l1887:
  1379                           
  1380                           ;main.c: 275: motorTarget[0] = (int)generateRandom(-60, 60);
  1381     0073  30C4               	movlw	196
  1382     0074  1283               	bcf	3,5	;RP0=0, select bank0
  1383     0075  00BA               	movwf	generateRandom@min
  1384     0076  30FF               	movlw	255
  1385     0077  00BB               	movwf	generateRandom@min+1
  1386     0078  303C               	movlw	60
  1387     0079  00BC               	movwf	generateRandom@max
  1388     007A  3000               	movlw	0
  1389     007B  00BD               	movwf	generateRandom@max+1
  1390     007C  252F               	fcall	_generateRandom
  1391     007D  1283               	bcf	3,5	;RP0=0, select bank0
  1392     007E  083B               	movf	?_generateRandom+1,w
  1393     007F  00DA               	movwf	_motorTarget+1
  1394     0080  083A               	movf	?_generateRandom,w
  1395     0081  00D9               	movwf	_motorTarget
  1396     0082                     l1889:
  1397                           
  1398                           ;main.c: 276: motorAngle[0] = -60;
  1399     0082  30C4               	movlw	196
  1400     0083  00D1               	movwf	_motorAngle
  1401     0084  30FF               	movlw	255
  1402     0085  00D2               	movwf	_motorAngle+1
  1403     0086                     l1891:
  1404                           
  1405                           ;main.c: 277: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1406     0086  0852               	movf	_motorAngle+1,w
  1407     0087  00AF               	movwf	convertAngle@value+1
  1408     0088  0851               	movf	_motorAngle,w
  1409     0089  00AE               	movwf	convertAngle@value
  1410     008A  24C3               	fcall	_convertAngle
  1411     008B  1283               	bcf	3,5	;RP0=0, select bank0
  1412     008C  00E1               	movwf	_motorRawValueTarget
  1413     008D                     l1893:
  1414                           
  1415                           ;main.c: 278: motorIncrement[0] = calculateSpeedIncrement(0);
  1416     008D  3000               	movlw	0
  1417     008E  2237               	fcall	_calculateSpeedIncrement
  1418     008F  1283               	bcf	3,5	;RP0=0, select bank0
  1419     0090  0843               	movf	?_calculateSpeedIncrement+1,w
  1420     0091  00D6               	movwf	_motorIncrement+1
  1421     0092  0842               	movf	?_calculateSpeedIncrement,w
  1422     0093  00D5               	movwf	_motorIncrement
  1423                           
  1424                           ;main.c: 279: } else if (motorAngle[0] > 60) {
  1425     0094  28D5               	goto	l1909
  1426     0095                     l1895:
  1427     0095  1283               	bcf	3,5	;RP0=0, select bank0
  1428     0096  0852               	movf	_motorAngle+1,w
  1429     0097  3A80               	xorlw	128
  1430     0098  00FF               	movwf	btemp+1
  1431     0099  3080               	movlw	128
  1432     009A  027F               	subwf	btemp+1,w
  1433     009B  1D03               	skipz
  1434     009C  289F               	goto	u1545
  1435     009D  303D               	movlw	61
  1436     009E  0251               	subwf	_motorAngle,w
  1437     009F                     u1545:
  1438     009F  1C03               	skipc
  1439     00A0  28A2               	goto	u1541
  1440     00A1  28A3               	goto	u1540
  1441     00A2                     u1541:
  1442     00A2  28C5               	goto	l1905
  1443     00A3                     u1540:
  1444     00A3                     l1897:
  1445                           
  1446                           ;main.c: 280: motorTarget[0] = (int)generateRandom(-60, 60);
  1447     00A3  30C4               	movlw	196
  1448     00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1449     00A5  00BA               	movwf	generateRandom@min
  1450     00A6  30FF               	movlw	255
  1451     00A7  00BB               	movwf	generateRandom@min+1
  1452     00A8  303C               	movlw	60
  1453     00A9  00BC               	movwf	generateRandom@max
  1454     00AA  3000               	movlw	0
  1455     00AB  00BD               	movwf	generateRandom@max+1
  1456     00AC  252F               	fcall	_generateRandom
  1457     00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1458     00AE  083B               	movf	?_generateRandom+1,w
  1459     00AF  00DA               	movwf	_motorTarget+1
  1460     00B0  083A               	movf	?_generateRandom,w
  1461     00B1  00D9               	movwf	_motorTarget
  1462     00B2                     l1899:
  1463                           
  1464                           ;main.c: 281: motorAngle[0] = 60;
  1465     00B2  303C               	movlw	60
  1466     00B3  00D1               	movwf	_motorAngle
  1467     00B4  3000               	movlw	0
  1468     00B5  00D2               	movwf	_motorAngle+1
  1469     00B6                     l1901:
  1470                           
  1471                           ;main.c: 282: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1472     00B6  0852               	movf	_motorAngle+1,w
  1473     00B7  00AF               	movwf	convertAngle@value+1
  1474     00B8  0851               	movf	_motorAngle,w
  1475     00B9  00AE               	movwf	convertAngle@value
  1476     00BA  24C3               	fcall	_convertAngle
  1477     00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1478     00BC  00E1               	movwf	_motorRawValueTarget
  1479     00BD                     l1903:
  1480                           
  1481                           ;main.c: 283: motorIncrement[0] = calculateSpeedIncrement(0);
  1482     00BD  3000               	movlw	0
  1483     00BE  2237               	fcall	_calculateSpeedIncrement
  1484     00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1485     00C0  0843               	movf	?_calculateSpeedIncrement+1,w
  1486     00C1  00D6               	movwf	_motorIncrement+1
  1487     00C2  0842               	movf	?_calculateSpeedIncrement,w
  1488     00C3  00D5               	movwf	_motorIncrement
  1489                           
  1490                           ;main.c: 284: } else {
  1491     00C4  28D5               	goto	l1909
  1492     00C5                     l1905:
  1493                           
  1494                           ;main.c: 285: motorAngle[0] = motorAngle[0] + motorIncrement[0];
  1495     00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1496     00C6  0855               	movf	_motorIncrement,w
  1497     00C7  0751               	addwf	_motorAngle,w
  1498     00C8  00D1               	movwf	_motorAngle
  1499     00C9  0856               	movf	_motorIncrement+1,w
  1500     00CA  1803               	skipnc
  1501     00CB  0A56               	incf	_motorIncrement+1,w
  1502     00CC  0752               	addwf	_motorAngle+1,w
  1503     00CD  00D2               	movwf	_motorAngle+1
  1504     00CE                     l1907:
  1505                           
  1506                           ;main.c: 286: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1507     00CE  0852               	movf	_motorAngle+1,w
  1508     00CF  00AF               	movwf	convertAngle@value+1
  1509     00D0  0851               	movf	_motorAngle,w
  1510     00D1  00AE               	movwf	convertAngle@value
  1511     00D2  24C3               	fcall	_convertAngle
  1512     00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1513     00D4  00E1               	movwf	_motorRawValueTarget
  1514     00D5                     l1909:
  1515                           
  1516                           ;main.c: 287: };main.c: 293: if ((motorIncrement[1] >= 0 && (motorAngle[1] >= motorTarge
      +                          t[1])) ||;main.c: 294: ((motorIncrement[1] < 0 && (motorAngle[1] <= motorTarget[1])))) {
  1517     00D5  1BD8               	btfsc	_motorIncrement+3,7
  1518     00D6  28D8               	goto	u1551
  1519     00D7  28D9               	goto	u1550
  1520     00D8                     u1551:
  1521     00D8  28E7               	goto	l1913
  1522     00D9                     u1550:
  1523     00D9                     l1911:
  1524     00D9  0854               	movf	_motorAngle+3,w
  1525     00DA  3A80               	xorlw	128
  1526     00DB  00D0               	movwf	??_setTorretPosition
  1527     00DC  085C               	movf	_motorTarget+3,w
  1528     00DD  3A80               	xorlw	128
  1529     00DE  0250               	subwf	??_setTorretPosition,w
  1530     00DF  1D03               	skipz
  1531     00E0  28E3               	goto	u1565
  1532     00E1  085B               	movf	_motorTarget+2,w
  1533     00E2  0253               	subwf	_motorAngle+2,w
  1534     00E3                     u1565:
  1535     00E3  1803               	skipnc
  1536     00E4  28E6               	goto	u1561
  1537     00E5  28E7               	goto	u1560
  1538     00E6                     u1561:
  1539     00E6  28FF               	goto	l1917
  1540     00E7                     u1560:
  1541     00E7                     l1913:
  1542     00E7  3002               	movlw	2
  1543     00E8  3E55               	addlw	(low (_motorIncrement| 0))& (0+255)
  1544     00E9  0084               	movwf	4
  1545     00EA  0A84               	incf	4,f
  1546     00EB  1383               	bcf	3,7	;select IRP bank0
  1547     00EC  1F80               	btfss	0,7
  1548     00ED  28EF               	goto	u1571
  1549     00EE  28F0               	goto	u1570
  1550     00EF                     u1571:
  1551     00EF  2916               	goto	l1921
  1552     00F0                     u1570:
  1553     00F0                     l1915:
  1554     00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1555     00F1  085C               	movf	_motorTarget+3,w
  1556     00F2  3A80               	xorlw	128
  1557     00F3  00D0               	movwf	??_setTorretPosition
  1558     00F4  0854               	movf	_motorAngle+3,w
  1559     00F5  3A80               	xorlw	128
  1560     00F6  0250               	subwf	??_setTorretPosition,w
  1561     00F7  1D03               	skipz
  1562     00F8  28FB               	goto	u1585
  1563     00F9  0853               	movf	_motorAngle+2,w
  1564     00FA  025B               	subwf	_motorTarget+2,w
  1565     00FB                     u1585:
  1566     00FB  1C03               	skipc
  1567     00FC  28FE               	goto	u1581
  1568     00FD  28FF               	goto	u1580
  1569     00FE                     u1581:
  1570     00FE  2916               	goto	l1921
  1571     00FF                     u1580:
  1572     00FF                     l1917:
  1573                           
  1574                           ;main.c: 295: motorTarget[1] = (int)generateRandom(-65, -5);
  1575     00FF  30BF               	movlw	191
  1576     0100  1283               	bcf	3,5	;RP0=0, select bank0
  1577     0101  00BA               	movwf	generateRandom@min
  1578     0102  30FF               	movlw	255
  1579     0103  00BB               	movwf	generateRandom@min+1
  1580     0104  30FB               	movlw	251
  1581     0105  00BC               	movwf	generateRandom@max
  1582     0106  30FF               	movlw	255
  1583     0107  00BD               	movwf	generateRandom@max+1
  1584     0108  252F               	fcall	_generateRandom
  1585     0109  1283               	bcf	3,5	;RP0=0, select bank0
  1586     010A  083B               	movf	?_generateRandom+1,w
  1587     010B  00DC               	movwf	_motorTarget+3
  1588     010C  083A               	movf	?_generateRandom,w
  1589     010D  00DB               	movwf	_motorTarget+2
  1590     010E                     l1919:
  1591                           
  1592                           ;main.c: 296: motorIncrement[1] = calculateSpeedIncrement(1);
  1593     010E  3001               	movlw	1
  1594     010F  2237               	fcall	_calculateSpeedIncrement
  1595     0110  1283               	bcf	3,5	;RP0=0, select bank0
  1596     0111  0843               	movf	?_calculateSpeedIncrement+1,w
  1597     0112  00D8               	movwf	_motorIncrement+3
  1598     0113  0842               	movf	?_calculateSpeedIncrement,w
  1599     0114  00D7               	movwf	_motorIncrement+2
  1600                           
  1601                           ;main.c: 297: } else if (motorAngle[1] < -65) {
  1602     0115  297F               	goto	l157
  1603     0116                     l1921:
  1604     0116  1283               	bcf	3,5	;RP0=0, select bank0
  1605     0117  0854               	movf	_motorAngle+3,w
  1606     0118  3A80               	xorlw	128
  1607     0119  00FF               	movwf	btemp+1
  1608     011A  307F               	movlw	127
  1609     011B  027F               	subwf	btemp+1,w
  1610     011C  1D03               	skipz
  1611     011D  2920               	goto	u1595
  1612     011E  30BF               	movlw	191
  1613     011F  0253               	subwf	_motorAngle+2,w
  1614     0120                     u1595:
  1615     0120  1803               	skipnc
  1616     0121  2923               	goto	u1591
  1617     0122  2924               	goto	u1590
  1618     0123                     u1591:
  1619     0123  2946               	goto	l1931
  1620     0124                     u1590:
  1621     0124                     l1923:
  1622                           
  1623                           ;main.c: 298: motorTarget[1] = (int)generateRandom(-65, -5);
  1624     0124  30BF               	movlw	191
  1625     0125  1283               	bcf	3,5	;RP0=0, select bank0
  1626     0126  00BA               	movwf	generateRandom@min
  1627     0127  30FF               	movlw	255
  1628     0128  00BB               	movwf	generateRandom@min+1
  1629     0129  30FB               	movlw	251
  1630     012A  00BC               	movwf	generateRandom@max
  1631     012B  30FF               	movlw	255
  1632     012C  00BD               	movwf	generateRandom@max+1
  1633     012D  252F               	fcall	_generateRandom
  1634     012E  1283               	bcf	3,5	;RP0=0, select bank0
  1635     012F  083B               	movf	?_generateRandom+1,w
  1636     0130  00DC               	movwf	_motorTarget+3
  1637     0131  083A               	movf	?_generateRandom,w
  1638     0132  00DB               	movwf	_motorTarget+2
  1639     0133                     l1925:
  1640                           
  1641                           ;main.c: 299: motorAngle[1] = -65;
  1642     0133  30BF               	movlw	191
  1643     0134  00D3               	movwf	_motorAngle+2
  1644     0135  30FF               	movlw	255
  1645     0136  00D4               	movwf	_motorAngle+3
  1646     0137                     l1927:
  1647                           
  1648                           ;main.c: 300: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
  1649     0137  0854               	movf	_motorAngle+3,w
  1650     0138  00AF               	movwf	convertAngle@value+1
  1651     0139  0853               	movf	_motorAngle+2,w
  1652     013A  00AE               	movwf	convertAngle@value
  1653     013B  24C3               	fcall	_convertAngle
  1654     013C  1283               	bcf	3,5	;RP0=0, select bank0
  1655     013D  00E2               	movwf	_motorRawValueTarget+1
  1656     013E                     l1929:
  1657                           
  1658                           ;main.c: 301: motorIncrement[1] = calculateSpeedIncrement(1);
  1659     013E  3001               	movlw	1
  1660     013F  2237               	fcall	_calculateSpeedIncrement
  1661     0140  1283               	bcf	3,5	;RP0=0, select bank0
  1662     0141  0843               	movf	?_calculateSpeedIncrement+1,w
  1663     0142  00D8               	movwf	_motorIncrement+3
  1664     0143  0842               	movf	?_calculateSpeedIncrement,w
  1665     0144  00D7               	movwf	_motorIncrement+2
  1666                           
  1667                           ;main.c: 302: } else if (motorAngle[1] > -5) {
  1668     0145  297F               	goto	l157
  1669     0146                     l1931:
  1670     0146  1283               	bcf	3,5	;RP0=0, select bank0
  1671     0147  0854               	movf	_motorAngle+3,w
  1672     0148  3A80               	xorlw	128
  1673     0149  00FF               	movwf	btemp+1
  1674     014A  307F               	movlw	127
  1675     014B  027F               	subwf	btemp+1,w
  1676     014C  1D03               	skipz
  1677     014D  2950               	goto	u1605
  1678     014E  30FC               	movlw	252
  1679     014F  0253               	subwf	_motorAngle+2,w
  1680     0150                     u1605:
  1681     0150  1C03               	skipc
  1682     0151  2953               	goto	u1601
  1683     0152  2954               	goto	u1600
  1684     0153                     u1601:
  1685     0153  296F               	goto	l1939
  1686     0154                     u1600:
  1687     0154                     l1933:
  1688                           
  1689                           ;main.c: 303: motorTarget[1] = (int)generateRandom(-65, -5);
  1690     0154  30BF               	movlw	191
  1691     0155  1283               	bcf	3,5	;RP0=0, select bank0
  1692     0156  00BA               	movwf	generateRandom@min
  1693     0157  30FF               	movlw	255
  1694     0158  00BB               	movwf	generateRandom@min+1
  1695     0159  30FB               	movlw	251
  1696     015A  00BC               	movwf	generateRandom@max
  1697     015B  30FF               	movlw	255
  1698     015C  00BD               	movwf	generateRandom@max+1
  1699     015D  252F               	fcall	_generateRandom
  1700     015E  1283               	bcf	3,5	;RP0=0, select bank0
  1701     015F  083B               	movf	?_generateRandom+1,w
  1702     0160  00DC               	movwf	_motorTarget+3
  1703     0161  083A               	movf	?_generateRandom,w
  1704     0162  00DB               	movwf	_motorTarget+2
  1705     0163                     l1935:
  1706                           
  1707                           ;main.c: 304: motorAngle[1] = -5;
  1708     0163  30FB               	movlw	251
  1709     0164  00D3               	movwf	_motorAngle+2
  1710     0165  30FF               	movlw	255
  1711     0166  00D4               	movwf	_motorAngle+3
  1712     0167                     l1937:
  1713                           
  1714                           ;main.c: 305: motorIncrement[1] = calculateSpeedIncrement(1);
  1715     0167  3001               	movlw	1
  1716     0168  2237               	fcall	_calculateSpeedIncrement
  1717     0169  1283               	bcf	3,5	;RP0=0, select bank0
  1718     016A  0843               	movf	?_calculateSpeedIncrement+1,w
  1719     016B  00D8               	movwf	_motorIncrement+3
  1720     016C  0842               	movf	?_calculateSpeedIncrement,w
  1721     016D  00D7               	movwf	_motorIncrement+2
  1722                           
  1723                           ;main.c: 306: } else {
  1724     016E  297F               	goto	l157
  1725     016F                     l1939:
  1726                           
  1727                           ;main.c: 307: motorAngle[1] = motorAngle[1] + motorIncrement[1];
  1728     016F  1283               	bcf	3,5	;RP0=0, select bank0
  1729     0170  0857               	movf	_motorIncrement+2,w
  1730     0171  0753               	addwf	_motorAngle+2,w
  1731     0172  00D3               	movwf	_motorAngle+2
  1732     0173  0858               	movf	_motorIncrement+3,w
  1733     0174  1803               	skipnc
  1734     0175  0A58               	incf	_motorIncrement+3,w
  1735     0176  0754               	addwf	_motorAngle+3,w
  1736     0177  00D4               	movwf	_motorAngle+3
  1737     0178                     l1941:
  1738                           
  1739                           ;main.c: 308: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
  1740     0178  0854               	movf	_motorAngle+3,w
  1741     0179  00AF               	movwf	convertAngle@value+1
  1742     017A  0853               	movf	_motorAngle+2,w
  1743     017B  00AE               	movwf	convertAngle@value
  1744     017C  24C3               	fcall	_convertAngle
  1745     017D  1283               	bcf	3,5	;RP0=0, select bank0
  1746     017E  00E2               	movwf	_motorRawValueTarget+1
  1747     017F                     l157:
  1748     017F  0008               	return
  1749     0180                     __end_of_setTorretPosition:
  1750                           
  1751                           	psect	text7
  1752     04C3                     __ptext7:	
  1753 ;; *************** function _convertAngle *****************
  1754 ;; Defined at:
  1755 ;;		line 236 in file "main.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  value           2   14[BANK0 ] int 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  temp            2   16[BANK0 ] int 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      unsigned char 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1
  1769 ;;      Params:         0       2       0
  1770 ;;      Locals:         0       2       0
  1771 ;;      Temps:          0       0       0
  1772 ;;      Totals:         0       4       0
  1773 ;;Total ram usage:        4 bytes
  1774 ;; Hardware stack levels used: 1
  1775 ;; Hardware stack levels required when called: 3
  1776 ;; This function calls:
  1777 ;;		___awdiv
  1778 ;;		___wmul
  1779 ;; This function is called by:
  1780 ;;		_setTorretPosition
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785     04C3                     _convertAngle:	
  1786                           ;psect for function _convertAngle
  1787                           
  1788     04C3                     l1805:	
  1789                           ;incstack = 0
  1790                           ; Regs used in _convertAngle: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1791                           
  1792                           
  1793                           ;main.c: 237: int temp;;main.c: 238: if (value < -90) {
  1794     04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1795     04C4  082F               	movf	convertAngle@value+1,w
  1796     04C5  3A80               	xorlw	128
  1797     04C6  00FF               	movwf	btemp+1
  1798     04C7  307F               	movlw	127
  1799     04C8  027F               	subwf	btemp+1,w
  1800     04C9  1D03               	skipz
  1801     04CA  2CCD               	goto	u1445
  1802     04CB  30A6               	movlw	166
  1803     04CC  022E               	subwf	convertAngle@value,w
  1804     04CD                     u1445:
  1805     04CD  1803               	skipnc
  1806     04CE  2CD0               	goto	u1441
  1807     04CF  2CD1               	goto	u1440
  1808     04D0                     u1441:
  1809     04D0  2CD7               	goto	l1809
  1810     04D1                     u1440:
  1811     04D1                     l1807:
  1812                           
  1813                           ;main.c: 239: value = -90;
  1814     04D1  30A6               	movlw	166
  1815     04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1816     04D3  00AE               	movwf	convertAngle@value
  1817     04D4  30FF               	movlw	255
  1818     04D5  00AF               	movwf	convertAngle@value+1
  1819                           
  1820                           ;main.c: 240: } else if (value > 90) {
  1821     04D6  2CEA               	goto	l1813
  1822     04D7                     l1809:
  1823     04D7  1283               	bcf	3,5	;RP0=0, select bank0
  1824     04D8  082F               	movf	convertAngle@value+1,w
  1825     04D9  3A80               	xorlw	128
  1826     04DA  00FF               	movwf	btemp+1
  1827     04DB  3080               	movlw	128
  1828     04DC  027F               	subwf	btemp+1,w
  1829     04DD  1D03               	skipz
  1830     04DE  2CE1               	goto	u1455
  1831     04DF  305B               	movlw	91
  1832     04E0  022E               	subwf	convertAngle@value,w
  1833     04E1                     u1455:
  1834     04E1  1C03               	skipc
  1835     04E2  2CE4               	goto	u1451
  1836     04E3  2CE5               	goto	u1450
  1837     04E4                     u1451:
  1838     04E4  2CEA               	goto	l1813
  1839     04E5                     u1450:
  1840     04E5                     l1811:
  1841                           
  1842                           ;main.c: 241: value = 90;
  1843     04E5  305A               	movlw	90
  1844     04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1845     04E7  00AE               	movwf	convertAngle@value
  1846     04E8  3000               	movlw	0
  1847     04E9  00AF               	movwf	convertAngle@value+1
  1848     04EA                     l1813:
  1849                           
  1850                           ;main.c: 242: };main.c: 243: temp = (value * 255) / (90 - -90) + (127);
  1851     04EA  30B4               	movlw	180
  1852     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  1853     04EC  00A6               	movwf	___awdiv@divisor
  1854     04ED  3000               	movlw	0
  1855     04EE  00A7               	movwf	___awdiv@divisor+1
  1856     04EF  082F               	movf	convertAngle@value+1,w
  1857     04F0  00A1               	movwf	___wmul@multiplier+1
  1858     04F1  082E               	movf	convertAngle@value,w
  1859     04F2  00A0               	movwf	___wmul@multiplier
  1860     04F3  30FF               	movlw	255
  1861     04F4  00A2               	movwf	___wmul@multiplicand
  1862     04F5  3000               	movlw	0
  1863     04F6  00A3               	movwf	___wmul@multiplicand+1
  1864     04F7  2509               	fcall	___wmul
  1865     04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1866     04F9  0821               	movf	?___wmul+1,w
  1867     04FA  00A9               	movwf	___awdiv@dividend+1
  1868     04FB  0820               	movf	?___wmul,w
  1869     04FC  00A8               	movwf	___awdiv@dividend
  1870     04FD  231C               	fcall	___awdiv
  1871     04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1872     04FF  0826               	movf	?___awdiv,w
  1873     0500  3E7F               	addlw	127
  1874     0501  00B0               	movwf	convertAngle@temp
  1875     0502  0827               	movf	?___awdiv+1,w
  1876     0503  1803               	skipnc
  1877     0504  3E01               	addlw	1
  1878     0505  3E00               	addlw	0
  1879     0506  00B1               	movwf	convertAngle@temp+1
  1880     0507                     l1815:
  1881                           
  1882                           ;main.c: 244: return temp;
  1883     0507  0830               	movf	convertAngle@temp,w
  1884     0508                     l127:
  1885     0508  0008               	return
  1886     0509                     __end_of_convertAngle:
  1887                           
  1888                           	psect	text8
  1889     0509                     __ptext8:	
  1890 ;; *************** function ___wmul *****************
  1891 ;; Defined at:
  1892 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\Umul16.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1895 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  product         2    4[BANK0 ] unsigned int 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  2    0[BANK0 ] unsigned int 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1
  1907 ;;      Params:         0       4       0
  1908 ;;      Locals:         0       2       0
  1909 ;;      Temps:          0       0       0
  1910 ;;      Totals:         0       6       0
  1911 ;;Total ram usage:        6 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; Hardware stack levels required when called: 2
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_convertAngle
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921     0509                     ___wmul:	
  1922                           ;psect for function ___wmul
  1923                           
  1924     0509                     l1715:	
  1925                           ;incstack = 0
  1926                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1927                           
  1928     0509  1283               	bcf	3,5	;RP0=0, select bank0
  1929     050A  01A4               	clrf	___wmul@product
  1930     050B  01A5               	clrf	___wmul@product+1
  1931     050C                     l1717:
  1932     050C  1C20               	btfss	___wmul@multiplier,0
  1933     050D  2D0F               	goto	u1301
  1934     050E  2D10               	goto	u1300
  1935     050F                     u1301:
  1936     050F  2D16               	goto	l253
  1937     0510                     u1300:
  1938     0510                     l1719:
  1939     0510  0822               	movf	___wmul@multiplicand,w
  1940     0511  07A4               	addwf	___wmul@product,f
  1941     0512  1803               	skipnc
  1942     0513  0AA5               	incf	___wmul@product+1,f
  1943     0514  0823               	movf	___wmul@multiplicand+1,w
  1944     0515  07A5               	addwf	___wmul@product+1,f
  1945     0516                     l253:
  1946     0516  3001               	movlw	1
  1947     0517                     u1315:
  1948     0517  1003               	clrc
  1949     0518  0DA2               	rlf	___wmul@multiplicand,f
  1950     0519  0DA3               	rlf	___wmul@multiplicand+1,f
  1951     051A  3EFF               	addlw	-1
  1952     051B  1D03               	skipz
  1953     051C  2D17               	goto	u1315
  1954     051D                     l1721:
  1955     051D  3001               	movlw	1
  1956     051E                     u1325:
  1957     051E  1003               	clrc
  1958     051F  0CA1               	rrf	___wmul@multiplier+1,f
  1959     0520  0CA0               	rrf	___wmul@multiplier,f
  1960     0521  3EFF               	addlw	-1
  1961     0522  1D03               	skipz
  1962     0523  2D1E               	goto	u1325
  1963     0524                     l1723:
  1964     0524  0820               	movf	___wmul@multiplier,w
  1965     0525  0421               	iorwf	___wmul@multiplier+1,w
  1966     0526  1D03               	btfss	3,2
  1967     0527  2D29               	goto	u1331
  1968     0528  2D2A               	goto	u1330
  1969     0529                     u1331:
  1970     0529  2D0C               	goto	l1717
  1971     052A                     u1330:
  1972     052A                     l1725:
  1973     052A  0825               	movf	___wmul@product+1,w
  1974     052B  00A1               	movwf	?___wmul+1
  1975     052C  0824               	movf	___wmul@product,w
  1976     052D  00A0               	movwf	?___wmul
  1977     052E                     l255:
  1978     052E  0008               	return
  1979     052F                     __end_of___wmul:
  1980                           
  1981                           	psect	text9
  1982     0237                     __ptext9:	
  1983 ;; *************** function _calculateSpeedIncrement *****************
  1984 ;; Defined at:
  1985 ;;		line 247 in file "main.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  index           1    wreg     unsigned char 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  index           1   47[BANK0 ] unsigned char 
  1990 ;;  increment       2   45[BANK0 ] int 
  1991 ;;  speed           2   43[BANK0 ] int 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  2   34[BANK0 ] int 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1
  2001 ;;      Params:         0       2       0
  2002 ;;      Locals:         0       5       0
  2003 ;;      Temps:          0       7       0
  2004 ;;      Totals:         0      14       0
  2005 ;;Total ram usage:       14 bytes
  2006 ;; Hardware stack levels used: 1
  2007 ;; Hardware stack levels required when called: 5
  2008 ;; This function calls:
  2009 ;;		___awdiv
  2010 ;;		_generateRandom
  2011 ;; This function is called by:
  2012 ;;		_setTorretPosition
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016     0237                     _calculateSpeedIncrement:	
  2017                           ;psect for function _calculateSpeedIncrement
  2018                           
  2019                           
  2020                           ;incstack = 0
  2021                           ; Regs used in _calculateSpeedIncrement: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  2022                           ;calculateSpeedIncrement@index stored from wreg
  2023     0237  1283               	bcf	3,5	;RP0=0, select bank0
  2024     0238  00CF               	movwf	calculateSpeedIncrement@index
  2025     0239                     l1819:
  2026                           
  2027                           ;main.c: 248: int increment;;main.c: 249: int speed;;main.c: 251: if (index > (2 - 1)) {
  2028     0239  3002               	movlw	2
  2029     023A  024F               	subwf	calculateSpeedIncrement@index,w
  2030     023B  1C03               	skipc
  2031     023C  2A3E               	goto	u1461
  2032     023D  2A3F               	goto	u1460
  2033     023E                     u1461:
  2034     023E  2A42               	goto	l1825
  2035     023F                     u1460:
  2036     023F                     l1821:
  2037                           
  2038                           ;main.c: 252: return 0;
  2039     023F  01C2               	clrf	?_calculateSpeedIncrement
  2040     0240  01C3               	clrf	?_calculateSpeedIncrement+1
  2041     0241  2AB2               	goto	l131
  2042     0242                     l1825:
  2043                           
  2044                           ;main.c: 253: };main.c: 254: speed = (uint8_t)generateRandom(15, 30);
  2045     0242  300F               	movlw	15
  2046     0243  00BA               	movwf	generateRandom@min
  2047     0244  3000               	movlw	0
  2048     0245  00BB               	movwf	generateRandom@min+1
  2049     0246  301E               	movlw	30
  2050     0247  00BC               	movwf	generateRandom@max
  2051     0248  3000               	movlw	0
  2052     0249  00BD               	movwf	generateRandom@max+1
  2053     024A  252F               	fcall	_generateRandom
  2054     024B  1283               	bcf	3,5	;RP0=0, select bank0
  2055     024C  083A               	movf	?_generateRandom,w
  2056     024D  00C4               	movwf	??_calculateSpeedIncrement
  2057     024E  01C5               	clrf	??_calculateSpeedIncrement+1
  2058     024F  0844               	movf	??_calculateSpeedIncrement,w
  2059     0250  00CB               	movwf	calculateSpeedIncrement@speed
  2060     0251  0845               	movf	??_calculateSpeedIncrement+1,w
  2061     0252  00CC               	movwf	calculateSpeedIncrement@speed+1
  2062     0253                     l1827:
  2063                           
  2064                           ;main.c: 255: increment = (motorTarget[index] - motorAngle[index]) / speed;
  2065     0253  084C               	movf	calculateSpeedIncrement@speed+1,w
  2066     0254  00A7               	movwf	___awdiv@divisor+1
  2067     0255  084B               	movf	calculateSpeedIncrement@speed,w
  2068     0256  00A6               	movwf	___awdiv@divisor
  2069     0257  084F               	movf	calculateSpeedIncrement@index,w
  2070     0258  00C4               	movwf	??_calculateSpeedIncrement
  2071     0259  0744               	addwf	??_calculateSpeedIncrement,w
  2072     025A  3E51               	addlw	(low (_motorAngle| 0))& (0+255)
  2073     025B  0084               	movwf	4
  2074     025C  1383               	bcf	3,7	;select IRP bank0
  2075     025D  0800               	movf	0,w
  2076     025E  00C5               	movwf	??_calculateSpeedIncrement+1
  2077     025F  0A84               	incf	4,f
  2078     0260  0800               	movf	0,w
  2079     0261  00C6               	movwf	??_calculateSpeedIncrement+2
  2080     0262  084F               	movf	calculateSpeedIncrement@index,w
  2081     0263  00C7               	movwf	??_calculateSpeedIncrement+3
  2082     0264  0747               	addwf	??_calculateSpeedIncrement+3,w
  2083     0265  3E59               	addlw	(low (_motorTarget| 0))& (0+255)
  2084     0266  0084               	movwf	4
  2085     0267  0800               	movf	0,w
  2086     0268  00C8               	movwf	??_calculateSpeedIncrement+4
  2087     0269  0A84               	incf	4,f
  2088     026A  0800               	movf	0,w
  2089     026B  00C9               	movwf	??_calculateSpeedIncrement+5
  2090     026C  0845               	movf	??_calculateSpeedIncrement+1,w
  2091     026D  0248               	subwf	??_calculateSpeedIncrement+4,w
  2092     026E  00A8               	movwf	___awdiv@dividend
  2093     026F  0846               	movf	??_calculateSpeedIncrement+2,w
  2094     0270  1C03               	skipc
  2095     0271  0A46               	incf	??_calculateSpeedIncrement+2,w
  2096     0272  0249               	subwf	??_calculateSpeedIncrement+5,w
  2097     0273  00A9               	movwf	___awdiv@dividend+1
  2098     0274  231C               	fcall	___awdiv
  2099     0275  1283               	bcf	3,5	;RP0=0, select bank0
  2100     0276  0827               	movf	?___awdiv+1,w
  2101     0277  00CE               	movwf	calculateSpeedIncrement@increment+1
  2102     0278  0826               	movf	?___awdiv,w
  2103     0279  00CD               	movwf	calculateSpeedIncrement@increment
  2104     027A                     l1829:
  2105                           
  2106                           ;main.c: 256: if (increment == 0) {
  2107     027A  084D               	movf	calculateSpeedIncrement@increment,w
  2108     027B  044E               	iorwf	calculateSpeedIncrement@increment+1,w
  2109     027C  1D03               	btfss	3,2
  2110     027D  2A7F               	goto	u1471
  2111     027E  2A80               	goto	u1470
  2112     027F                     u1471:
  2113     027F  2AAE               	goto	l132
  2114     0280                     u1470:
  2115     0280                     l1831:
  2116                           
  2117                           ;main.c: 257: if (motorTarget[index] > motorAngle[index]) {
  2118     0280  084F               	movf	calculateSpeedIncrement@index,w
  2119     0281  00C4               	movwf	??_calculateSpeedIncrement
  2120     0282  0744               	addwf	??_calculateSpeedIncrement,w
  2121     0283  3E59               	addlw	(low (_motorTarget| 0))& (0+255)
  2122     0284  0084               	movwf	4
  2123     0285  1383               	bcf	3,7	;select IRP bank0
  2124     0286  0800               	movf	0,w
  2125     0287  00C5               	movwf	??_calculateSpeedIncrement+1
  2126     0288  0A84               	incf	4,f
  2127     0289  0800               	movf	0,w
  2128     028A  00C6               	movwf	??_calculateSpeedIncrement+2
  2129     028B  084F               	movf	calculateSpeedIncrement@index,w
  2130     028C  00C7               	movwf	??_calculateSpeedIncrement+3
  2131     028D  0747               	addwf	??_calculateSpeedIncrement+3,w
  2132     028E  3E51               	addlw	(low (_motorAngle| 0))& (0+255)
  2133     028F  0084               	movwf	4
  2134     0290  0800               	movf	0,w
  2135     0291  00C8               	movwf	??_calculateSpeedIncrement+4
  2136     0292  0A84               	incf	4,f
  2137     0293  0800               	movf	0,w
  2138     0294  00C9               	movwf	??_calculateSpeedIncrement+5
  2139     0295  0849               	movf	??_calculateSpeedIncrement+5,w
  2140     0296  3A80               	xorlw	128
  2141     0297  00CA               	movwf	??_calculateSpeedIncrement+6
  2142     0298  0846               	movf	??_calculateSpeedIncrement+2,w
  2143     0299  3A80               	xorlw	128
  2144     029A  024A               	subwf	??_calculateSpeedIncrement+6,w
  2145     029B  1D03               	skipz
  2146     029C  2A9F               	goto	u1485
  2147     029D  0845               	movf	??_calculateSpeedIncrement+1,w
  2148     029E  0248               	subwf	??_calculateSpeedIncrement+4,w
  2149     029F                     u1485:
  2150     029F  1803               	skipnc
  2151     02A0  2AA2               	goto	u1481
  2152     02A1  2AA3               	goto	u1480
  2153     02A2                     u1481:
  2154     02A2  2AA9               	goto	l1835
  2155     02A3                     u1480:
  2156     02A3                     l1833:
  2157                           
  2158                           ;main.c: 258: increment = 1;
  2159     02A3  3001               	movlw	1
  2160     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2161     02A5  00CD               	movwf	calculateSpeedIncrement@increment
  2162     02A6  3000               	movlw	0
  2163     02A7  00CE               	movwf	calculateSpeedIncrement@increment+1
  2164                           
  2165                           ;main.c: 259: } else {
  2166     02A8  2AAE               	goto	l132
  2167     02A9                     l1835:
  2168                           
  2169                           ;main.c: 260: increment = -1;
  2170     02A9  30FF               	movlw	255
  2171     02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2172     02AB  00CD               	movwf	calculateSpeedIncrement@increment
  2173     02AC  30FF               	movlw	255
  2174     02AD  00CE               	movwf	calculateSpeedIncrement@increment+1
  2175     02AE                     l132:
  2176                           
  2177                           ;main.c: 261: };main.c: 262: };main.c: 263: return increment;
  2178     02AE  084E               	movf	calculateSpeedIncrement@increment+1,w
  2179     02AF  00C3               	movwf	?_calculateSpeedIncrement+1
  2180     02B0  084D               	movf	calculateSpeedIncrement@increment,w
  2181     02B1  00C2               	movwf	?_calculateSpeedIncrement
  2182     02B2                     l131:
  2183     02B2  0008               	return
  2184     02B3                     __end_of_calculateSpeedIncrement:
  2185                           
  2186                           	psect	text10
  2187     052F                     __ptext10:	
  2188 ;; *************** function _generateRandom *****************
  2189 ;; Defined at:
  2190 ;;		line 228 in file "main.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  min             2   26[BANK0 ] int 
  2193 ;;  max             2   28[BANK0 ] int 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  randomNumber    2   32[BANK0 ] int 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  2   26[BANK0 ] int 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1
  2205 ;;      Params:         0       4       0
  2206 ;;      Locals:         0       2       0
  2207 ;;      Temps:          0       2       0
  2208 ;;      Totals:         0       8       0
  2209 ;;Total ram usage:        8 bytes
  2210 ;; Hardware stack levels used: 1
  2211 ;; Hardware stack levels required when called: 4
  2212 ;; This function calls:
  2213 ;;		___awmod
  2214 ;;		_rand
  2215 ;; This function is called by:
  2216 ;;		_calculateSpeedIncrement
  2217 ;;		_setTorretPosition
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221     052F                     _generateRandom:	
  2222                           ;psect for function _generateRandom
  2223                           
  2224     052F                     l1707:	
  2225                           ;incstack = 0
  2226                           ; Regs used in _generateRandom: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2227                           
  2228     052F                     l1709:
  2229                           
  2230                           ;main.c: 231: randomNumber = (rand() % (max - min + 1)) +;main.c: 232: min;
  2231     052F  1283               	bcf	3,5	;RP0=0, select bank0
  2232     0530  083A               	movf	generateRandom@min,w
  2233     0531  023C               	subwf	generateRandom@max,w
  2234     0532  00BE               	movwf	??_generateRandom
  2235     0533  083B               	movf	generateRandom@min+1,w
  2236     0534  1C03               	skipc
  2237     0535  0A3B               	incf	generateRandom@min+1,w
  2238     0536  023D               	subwf	generateRandom@max+1,w
  2239     0537  00BF               	movwf	??_generateRandom+1
  2240     0538  083E               	movf	??_generateRandom,w
  2241     0539  3E01               	addlw	1
  2242     053A  00B4               	movwf	___awmod@divisor
  2243     053B  083F               	movf	??_generateRandom+1,w
  2244     053C  1803               	skipnc
  2245     053D  3E01               	addlw	1
  2246     053E  3E00               	addlw	0
  2247     053F  00B5               	movwf	___awmod@divisor+1
  2248     0540  23DE               	fcall	_rand
  2249     0541  1283               	bcf	3,5	;RP0=0, select bank0
  2250     0542  082E               	movf	?_rand+1,w
  2251     0543  00B7               	movwf	___awmod@dividend+1
  2252     0544  082D               	movf	?_rand,w
  2253     0545  00B6               	movwf	___awmod@dividend
  2254     0546  2384               	fcall	___awmod
  2255     0547  1283               	bcf	3,5	;RP0=0, select bank0
  2256     0548  083A               	movf	generateRandom@min,w
  2257     0549  0734               	addwf	?___awmod,w
  2258     054A  00C0               	movwf	generateRandom@randomNumber
  2259     054B  083B               	movf	generateRandom@min+1,w
  2260     054C  1803               	skipnc
  2261     054D  0A3B               	incf	generateRandom@min+1,w
  2262     054E  0735               	addwf	?___awmod+1,w
  2263     054F  00C1               	movwf	generateRandom@randomNumber+1
  2264     0550                     l1711:
  2265                           
  2266                           ;main.c: 233: return randomNumber;
  2267     0550  0841               	movf	generateRandom@randomNumber+1,w
  2268     0551  00BB               	movwf	?_generateRandom+1
  2269     0552  0840               	movf	generateRandom@randomNumber,w
  2270     0553  00BA               	movwf	?_generateRandom
  2271     0554                     l121:
  2272     0554  0008               	return
  2273     0555                     __end_of_generateRandom:
  2274                           
  2275                           	psect	text11
  2276     03DE                     __ptext11:	
  2277 ;; *************** function _rand *****************
  2278 ;; Defined at:
  2279 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\rand.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  2   13[BANK0 ] int 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, pclath, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1
  2293 ;;      Params:         0       2       0
  2294 ;;      Locals:         0       0       0
  2295 ;;      Temps:          0       5       0
  2296 ;;      Totals:         0       7       0
  2297 ;;Total ram usage:        7 bytes
  2298 ;; Hardware stack levels used: 1
  2299 ;; Hardware stack levels required when called: 3
  2300 ;; This function calls:
  2301 ;;		___lmul
  2302 ;; This function is called by:
  2303 ;;		_generateRandom
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307     03DE                     _rand:	
  2308                           ;psect for function _rand
  2309                           
  2310     03DE                     l1661:	
  2311                           ;incstack = 0
  2312                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2313                           
  2314     03DE  1683               	bsf	3,5	;RP0=1, select bank1
  2315     03DF  0827               	movf	(_randx+3)^(0+128),w
  2316     03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2317     03E1  00A3               	movwf	___lmul@multiplier+3
  2318     03E2  1683               	bsf	3,5	;RP0=1, select bank1
  2319     03E3  0826               	movf	(_randx+2)^(0+128),w
  2320     03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2321     03E5  00A2               	movwf	___lmul@multiplier+2
  2322     03E6  1683               	bsf	3,5	;RP0=1, select bank1
  2323     03E7  0825               	movf	(_randx+1)^(0+128),w
  2324     03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2325     03E9  00A1               	movwf	___lmul@multiplier+1
  2326     03EA  1683               	bsf	3,5	;RP0=1, select bank1
  2327     03EB  0824               	movf	_randx^(0+128),w
  2328     03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2329     03ED  00A0               	movwf	___lmul@multiplier
  2330     03EE  3041               	movlw	65
  2331     03EF  00A7               	movwf	___lmul@multiplicand+3
  2332     03F0  30C6               	movlw	198
  2333     03F1  00A6               	movwf	___lmul@multiplicand+2
  2334     03F2  304E               	movlw	78
  2335     03F3  00A5               	movwf	___lmul@multiplicand+1
  2336     03F4  306D               	movlw	109
  2337     03F5  00A4               	movwf	___lmul@multiplicand
  2338     03F6  247C               	fcall	___lmul
  2339     03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2340     03F8  0823               	movf	?___lmul+3,w
  2341     03F9  1683               	bsf	3,5	;RP0=1, select bank1
  2342     03FA  00A7               	movwf	(_randx+3)^(0+128)
  2343     03FB  1283               	bcf	3,5	;RP0=0, select bank0
  2344     03FC  0822               	movf	?___lmul+2,w
  2345     03FD  1683               	bsf	3,5	;RP0=1, select bank1
  2346     03FE  00A6               	movwf	(_randx+2)^(0+128)
  2347     03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2348     0400  0821               	movf	?___lmul+1,w
  2349     0401  1683               	bsf	3,5	;RP0=1, select bank1
  2350     0402  00A5               	movwf	(_randx+1)^(0+128)
  2351     0403  1283               	bcf	3,5	;RP0=0, select bank0
  2352     0404  0820               	movf	?___lmul,w
  2353     0405  1683               	bsf	3,5	;RP0=1, select bank1
  2354     0406  00A4               	movwf	_randx^(0+128)
  2355     0407                     l1663:
  2356     0407  3039               	movlw	57
  2357     0408  07A4               	addwf	_randx^(0+128),f
  2358     0409  3030               	movlw	48
  2359     040A  1803               	skipnc
  2360     040B  3031               	movlw	49
  2361     040C  07A5               	addwf	(_randx+1)^(0+128),f
  2362     040D  3000               	movlw	0
  2363     040E  1803               	skipnc
  2364     040F  3001               	movlw	1
  2365     0410  07A6               	addwf	(_randx+2)^(0+128),f
  2366     0411  3000               	movlw	0
  2367     0412  1803               	skipnc
  2368     0413  3001               	movlw	1
  2369     0414  07A7               	addwf	(_randx+3)^(0+128),f
  2370     0415                     l1665:
  2371     0415  0824               	movf	_randx^(0+128),w
  2372     0416  1283               	bcf	3,5	;RP0=0, select bank0
  2373     0417  00AF               	movwf	??_rand
  2374     0418  1683               	bsf	3,5	;RP0=1, select bank1
  2375     0419  0825               	movf	(_randx+1)^(0+128),w
  2376     041A  1283               	bcf	3,5	;RP0=0, select bank0
  2377     041B  00B0               	movwf	??_rand+1
  2378     041C  1683               	bsf	3,5	;RP0=1, select bank1
  2379     041D  0826               	movf	(_randx+2)^(0+128),w
  2380     041E  1283               	bcf	3,5	;RP0=0, select bank0
  2381     041F  00B1               	movwf	??_rand+2
  2382     0420  1683               	bsf	3,5	;RP0=1, select bank1
  2383     0421  0827               	movf	(_randx+3)^(0+128),w
  2384     0422  1283               	bcf	3,5	;RP0=0, select bank0
  2385     0423  00B2               	movwf	??_rand+3
  2386     0424  3010               	movlw	16
  2387     0425  00B3               	movwf	??_rand+4
  2388     0426                     u1205:
  2389     0426  0D32               	rlf	??_rand+3,w
  2390     0427  0CB2               	rrf	??_rand+3,f
  2391     0428  0CB1               	rrf	??_rand+2,f
  2392     0429  0CB0               	rrf	??_rand+1,f
  2393     042A  0CAF               	rrf	??_rand,f
  2394     042B                     u1200:
  2395     042B  0BB3               	decfsz	??_rand+4,f
  2396     042C  2C26               	goto	u1205
  2397     042D  30FF               	movlw	255
  2398     042E  052F               	andwf	??_rand,w
  2399     042F  00AD               	movwf	?_rand
  2400     0430  307F               	movlw	127
  2401     0431  0530               	andwf	??_rand+1,w
  2402     0432  00AE               	movwf	?_rand+1
  2403     0433                     l709:
  2404     0433  0008               	return
  2405     0434                     __end_of_rand:
  2406                           
  2407                           	psect	text12
  2408     047C                     __ptext12:	
  2409 ;; *************** function ___lmul *****************
  2410 ;; Defined at:
  2411 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\Umul32.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2414 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  product         4    9[BANK0 ] unsigned long 
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  4    0[BANK0 ] unsigned long 
  2419 ;; Registers used:
  2420 ;;		wreg, status,2, status,0
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMMON   BANK0   BANK1
  2426 ;;      Params:         0       8       0
  2427 ;;      Locals:         0       4       0
  2428 ;;      Temps:          0       1       0
  2429 ;;      Totals:         0      13       0
  2430 ;;Total ram usage:       13 bytes
  2431 ;; Hardware stack levels used: 1
  2432 ;; Hardware stack levels required when called: 2
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		_rand
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440     047C                     ___lmul:	
  2441                           ;psect for function ___lmul
  2442                           
  2443     047C                     l1647:	
  2444                           ;incstack = 0
  2445                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2446                           
  2447     047C  3000               	movlw	0
  2448     047D  1283               	bcf	3,5	;RP0=0, select bank0
  2449     047E  00AC               	movwf	___lmul@product+3
  2450     047F  3000               	movlw	0
  2451     0480  00AB               	movwf	___lmul@product+2
  2452     0481  3000               	movlw	0
  2453     0482  00AA               	movwf	___lmul@product+1
  2454     0483  3000               	movlw	0
  2455     0484  00A9               	movwf	___lmul@product
  2456     0485                     l1649:
  2457     0485  1C20               	btfss	___lmul@multiplier,0
  2458     0486  2C88               	goto	u1151
  2459     0487  2C89               	goto	u1150
  2460     0488                     u1151:
  2461     0488  2CA0               	goto	l1653
  2462     0489                     u1150:
  2463     0489                     l1651:
  2464     0489  0824               	movf	___lmul@multiplicand,w
  2465     048A  07A9               	addwf	___lmul@product,f
  2466     048B  0825               	movf	___lmul@multiplicand+1,w
  2467     048C  1103               	clrz
  2468     048D  1803               	skipnc
  2469     048E  3E01               	addlw	1
  2470     048F  1903               	skipnz
  2471     0490  2C92               	goto	u1161
  2472     0491  07AA               	addwf	___lmul@product+1,f
  2473     0492                     u1161:
  2474     0492  0826               	movf	___lmul@multiplicand+2,w
  2475     0493  1103               	clrz
  2476     0494  1803               	skipnc
  2477     0495  3E01               	addlw	1
  2478     0496  1903               	skipnz
  2479     0497  2C99               	goto	u1162
  2480     0498  07AB               	addwf	___lmul@product+2,f
  2481     0499                     u1162:
  2482     0499  0827               	movf	___lmul@multiplicand+3,w
  2483     049A  1103               	clrz
  2484     049B  1803               	skipnc
  2485     049C  3E01               	addlw	1
  2486     049D  1903               	skipnz
  2487     049E  2CA0               	goto	u1163
  2488     049F  07AC               	addwf	___lmul@product+3,f
  2489     04A0                     u1163:
  2490     04A0                     l1653:
  2491     04A0  3001               	movlw	1
  2492     04A1  00A8               	movwf	??___lmul
  2493     04A2                     u1175:
  2494     04A2  1003               	clrc
  2495     04A3  0DA4               	rlf	___lmul@multiplicand,f
  2496     04A4  0DA5               	rlf	___lmul@multiplicand+1,f
  2497     04A5  0DA6               	rlf	___lmul@multiplicand+2,f
  2498     04A6  0DA7               	rlf	___lmul@multiplicand+3,f
  2499     04A7  0BA8               	decfsz	??___lmul,f
  2500     04A8  2CA2               	goto	u1175
  2501     04A9                     l1655:
  2502     04A9  3001               	movlw	1
  2503     04AA                     u1185:
  2504     04AA  1003               	clrc
  2505     04AB  0CA3               	rrf	___lmul@multiplier+3,f
  2506     04AC  0CA2               	rrf	___lmul@multiplier+2,f
  2507     04AD  0CA1               	rrf	___lmul@multiplier+1,f
  2508     04AE  0CA0               	rrf	___lmul@multiplier,f
  2509     04AF  3EFF               	addlw	-1
  2510     04B0  1D03               	skipz
  2511     04B1  2CAA               	goto	u1185
  2512     04B2  0823               	movf	___lmul@multiplier+3,w
  2513     04B3  0422               	iorwf	___lmul@multiplier+2,w
  2514     04B4  0421               	iorwf	___lmul@multiplier+1,w
  2515     04B5  0420               	iorwf	___lmul@multiplier,w
  2516     04B6  1D03               	skipz
  2517     04B7  2CB9               	goto	u1191
  2518     04B8  2CBA               	goto	u1190
  2519     04B9                     u1191:
  2520     04B9  2C85               	goto	l1649
  2521     04BA                     u1190:
  2522     04BA                     l1657:
  2523     04BA  082C               	movf	___lmul@product+3,w
  2524     04BB  00A3               	movwf	?___lmul+3
  2525     04BC  082B               	movf	___lmul@product+2,w
  2526     04BD  00A2               	movwf	?___lmul+2
  2527     04BE  082A               	movf	___lmul@product+1,w
  2528     04BF  00A1               	movwf	?___lmul+1
  2529     04C0  0829               	movf	___lmul@product,w
  2530     04C1  00A0               	movwf	?___lmul
  2531     04C2                     l267:
  2532     04C2  0008               	return
  2533     04C3                     __end_of___lmul:
  2534                           
  2535                           	psect	text13
  2536     0384                     __ptext13:	
  2537 ;; *************** function ___awmod *****************
  2538 ;; Defined at:
  2539 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\awmod.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  divisor         2   20[BANK0 ] int 
  2542 ;;  dividend        2   22[BANK0 ] int 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  sign            1   25[BANK0 ] unsigned char 
  2545 ;;  counter         1   24[BANK0 ] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  2   20[BANK0 ] int 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, btemp+1
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMMON   BANK0   BANK1
  2555 ;;      Params:         0       4       0
  2556 ;;      Locals:         0       2       0
  2557 ;;      Temps:          0       0       0
  2558 ;;      Totals:         0       6       0
  2559 ;;Total ram usage:        6 bytes
  2560 ;; Hardware stack levels used: 1
  2561 ;; Hardware stack levels required when called: 2
  2562 ;; This function calls:
  2563 ;;		Nothing
  2564 ;; This function is called by:
  2565 ;;		_generateRandom
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569     0384                     ___awmod:	
  2570                           ;psect for function ___awmod
  2571                           
  2572     0384                     l1669:	
  2573                           ;incstack = 0
  2574                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2575                           
  2576     0384  1283               	bcf	3,5	;RP0=0, select bank0
  2577     0385  01B9               	clrf	___awmod@sign
  2578     0386                     l1671:
  2579     0386  1FB7               	btfss	___awmod@dividend+1,7
  2580     0387  2B89               	goto	u1211
  2581     0388  2B8A               	goto	u1210
  2582     0389                     u1211:
  2583     0389  2B91               	goto	l1677
  2584     038A                     u1210:
  2585     038A                     l1673:
  2586     038A  09B6               	comf	___awmod@dividend,f
  2587     038B  09B7               	comf	___awmod@dividend+1,f
  2588     038C  0AB6               	incf	___awmod@dividend,f
  2589     038D  1903               	skipnz
  2590     038E  0AB7               	incf	___awmod@dividend+1,f
  2591     038F                     l1675:
  2592     038F  01B9               	clrf	___awmod@sign
  2593     0390  0AB9               	incf	___awmod@sign,f
  2594     0391                     l1677:
  2595     0391  1FB5               	btfss	___awmod@divisor+1,7
  2596     0392  2B94               	goto	u1221
  2597     0393  2B95               	goto	u1220
  2598     0394                     u1221:
  2599     0394  2B9A               	goto	l1681
  2600     0395                     u1220:
  2601     0395                     l1679:
  2602     0395  09B4               	comf	___awmod@divisor,f
  2603     0396  09B5               	comf	___awmod@divisor+1,f
  2604     0397  0AB4               	incf	___awmod@divisor,f
  2605     0398  1903               	skipnz
  2606     0399  0AB5               	incf	___awmod@divisor+1,f
  2607     039A                     l1681:
  2608     039A  0834               	movf	___awmod@divisor,w
  2609     039B  0435               	iorwf	___awmod@divisor+1,w
  2610     039C  1903               	btfsc	3,2
  2611     039D  2B9F               	goto	u1231
  2612     039E  2BA0               	goto	u1230
  2613     039F                     u1231:
  2614     039F  2BCF               	goto	l1699
  2615     03A0                     u1230:
  2616     03A0                     l1683:
  2617     03A0  01B8               	clrf	___awmod@counter
  2618     03A1  0AB8               	incf	___awmod@counter,f
  2619     03A2  2BAE               	goto	l1689
  2620     03A3                     l1685:
  2621     03A3  3001               	movlw	1
  2622     03A4                     u1245:
  2623     03A4  1003               	clrc
  2624     03A5  0DB4               	rlf	___awmod@divisor,f
  2625     03A6  0DB5               	rlf	___awmod@divisor+1,f
  2626     03A7  3EFF               	addlw	-1
  2627     03A8  1D03               	skipz
  2628     03A9  2BA4               	goto	u1245
  2629     03AA                     l1687:
  2630     03AA  3001               	movlw	1
  2631     03AB  00FF               	movwf	btemp+1
  2632     03AC  087F               	movf	btemp+1,w
  2633     03AD  07B8               	addwf	___awmod@counter,f
  2634     03AE                     l1689:
  2635     03AE  1FB5               	btfss	___awmod@divisor+1,7
  2636     03AF  2BB1               	goto	u1251
  2637     03B0  2BB2               	goto	u1250
  2638     03B1                     u1251:
  2639     03B1  2BA3               	goto	l1685
  2640     03B2                     u1250:
  2641     03B2                     l1691:
  2642     03B2  0835               	movf	___awmod@divisor+1,w
  2643     03B3  0237               	subwf	___awmod@dividend+1,w
  2644     03B4  1D03               	skipz
  2645     03B5  2BB8               	goto	u1265
  2646     03B6  0834               	movf	___awmod@divisor,w
  2647     03B7  0236               	subwf	___awmod@dividend,w
  2648     03B8                     u1265:
  2649     03B8  1C03               	skipc
  2650     03B9  2BBB               	goto	u1261
  2651     03BA  2BBC               	goto	u1260
  2652     03BB                     u1261:
  2653     03BB  2BC2               	goto	l1695
  2654     03BC                     u1260:
  2655     03BC                     l1693:
  2656     03BC  0834               	movf	___awmod@divisor,w
  2657     03BD  02B6               	subwf	___awmod@dividend,f
  2658     03BE  0835               	movf	___awmod@divisor+1,w
  2659     03BF  1C03               	skipc
  2660     03C0  03B7               	decf	___awmod@dividend+1,f
  2661     03C1  02B7               	subwf	___awmod@dividend+1,f
  2662     03C2                     l1695:
  2663     03C2  3001               	movlw	1
  2664     03C3                     u1275:
  2665     03C3  1003               	clrc
  2666     03C4  0CB5               	rrf	___awmod@divisor+1,f
  2667     03C5  0CB4               	rrf	___awmod@divisor,f
  2668     03C6  3EFF               	addlw	-1
  2669     03C7  1D03               	skipz
  2670     03C8  2BC3               	goto	u1275
  2671     03C9                     l1697:
  2672     03C9  3001               	movlw	1
  2673     03CA  02B8               	subwf	___awmod@counter,f
  2674     03CB  1D03               	btfss	3,2
  2675     03CC  2BCE               	goto	u1281
  2676     03CD  2BCF               	goto	u1280
  2677     03CE                     u1281:
  2678     03CE  2BB2               	goto	l1691
  2679     03CF                     u1280:
  2680     03CF                     l1699:
  2681     03CF  0839               	movf	___awmod@sign,w
  2682     03D0  1903               	btfsc	3,2
  2683     03D1  2BD3               	goto	u1291
  2684     03D2  2BD4               	goto	u1290
  2685     03D3                     u1291:
  2686     03D3  2BD9               	goto	l1703
  2687     03D4                     u1290:
  2688     03D4                     l1701:
  2689     03D4  09B6               	comf	___awmod@dividend,f
  2690     03D5  09B7               	comf	___awmod@dividend+1,f
  2691     03D6  0AB6               	incf	___awmod@dividend,f
  2692     03D7  1903               	skipnz
  2693     03D8  0AB7               	incf	___awmod@dividend+1,f
  2694     03D9                     l1703:
  2695     03D9  0837               	movf	___awmod@dividend+1,w
  2696     03DA  00B5               	movwf	?___awmod+1
  2697     03DB  0836               	movf	___awmod@dividend,w
  2698     03DC  00B4               	movwf	?___awmod
  2699     03DD                     l419:
  2700     03DD  0008               	return
  2701     03DE                     __end_of___awmod:
  2702                           
  2703                           	psect	text14
  2704     031C                     __ptext14:	
  2705 ;; *************** function ___awdiv *****************
  2706 ;; Defined at:
  2707 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\awdiv.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  divisor         2    6[BANK0 ] int 
  2710 ;;  dividend        2    8[BANK0 ] int 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  quotient        2   12[BANK0 ] int 
  2713 ;;  sign            1   11[BANK0 ] unsigned char 
  2714 ;;  counter         1   10[BANK0 ] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  2    6[BANK0 ] int 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0, btemp+1
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1
  2724 ;;      Params:         0       4       0
  2725 ;;      Locals:         0       4       0
  2726 ;;      Temps:          0       0       0
  2727 ;;      Totals:         0       8       0
  2728 ;;Total ram usage:        8 bytes
  2729 ;; Hardware stack levels used: 1
  2730 ;; Hardware stack levels required when called: 2
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_convertAngle
  2735 ;;		_calculateSpeedIncrement
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739     031C                     ___awdiv:	
  2740                           ;psect for function ___awdiv
  2741                           
  2742     031C                     l1729:	
  2743                           ;incstack = 0
  2744                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  2745                           
  2746     031C  1283               	bcf	3,5	;RP0=0, select bank0
  2747     031D  01AB               	clrf	___awdiv@sign
  2748     031E                     l1731:
  2749     031E  1FA7               	btfss	___awdiv@divisor+1,7
  2750     031F  2B21               	goto	u1341
  2751     0320  2B22               	goto	u1340
  2752     0321                     u1341:
  2753     0321  2B29               	goto	l1737
  2754     0322                     u1340:
  2755     0322                     l1733:
  2756     0322  09A6               	comf	___awdiv@divisor,f
  2757     0323  09A7               	comf	___awdiv@divisor+1,f
  2758     0324  0AA6               	incf	___awdiv@divisor,f
  2759     0325  1903               	skipnz
  2760     0326  0AA7               	incf	___awdiv@divisor+1,f
  2761     0327                     l1735:
  2762     0327  01AB               	clrf	___awdiv@sign
  2763     0328  0AAB               	incf	___awdiv@sign,f
  2764     0329                     l1737:
  2765     0329  1FA9               	btfss	___awdiv@dividend+1,7
  2766     032A  2B2C               	goto	u1351
  2767     032B  2B2D               	goto	u1350
  2768     032C                     u1351:
  2769     032C  2B36               	goto	l1743
  2770     032D                     u1350:
  2771     032D                     l1739:
  2772     032D  09A8               	comf	___awdiv@dividend,f
  2773     032E  09A9               	comf	___awdiv@dividend+1,f
  2774     032F  0AA8               	incf	___awdiv@dividend,f
  2775     0330  1903               	skipnz
  2776     0331  0AA9               	incf	___awdiv@dividend+1,f
  2777     0332                     l1741:
  2778     0332  3001               	movlw	1
  2779     0333  00FF               	movwf	btemp+1
  2780     0334  087F               	movf	btemp+1,w
  2781     0335  06AB               	xorwf	___awdiv@sign,f
  2782     0336                     l1743:
  2783     0336  01AC               	clrf	___awdiv@quotient
  2784     0337  01AD               	clrf	___awdiv@quotient+1
  2785     0338                     l1745:
  2786     0338  0826               	movf	___awdiv@divisor,w
  2787     0339  0427               	iorwf	___awdiv@divisor+1,w
  2788     033A  1903               	btfsc	3,2
  2789     033B  2B3D               	goto	u1361
  2790     033C  2B3E               	goto	u1360
  2791     033D                     u1361:
  2792     033D  2B75               	goto	l1765
  2793     033E                     u1360:
  2794     033E                     l1747:
  2795     033E  01AA               	clrf	___awdiv@counter
  2796     033F  0AAA               	incf	___awdiv@counter,f
  2797     0340  2B4C               	goto	l1753
  2798     0341                     l1749:
  2799     0341  3001               	movlw	1
  2800     0342                     u1375:
  2801     0342  1003               	clrc
  2802     0343  0DA6               	rlf	___awdiv@divisor,f
  2803     0344  0DA7               	rlf	___awdiv@divisor+1,f
  2804     0345  3EFF               	addlw	-1
  2805     0346  1D03               	skipz
  2806     0347  2B42               	goto	u1375
  2807     0348                     l1751:
  2808     0348  3001               	movlw	1
  2809     0349  00FF               	movwf	btemp+1
  2810     034A  087F               	movf	btemp+1,w
  2811     034B  07AA               	addwf	___awdiv@counter,f
  2812     034C                     l1753:
  2813     034C  1FA7               	btfss	___awdiv@divisor+1,7
  2814     034D  2B4F               	goto	u1381
  2815     034E  2B50               	goto	u1380
  2816     034F                     u1381:
  2817     034F  2B41               	goto	l1749
  2818     0350                     u1380:
  2819     0350                     l1755:
  2820     0350  3001               	movlw	1
  2821     0351                     u1395:
  2822     0351  1003               	clrc
  2823     0352  0DAC               	rlf	___awdiv@quotient,f
  2824     0353  0DAD               	rlf	___awdiv@quotient+1,f
  2825     0354  3EFF               	addlw	-1
  2826     0355  1D03               	skipz
  2827     0356  2B51               	goto	u1395
  2828     0357  0827               	movf	___awdiv@divisor+1,w
  2829     0358  0229               	subwf	___awdiv@dividend+1,w
  2830     0359  1D03               	skipz
  2831     035A  2B5D               	goto	u1405
  2832     035B  0826               	movf	___awdiv@divisor,w
  2833     035C  0228               	subwf	___awdiv@dividend,w
  2834     035D                     u1405:
  2835     035D  1C03               	skipc
  2836     035E  2B60               	goto	u1401
  2837     035F  2B61               	goto	u1400
  2838     0360                     u1401:
  2839     0360  2B68               	goto	l1761
  2840     0361                     u1400:
  2841     0361                     l1757:
  2842     0361  0826               	movf	___awdiv@divisor,w
  2843     0362  02A8               	subwf	___awdiv@dividend,f
  2844     0363  0827               	movf	___awdiv@divisor+1,w
  2845     0364  1C03               	skipc
  2846     0365  03A9               	decf	___awdiv@dividend+1,f
  2847     0366  02A9               	subwf	___awdiv@dividend+1,f
  2848     0367                     l1759:
  2849     0367  142C               	bsf	___awdiv@quotient,0
  2850     0368                     l1761:
  2851     0368  3001               	movlw	1
  2852     0369                     u1415:
  2853     0369  1003               	clrc
  2854     036A  0CA7               	rrf	___awdiv@divisor+1,f
  2855     036B  0CA6               	rrf	___awdiv@divisor,f
  2856     036C  3EFF               	addlw	-1
  2857     036D  1D03               	skipz
  2858     036E  2B69               	goto	u1415
  2859     036F                     l1763:
  2860     036F  3001               	movlw	1
  2861     0370  02AA               	subwf	___awdiv@counter,f
  2862     0371  1D03               	btfss	3,2
  2863     0372  2B74               	goto	u1421
  2864     0373  2B75               	goto	u1420
  2865     0374                     u1421:
  2866     0374  2B50               	goto	l1755
  2867     0375                     u1420:
  2868     0375                     l1765:
  2869     0375  082B               	movf	___awdiv@sign,w
  2870     0376  1903               	btfsc	3,2
  2871     0377  2B79               	goto	u1431
  2872     0378  2B7A               	goto	u1430
  2873     0379                     u1431:
  2874     0379  2B7F               	goto	l1769
  2875     037A                     u1430:
  2876     037A                     l1767:
  2877     037A  09AC               	comf	___awdiv@quotient,f
  2878     037B  09AD               	comf	___awdiv@quotient+1,f
  2879     037C  0AAC               	incf	___awdiv@quotient,f
  2880     037D  1903               	skipnz
  2881     037E  0AAD               	incf	___awdiv@quotient+1,f
  2882     037F                     l1769:
  2883     037F  082D               	movf	___awdiv@quotient+1,w
  2884     0380  00A7               	movwf	?___awdiv+1
  2885     0381  082C               	movf	___awdiv@quotient,w
  2886     0382  00A6               	movwf	?___awdiv
  2887     0383                     l406:
  2888     0383  0008               	return
  2889     0384                     __end_of___awdiv:
  2890                           
  2891                           	psect	text15
  2892     0434                     __ptext15:	
  2893 ;; *************** function _myISR *****************
  2894 ;; Defined at:
  2895 ;;		line 81 in file "main.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1
  2909 ;;      Params:         0       0       0
  2910 ;;      Locals:         0       0       0
  2911 ;;      Temps:          4       0       0
  2912 ;;      Totals:         4       0       0
  2913 ;;Total ram usage:        4 bytes
  2914 ;; Hardware stack levels used: 1
  2915 ;; Hardware stack levels required when called: 1
  2916 ;; This function calls:
  2917 ;;		_timer1InterruptHandler
  2918 ;; This function is called by:
  2919 ;;		Interrupt level 1
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923     0434                     _myISR:	
  2924                           ;psect for function _myISR
  2925                           
  2926     0434                     i1l1553:
  2927                           
  2928                           ;main.c: 82: if (INTCONbits.TMR0IF) {
  2929     0434  1D0B               	btfss	11,2	;volatile
  2930     0435  2C37               	goto	u107_21
  2931     0436  2C38               	goto	u107_20
  2932     0437                     u107_21:
  2933     0437  2C60               	goto	i1l87
  2934     0438                     u107_20:
  2935     0438                     i1l1555:
  2936                           
  2937                           ;main.c: 83: INTCONbits.TMR0IF = 0;
  2938     0438  110B               	bcf	11,2	;volatile
  2939     0439                     i1l1557:
  2940                           
  2941                           ;main.c: 84: TMR0 = 178;
  2942     0439  30B2               	movlw	178
  2943     043A  1283               	bcf	3,5	;RP0=0, select bank0
  2944     043B  0081               	movwf	1	;volatile
  2945                           
  2946                           ;main.c: 85: overflow_count++;
  2947     043C  3001               	movlw	1
  2948     043D  07DD               	addwf	_overflow_count,f	;volatile
  2949     043E  1803               	skipnc
  2950     043F  0ADE               	incf	_overflow_count+1,f	;volatile
  2951     0440  3000               	movlw	0
  2952     0441  07DE               	addwf	_overflow_count+1,f	;volatile
  2953                           
  2954                           ;main.c: 87: if (overflow_count >= 5) {
  2955     0442  3000               	movlw	0
  2956     0443  025E               	subwf	_overflow_count+1,w	;volatile
  2957     0444  3005               	movlw	5
  2958     0445  1903               	skipnz
  2959     0446  025D               	subwf	_overflow_count,w	;volatile
  2960     0447  1C03               	skipc
  2961     0448  2C4A               	goto	u108_21
  2962     0449  2C4B               	goto	u108_20
  2963     044A                     u108_21:
  2964     044A  2C4F               	goto	i1l1563
  2965     044B                     u108_20:
  2966     044B                     i1l1559:
  2967                           
  2968                           ;main.c: 88: overflow_count = 0;
  2969     044B  01DD               	clrf	_overflow_count	;volatile
  2970     044C  01DE               	clrf	_overflow_count+1	;volatile
  2971     044D                     i1l1561:
  2972                           
  2973                           ;main.c: 89: mustCheckServos = 1;
  2974     044D  01F5               	clrf	_mustCheckServos
  2975     044E  0AF5               	incf	_mustCheckServos,f
  2976     044F                     i1l1563:
  2977                           
  2978                           ;main.c: 90: };main.c: 91: contador1Seg++;
  2979     044F  3001               	movlw	1
  2980     0450  00FF               	movwf	btemp+1
  2981     0451  087F               	movf	btemp+1,w
  2982     0452  07F2               	addwf	_contador1Seg,f
  2983     0453                     i1l1565:
  2984                           
  2985                           ;main.c: 92: if(contador1Seg>= 100){
  2986     0453  3064               	movlw	100
  2987     0454  0272               	subwf	_contador1Seg,w
  2988     0455  1C03               	skipc
  2989     0456  2C58               	goto	u109_21
  2990     0457  2C59               	goto	u109_20
  2991     0458                     u109_21:
  2992     0458  2C60               	goto	i1l87
  2993     0459                     u109_20:
  2994     0459                     i1l1567:
  2995                           
  2996                           ;main.c: 93: contador1Seg = 0;
  2997     0459  01F2               	clrf	_contador1Seg
  2998     045A                     i1l1569:
  2999                           
  3000                           ;main.c: 94: contadorTimeShutOff++;
  3001     045A  3001               	movlw	1
  3002     045B  07DF               	addwf	_contadorTimeShutOff,f
  3003     045C  1803               	skipnc
  3004     045D  0AE0               	incf	_contadorTimeShutOff+1,f
  3005     045E  3000               	movlw	0
  3006     045F  07E0               	addwf	_contadorTimeShutOff+1,f
  3007     0460                     i1l87:
  3008                           
  3009                           ;main.c: 97: };main.c: 98: };main.c: 100: };main.c: 102: if (PIR1bits.TMR1IF) {
  3010     0460  1283               	bcf	3,5	;RP0=0, select bank0
  3011     0461  1C0C               	btfss	12,0	;volatile
  3012     0462  2C64               	goto	u110_21
  3013     0463  2C65               	goto	u110_20
  3014     0464                     u110_21:
  3015     0464  2C67               	goto	i1l1577
  3016     0465                     u110_20:
  3017     0465                     i1l1573:
  3018                           
  3019                           ;main.c: 103: PIR1bits.TMR1IF = 0;
  3020     0465  100C               	bcf	12,0	;volatile
  3021     0466                     i1l1575:
  3022                           
  3023                           ;main.c: 104: timer1InterruptHandler();
  3024     0466  22B3               	fcall	_timer1InterruptHandler
  3025     0467                     i1l1577:
  3026                           
  3027                           ;main.c: 105: };main.c: 107: if (PIR1bits.TMR2IF) {
  3028     0467  1283               	bcf	3,5	;RP0=0, select bank0
  3029     0468  1C8C               	btfss	12,1	;volatile
  3030     0469  2C6B               	goto	u111_21
  3031     046A  2C6C               	goto	u111_20
  3032     046B                     u111_21:
  3033     046B  2C71               	goto	i1l93
  3034     046C                     u111_20:
  3035     046C                     i1l1579:
  3036                           
  3037                           ;main.c: 108: TMR2ON = 0;
  3038     046C  1112               	bcf	18,2	;volatile
  3039                           
  3040                           ;main.c: 110: PIR1bits.TMR2IF = 0;
  3041     046D  108C               	bcf	12,1	;volatile
  3042     046E                     i1l1581:
  3043                           
  3044                           ;main.c: 112: GPIO = GPIO & 0b11001111;
  3045     046E  0805               	movf	5,w	;volatile
  3046     046F  39CF               	andlw	207
  3047     0470  0085               	movwf	5	;volatile
  3048     0471                     i1l93:
  3049     0471  087A               	movf	??_myISR+3,w
  3050     0472  00FF               	movwf	btemp+1
  3051     0473  0879               	movf	??_myISR+2,w
  3052     0474  008A               	movwf	10
  3053     0475  0878               	movf	??_myISR+1,w
  3054     0476  0084               	movwf	4
  3055     0477  0E77               	swapf	??_myISR,w
  3056     0478  0083               	movwf	3
  3057     0479  0EFE               	swapf	btemp,f
  3058     047A  0E7E               	swapf	btemp,w
  3059     047B  0009               	retfie
  3060     047C                     __end_of_myISR:
  3061                           
  3062                           	psect	intentry
  3063     0004                     __pintentry:	
  3064                           ;incstack = 0
  3065                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3066                           
  3067     0004                     interrupt_function:
  3068     007E                     saved_w	set	btemp
  3069     0004  00FE               	movwf	btemp
  3070     0005  0E03               	swapf	3,w
  3071     0006  00F7               	movwf	??_myISR
  3072     0007  0804               	movf	4,w
  3073     0008  00F8               	movwf	??_myISR+1
  3074     0009  080A               	movf	10,w
  3075     000A  00F9               	movwf	??_myISR+2
  3076     000B  087F               	movf	btemp+1,w
  3077     000C  00FA               	movwf	??_myISR+3
  3078     000D  2C34               	ljmp	_myISR
  3079                           
  3080                           	psect	text16
  3081     02B3                     __ptext16:	
  3082 ;; *************** function _timer1InterruptHandler *****************
  3083 ;; Defined at:
  3084 ;;		line 118 in file "main.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;		None
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;		None
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMMON   BANK0   BANK1
  3098 ;;      Params:         0       0       0
  3099 ;;      Locals:         0       0       0
  3100 ;;      Temps:          1       0       0
  3101 ;;      Totals:         1       0       0
  3102 ;;Total ram usage:        1 bytes
  3103 ;; Hardware stack levels used: 1
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_myISR
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111     02B3                     _timer1InterruptHandler:	
  3112                           ;psect for function _timer1InterruptHandler
  3113                           
  3114     02B3                     i1l1399:	
  3115                           ;incstack = 0
  3116                           ; Regs used in _timer1InterruptHandler: [wreg-fsr0h+status,2+status,0+btemp+1]
  3117                           
  3118                           
  3119                           ;main.c: 119: switch (EstadoRCServo) {
  3120     02B3  2B10               	goto	i1l1447
  3121     02B4                     i1l97:	
  3122                           ;main.c: 120: case 0:
  3123                           
  3124                           
  3125                           ;main.c: 121: TMR1 = 64561;
  3126     02B4  30FC               	movlw	252
  3127     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  3128     02B6  008F               	movwf	15	;volatile
  3129     02B7  3031               	movlw	49
  3130     02B8  008E               	movwf	14	;volatile
  3131                           
  3132                           ;main.c: 122: TMR2ON = 0;
  3133     02B9  1112               	bcf	18,2	;volatile
  3134     02BA                     i1l1401:
  3135                           
  3136                           ;main.c: 123: TMR2 = 0;
  3137     02BA  0191               	clrf	17	;volatile
  3138     02BB                     i1l1403:
  3139                           
  3140                           ;main.c: 124: EstadoRCServo = 1;
  3141     02BB  01F3               	clrf	_EstadoRCServo
  3142     02BC  0AF3               	incf	_EstadoRCServo,f
  3143     02BD                     i1l1405:
  3144                           
  3145                           ;main.c: 125: if (ContadorMotor >= 2) {
  3146     02BD  3002               	movlw	2
  3147     02BE  0271               	subwf	_ContadorMotor,w
  3148     02BF  1C03               	skipc
  3149     02C0  2AC2               	goto	u92_21
  3150     02C1  2AC3               	goto	u92_20
  3151     02C2                     u92_21:
  3152     02C2  2AC9               	goto	i1l1411
  3153     02C3                     u92_20:
  3154     02C3                     i1l1407:
  3155                           
  3156                           ;main.c: 126: ContadorMotor = 0;
  3157     02C3  01F1               	clrf	_ContadorMotor
  3158     02C4                     i1l1409:
  3159                           
  3160                           ;main.c: 127: MaskMotor = 0b00010000;
  3161     02C4  3010               	movlw	16
  3162     02C5  00E4               	movwf	_MaskMotor
  3163                           
  3164                           ;main.c: 128: GPIO = GPIO & 0b11001111;
  3165     02C6  0805               	movf	5,w	;volatile
  3166     02C7  39CF               	andlw	207
  3167     02C8  0085               	movwf	5	;volatile
  3168     02C9                     i1l1411:
  3169                           
  3170                           ;main.c: 129: };main.c: 130: GPIO = (GPIO & 0b11001111) | MaskMotor;
  3171     02C9  0805               	movf	5,w	;volatile
  3172     02CA  39CF               	andlw	207
  3173     02CB  0464               	iorwf	_MaskMotor,w
  3174     02CC  0085               	movwf	5	;volatile
  3175                           
  3176                           ;main.c: 132: break;
  3177     02CD  2B1B               	goto	i1l106
  3178     02CE                     i1l100:	
  3179                           ;main.c: 133: case 1:
  3180                           
  3181                           
  3182                           ;main.c: 134: TMR1 = 61561;
  3183     02CE  30F0               	movlw	240
  3184     02CF  1283               	bcf	3,5	;RP0=0, select bank0
  3185     02D0  008F               	movwf	15	;volatile
  3186     02D1  3079               	movlw	121
  3187     02D2  008E               	movwf	14	;volatile
  3188     02D3                     i1l1413:
  3189                           
  3190                           ;main.c: 135: PR2 = motorRawValueTarget[ContadorMotor];
  3191     02D3  0871               	movf	_ContadorMotor,w
  3192     02D4  3E61               	addlw	(low (_motorRawValueTarget| 0))& (0+255)
  3193     02D5  0084               	movwf	4
  3194     02D6  1383               	bcf	3,7	;select IRP bank0
  3195     02D7  0800               	movf	0,w
  3196     02D8  1683               	bsf	3,5	;RP0=1, select bank1
  3197     02D9  0092               	movwf	18	;volatile
  3198     02DA                     i1l1415:
  3199                           
  3200                           ;main.c: 136: TMR2ON = 1;
  3201     02DA  1283               	bcf	3,5	;RP0=0, select bank0
  3202     02DB  1512               	bsf	18,2	;volatile
  3203     02DC                     i1l1417:
  3204                           
  3205                           ;main.c: 137: EstadoRCServo = 2;
  3206     02DC  3002               	movlw	2
  3207     02DD  00F3               	movwf	_EstadoRCServo
  3208     02DE                     i1l1419:
  3209                           
  3210                           ;main.c: 138: if (PR2 <= 1) {
  3211     02DE  3002               	movlw	2
  3212     02DF  1683               	bsf	3,5	;RP0=1, select bank1
  3213     02E0  0212               	subwf	18,w	;volatile
  3214     02E1  1803               	skipnc
  3215     02E2  2AE4               	goto	u93_21
  3216     02E3  2AE5               	goto	u93_20
  3217     02E4                     u93_21:
  3218     02E4  2B1B               	goto	i1l106
  3219     02E5                     u93_20:
  3220     02E5                     i1l1421:
  3221                           
  3222                           ;main.c: 139: TMR2ON = 0;
  3223     02E5  1283               	bcf	3,5	;RP0=0, select bank0
  3224     02E6  1112               	bcf	18,2	;volatile
  3225     02E7                     i1l1423:
  3226                           
  3227                           ;main.c: 141: GPIO = (GPIO & 0b11001111);
  3228     02E7  1283               	bcf	3,5	;RP0=0, select bank0
  3229     02E8  0805               	movf	5,w	;volatile
  3230     02E9  39CF               	andlw	207
  3231     02EA  0085               	movwf	5	;volatile
  3232     02EB  2B1B               	goto	i1l106
  3233     02EC                     i1l102:	
  3234                           ;main.c: 145: case 2:
  3235                           
  3236                           
  3237                           ;main.c: 146: TMR2IF = 0;
  3238     02EC  1283               	bcf	3,5	;RP0=0, select bank0
  3239     02ED  108C               	bcf	12,1	;volatile
  3240                           
  3241                           ;main.c: 148: TMR2ON = 0;
  3242     02EE  1112               	bcf	18,2	;volatile
  3243     02EF                     i1l1425:
  3244                           
  3245                           ;main.c: 149: EstadoRCServo = 0;
  3246     02EF  01F3               	clrf	_EstadoRCServo
  3247     02F0                     i1l1427:
  3248                           
  3249                           ;main.c: 150: ContadorMotor++;
  3250     02F0  3001               	movlw	1
  3251     02F1  00FF               	movwf	btemp+1
  3252     02F2  087F               	movf	btemp+1,w
  3253     02F3  07F1               	addwf	_ContadorMotor,f
  3254     02F4                     i1l1429:
  3255                           
  3256                           ;main.c: 151: GPIO = GPIO & 0b11001111;
  3257     02F4  0805               	movf	5,w	;volatile
  3258     02F5  39CF               	andlw	207
  3259     02F6  0085               	movwf	5	;volatile
  3260     02F7                     i1l1431:
  3261                           
  3262                           ;main.c: 152: MaskMotor = (uint8_t)(MaskMotor << 1);
  3263     02F7  0864               	movf	_MaskMotor,w
  3264     02F8  00F6               	movwf	??_timer1InterruptHandler
  3265     02F9  0776               	addwf	??_timer1InterruptHandler,w
  3266     02FA  00E4               	movwf	_MaskMotor
  3267     02FB                     i1l1433:
  3268                           
  3269                           ;main.c: 153: if (ContadorMotor >= 2) {
  3270     02FB  3002               	movlw	2
  3271     02FC  0271               	subwf	_ContadorMotor,w
  3272     02FD  1C03               	skipc
  3273     02FE  2B00               	goto	u94_21
  3274     02FF  2B01               	goto	u94_20
  3275     0300                     u94_21:
  3276     0300  2B09               	goto	i1l103
  3277     0301                     u94_20:
  3278     0301                     i1l1435:
  3279                           
  3280                           ;main.c: 154: ContadorMotor = 0;
  3281     0301  01F1               	clrf	_ContadorMotor
  3282     0302                     i1l1437:
  3283                           
  3284                           ;main.c: 155: MaskMotor = 0b00010000;
  3285     0302  3010               	movlw	16
  3286     0303  00E4               	movwf	_MaskMotor
  3287     0304                     i1l1439:
  3288                           
  3289                           ;main.c: 156: TMR1 = 37535;
  3290     0304  3092               	movlw	146
  3291     0305  008F               	movwf	15	;volatile
  3292     0306  309F               	movlw	159
  3293     0307  008E               	movwf	14	;volatile
  3294                           
  3295                           ;main.c: 157: } else {
  3296     0308  2B1B               	goto	i1l106
  3297     0309                     i1l103:
  3298                           
  3299                           ;main.c: 158: TMR1 = 65535;
  3300     0309  30FF               	movlw	255
  3301     030A  008F               	movwf	15	;volatile
  3302     030B  30FF               	movlw	255
  3303     030C  008E               	movwf	14	;volatile
  3304     030D  2B1B               	goto	i1l106
  3305     030E                     i1l1441:
  3306                           
  3307                           ;main.c: 164: EstadoRCServo = 0;
  3308     030E  01F3               	clrf	_EstadoRCServo
  3309     030F  2AE7               	goto	i1l1423
  3310     0310                     i1l1447:
  3311     0310  0873               	movf	_EstadoRCServo,w
  3312                           
  3313                           ; Switch size 1, requested type "simple"
  3314                           ; Number of cases is 3, Range of values is 0 to 2
  3315                           ; switch strategies available:
  3316                           ; Name         Instructions Cycles
  3317                           ; direct_byte            9     6 (fixed)
  3318                           ; simple_byte           10     6 (average)
  3319                           ; jumptable            260     6 (fixed)
  3320                           ;	Chosen strategy is simple_byte
  3321     0311  3A00               	xorlw	0	; case 0
  3322     0312  1903               	skipnz
  3323     0313  2AB4               	goto	i1l97
  3324     0314  3A01               	xorlw	1	; case 1
  3325     0315  1903               	skipnz
  3326     0316  2ACE               	goto	i1l100
  3327     0317  3A03               	xorlw	3	; case 2
  3328     0318  1903               	skipnz
  3329     0319  2AEC               	goto	i1l102
  3330     031A  2B0E               	goto	i1l1441
  3331     031B                     i1l106:
  3332     031B  0008               	return
  3333     031C                     __end_of_timer1InterruptHandler:
  3334     007E                     btemp	set	126	;btemp
  3335     007E                     wtemp0	set	126
  3336                           
  3337                           	psect	idloc
  3338                           
  3339                           ;Config register IDLOC0 @ 0x2000
  3340                           ;	unspecified, using default values
  3341     2000                     	org	8192
  3342     2000  3FFF               	dw	16383
  3343                           
  3344                           ;Config register IDLOC1 @ 0x2001
  3345                           ;	unspecified, using default values
  3346     2001                     	org	8193
  3347     2001  3FFF               	dw	16383
  3348                           
  3349                           ;Config register IDLOC2 @ 0x2002
  3350                           ;	unspecified, using default values
  3351     2002                     	org	8194
  3352     2002  3FFF               	dw	16383
  3353                           
  3354                           ;Config register IDLOC3 @ 0x2003
  3355                           ;	unspecified, using default values
  3356     2003                     	org	8195
  3357     2003  3FFF               	dw	16383
  3358                           
  3359                           	psect	config
  3360                           
  3361                           ;Config register CONFIG @ 0x2007
  3362                           ;	Oscillator Selection bits
  3363                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  3364                           ;	Watchdog Timer Enable bit
  3365                           ;	WDTE = OFF, WDT disabled
  3366                           ;	Power-up Timer Enable bit
  3367                           ;	PWRTE = ON, PWRT enabled
  3368                           ;	MCLR Pin Function Select bit
  3369                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  3370                           ;	Code Protection bit
  3371                           ;	CP = OFF, Program memory code protection is disabled
  3372                           ;	Data Code Protection bit
  3373                           ;	CPD = 0x1, unprogrammed default
  3374                           ;	Brown Out Detect
  3375                           ;	BOREN = ON, BOR enabled
  3376                           ;	Internal External Switchover bit
  3377                           ;	IESO = 0x1, unprogrammed default
  3378                           ;	Fail-Safe Clock Monitor Enabled bit
  3379                           ;	FCMEN = 0x1, unprogrammed default
  3380     2007                     	org	8199
  3381     2007  3FC4               	dw	16324

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         28
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      5      10
    BANK0            69     49      69
    BANK1            32      3      11

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    _myISR->_timer1InterruptHandler

Critical Paths under _main in BANK0

    _main->_setTorretPosition
    _setup->_srand
    _setTorretPosition->_calculateSpeedIncrement
    _convertAngle->___awdiv
    _calculateSpeedIncrement->_generateRandom
    _generateRandom->___awmod
    _rand->___lmul
    ___awmod->_rand
    ___awdiv->___wmul

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   11032
                                              0 BANK1      3     3      0
                       _convertAngle
                  _setTorretPosition
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     121
                            _initPWM
                        _setupTimer0
                        _setupTimer1
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _setupTimer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTorretPosition                                    1     1      0    8307
                                             48 BANK0      1     1      0
            _calculateSpeedIncrement
                       _convertAngle
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _convertAngle                                         4     2      2    2604
                                             14 BANK0      4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _calculateSpeedIncrement                             14    12      2    3384
                                             34 BANK0     14    12      2
                            ___awdiv
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _generateRandom                                       8     4      4    2319
                                             26 BANK0      8     4      4
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                             13 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     613
                                             20 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     805
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                4     4      0       0
                                              1 COMMON     4     4      0
             _timer1InterruptHandler
 ---------------------------------------------------------------------------------
 (7) _timer1InterruptHandler                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convertAngle
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _setTorretPosition
     _calculateSpeedIncrement
       ___awdiv
       _generateRandom
         ___awmod
           _rand (ARG)
             ___lmul
         _rand
     _convertAngle
     _generateRandom
   _setup
     _initPWM
     _setupTimer0
     _setupTimer1
     _srand

 _myISR (ROOT)
   _timer1InterruptHandler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      3       B       5       34.4%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               45     31      45       4      100.0%
BITBANK0            45      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      5       A       1       76.9%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5A       8        0.0%
ABS                  0      0      5A       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Feb 16 14:09:59 2024

             ??_setTorretPosition 0050                      ___awdiv@sign 002B                                fsr 0004  
             ___wmul@multiplicand 0022                               l112 0598                               l121 0554  
                             l131 02B2                               l115 0583                               l132 02AE  
                             l141 003B                               l109 05A2                               l118 0576  
                             l127 0508                               l253 0516                               l157 017F  
                             l406 0383                               l255 052E                               l419 03DD  
                             l267 04C2                               l706 058E                               l709 0433  
                             _GP2 002A                               _PR2 0092                               fsr0 0004  
                             indf 0000                      ___awmod@sign 0039                              l2001 0223  
                            l2003 0227                              l2005 022E                              l1701 03D4  
                            l1703 03D9                              l1711 0550                              l1721 051D  
                            l1801 0582                              l1731 031E                              l1651 0489  
                            l1707 052F                              l1723 0524                              l1715 0509  
                            l1811 04E5                              l1803 0584                              l1741 0332  
                            l1733 0322                              l1653 04A0                              l1661 03DE  
                            l1709 052F                              l1821 023F                              l1725 052A  
                            l1717 050C                              l1813 04EA                              l1805 04C3  
                            l1901 00B6                              l1751 0348                              l1743 0336  
                            l1735 0327                              l1671 0386                              l1655 04A9  
                            l1647 047C                              l1663 0407                              l1831 0280  
                            l1719 0510                              l1815 0507                              l1807 04D1  
                            l1911 00D9                              l1903 00BD                              l1761 0368  
                            l1753 034C                              l1745 0338                              l1737 0329  
                            l1729 031C                              l1681 039A                              l1673 038A  
                            l1657 04BA                              l1649 0485                              l1665 0415  
                            l1833 02A3                              l1825 0242                              l1809 04D7  
                            l1921 0116                              l1913 00E7                              l1905 00C5  
                            l1841 055B                              l1763 036F                              l1755 0350  
                            l1747 033E                              l1739 032D                              l1691 03B2  
                            l1683 03A0                              l1675 038F                              l1835 02A9  
                            l1827 0253                              l1819 0239                              l1923 0124  
                            l1931 0146                              l1915 00F0                              l1907 00CE  
                            l1851 0563                              l1843 055E                              l1757 0361  
                            l1749 0341                              l1765 0375                              l1693 03BC  
                            l1685 03A3                              l1677 0391                              l1669 0384  
                            l1829 027A                              l1941 0178                              l1933 0154  
                            l1925 0133                              l1917 00FF                              l1909 00D5  
                            l1781 05A1                              l1773 0599                              l1861 056E  
                            l1853 056A                              l1845 055F                              l1767 037A  
                            l1759 0367                              l1695 03C2                              l1687 03AA  
                            l1679 0395                              l1935 0163                              l1927 0137  
                            l1919 010E                              l1791 0577                              l1775 059B  
                            l1783 058F                              l1871 0573                              l1863 056F  
                            l1855 056B                              l1847 0561                              l1839 0555  
                            l1951 018D                              l1943 0180                              l1769 037F  
                            l1697 03C9                              l1689 03AE                              l1937 0167  
                            l1929 013E                              l1881 004E                              l1793 0579  
                            l1777 059C                              l1785 0591                              l1873 0575  
                            l1865 0570                              l1857 056C                              l1849 0562  
                            l1961 01AC                              l1953 0194                              l1945 0181  
                            l1699 03CF                              l1939 016F                              l1891 0086  
                            l1883 005D                              l1875 0027                              l1795 057B  
                            l1779 059E                              l1787 0593                              l1867 0571  
                            l1859 056D                              l1971 01D1                              l1963 01B3  
                            l1955 0195                              l1947 0184                              l1893 008D  
                            l1885 0065                              l1877 002D                              l1797 057E  
                            l1789 0597                              l1869 0572                              l1981 01F2  
                            l1973 01D8                              l1965 01BA                              l1957 01A3  
                            l1949 0186                              l1887 0073                              l1895 0095  
                            l1879 0040                              l1799 0581                              l1991 0215  
                            l1983 01F9                              l1975 01DF                              l1967 01C8  
                            l1959 01A8                              l1897 00A3                              l1889 0082  
                            l1993 021A                              l1985 0200                              l1977 01ED  
                            l1969 01CD                              l1899 00B2                              l1995 021B  
                            l1987 020E                              l1979 01F0         __end_of_setTorretPosition 0180  
                            l1997 021C                              l1989 0210                              l1999 0221  
                            u1200 042B                              u1210 038A                              u1211 0389  
                            u1220 0395                              u1300 0510                              u1221 0394  
                            u1205 0426                              u1301 050F                              u1230 03A0  
                            u1150 0489                              u1231 039F                              u1151 0488  
                            u1400 0361                              u1401 0360                              u1161 0492  
                            u1250 03B2                              u1162 0499                              u1330 052A  
                            u1251 03B1                              u1163 04A0                              u1331 0529  
                            u1315 0517                              u1420 0375                              u1340 0322  
                            u1260 03BC                              u1500 003B                              u1421 0374  
                            u1405 035D                              u1341 0321                              u1261 03BB  
                            u1245 03A4                              u1325 051E                              u1501 003A  
                            u1430 037A                              u1350 032D                              u1190 04BA  
                            u1510 0040                              u1431 0379                              u1415 0369  
                            u1351 032C                              u1191 04B9                              u1175 04A2  
                            u1511 003F                              u1360 033E                              u1280 03CF  
                            u1440 04D1                              u1600 0154                              u1520 004E  
                            u1361 033D                              u1281 03CE                              u1265 03B8  
                            u1185 04AA                              u1441 04D0                              u1601 0153  
                            u1521 004D                              u1505 0037                              u1290 03D4  
                            u1450 04E5                              u1530 0073                              u1610 0215  
                            u1291 03D3                              u1275 03C3                              u1451 04E4  
                            u1531 0072                              u1611 0214                              u1380 0350  
                            u1460 023F                              u1540 00A3                              u1620 021A  
                            u1381 034F                              u1461 023E                              u1445 04CD  
                            u1605 0150                              u1541 00A2                              u1525 004A  
                            u1621 0219                              u1470 0280                              u1550 00D9  
                            u1630 0221                              u1375 0342                              u1471 027F  
                            u1455 04E1                              u1551 00D8                              u1535 006F  
                            u1631 0220                              u1480 02A3                              u1560 00E7  
                            u1481 02A2                              u1561 00E6                              u1545 009F  
                            _GPIO 0005                              u1570 00F0                              u1490 002D  
                            u1395 0351                              u1571 00EF                              u1491 002C  
                            u1580 00FF                              u1485 029F                              u1581 00FE  
                            u1565 00E3                              u1590 0124                              u1591 0123  
                            u1647 019C                              u1585 00FB                              u1657 01C1  
                            u1595 0120                              u1667 01E6                              u1677 0207  
                   _EstadoRCServo 0073                              i1l93 0471                              i1l87 0460  
                            i1l97 02B4                              _TMR0 0001                              _TMR1 000E  
                            _TMR2 0011                              _main 0180                              _rand 03DE  
                            btemp 007E                              start 000E                     ?_convertAngle 002E  
                           ?_main 0076                             ?_rand 002D                   __end_of___awdiv 0384  
                 __end_of___awmod 03DE                             _ANSEL 009F                   ___awdiv@divisor 0026  
                           _T1CON 0010                             _T2CON 0012                             i1l100 02CE  
                           i1l102 02EC                             i1l103 0309                             i1l106 031B  
                 ___awdiv@counter 002A                             u92_20 02C3                             u92_21 02C2  
                           u93_20 02E5                             u93_21 02E4                             u94_20 0301  
                           u94_21 0300               ___lmul@multiplicand 0024                   __end_of_initPWM 0584  
                           _myISR 0434                             _randx 00A4                             _speed 00A0  
                           _setup 0555                             _srand 0584                             pclath 000A  
      generateRandom@randomNumber 0040                             status 0003                             wtemp0 007E  
                  ??_convertAngle 0030                   __initialization 000F          ?_calculateSpeedIncrement 0042  
                    __end_of_main 0237                      __end_of_rand 0434                            ??_main 00A8  
                          ??_rand 002F                  ??_generateRandom 003E          ??_timer1InterruptHandler 0076  
                          ?_myISR 0076                  ___awdiv@dividend 0028                            ?_setup 0076  
                          ?_srand 0020                            u110_20 0465                            u110_21 0464  
                          u111_20 046C                            i1l1401 02BA                            u111_21 046B  
                          i1l1411 02C9                            i1l1403 02BB                            i1l1421 02E5  
                          i1l1413 02D3                            i1l1405 02BD                            i1l1431 02F7  
                          i1l1423 02E7                            i1l1415 02DA                            i1l1407 02C3  
                          i1l1441 030E                            i1l1433 02FB                            i1l1425 02EF  
                          i1l1417 02DC                            i1l1409 02C4                            i1l1435 0301  
                          i1l1427 02F0                            i1l1419 02DE                            i1l1437 0302  
                          i1l1429 02F4                            i1l1439 0304                            i1l1447 0310  
                          i1l1561 044D                            i1l1553 0434                            i1l1563 044F  
                          i1l1555 0438                            i1l1581 046E                            i1l1573 0465  
                          i1l1565 0453                            i1l1557 0439                            i1l1399 02B3  
                          i1l1575 0466                            i1l1567 0459                            i1l1559 044B  
                          i1l1577 0467                            i1l1569 045A                            i1l1579 046C  
                          u107_20 0438                            u107_21 0437                            u108_20 044B  
                          u108_21 044A                            u109_20 0459                            u109_21 0458  
                          _OSCCON 008F                            _TMR2IF 0061                            _TMR2ON 0092  
                          _TRISIO 0085                            ___lmul 047C                            ___wmul 0509  
                       ??___awdiv 002A                         ??___awmod 0038                  ___awdiv@quotient 002C  
                 ___awmod@divisor 0034                   ___awmod@counter 0038                         ??_initPWM 0020  
                          saved_w 007E                            srand@x 0020                      ?_setupTimer0 0076  
                    ?_setupTimer1 0076           __end_of__initialization 0025               _contadorTimeShutOff 005F  
                convertAngle@temp 0030                    __pcstackCOMMON 0076                      __pidataBANK1 05AB  
                   __end_of_myISR 047C                     __end_of_setup 0577                     __end_of_srand 058F  
                  _OPTION_REGbits 0081              __end_of_convertAngle 0509                           ??_myISR 0077  
                         ??_setup 0022                           ??_srand 0022                        __pbssBANK0 0051  
                      __pbssBANK1 00A0                        __pmaintext 0180                           ?___lmul 0020  
                         ?___wmul 0020                        __pintentry 0004                           _CCP1CON 0015  
                  ___lmul@product 0029            _timer1InterruptHandler 02B3                   _mustCheckServos 0075  
                         ___awdiv 031C                           ___awmod 0384                           __ptext1 0555  
                         __ptext2 0584                           __ptext3 058F                           __ptext4 0599  
                         __ptext5 0577                           __ptext6 0027                           __ptext7 04C3  
                         __ptext8 0509                           __ptext9 0237                         _T1CONbits 0010  
                         _initPWM 0577                  ___awmod@dividend 0036                           clrloop0 05A4  
            end_of_initialization 0025                        _motorAngle 0051                      _contador1Seg 0072  
               convertAngle@value 002E                      _convertAngle 04C3                    _motorIncrement 0055  
                  __end_of___lmul 04C3                    __end_of___wmul 052F               start_initialization 000F  
                       _MaskMotor 0064                          ??___lmul 0028                          ??___wmul 0024  
                     __pdataBANK1 00A4           _calculateSpeedIncrement 0237                       __pbssCOMMON 0071  
                       ___latbits 0000                     __pcstackBANK0 0020                     __pcstackBANK1 00A8  
                     _activeMotor 0063           ?_timer1InterruptHandler 0076                         __pnvBANK0 0064  
                        ?___awdiv 0026                          ?___awmod 0034                          ?_initPWM 0076  
  __end_of_timer1InterruptHandler 031C                 interrupt_function 0004                    ___wmul@product 0024  
                        _GPIObits 0005                         clear_ram0 05A3                          _PIE1bits 008C  
               generateRandom@max 003C                 generateRandom@min 003A                          _PIR1bits 000C  
                       _pwmActual 00A2         ??_calculateSpeedIncrement 0044                 ___wmul@multiplier 0020  
                   ??_setupTimer0 0020                     ??_setupTimer1 0020               _motorRawValueTarget 0061  
               ___lmul@multiplier 0020                    _generateRandom 052F            __end_of_generateRandom 0555  
                        __ptext10 052F                          __ptext11 03DE                          __ptext12 047C  
                        __ptext13 0384                          __ptext14 031C                          __ptext15 0434  
                        __ptext16 02B3   __end_of_calculateSpeedIncrement 02B3                     _ContadorMotor 0071  
             __end_of_setupTimer0 05A3               __end_of_setupTimer1 0599                    _overflow_count 005D  
                      _INTCONbits 000B                   ?_generateRandom 003A                          intlevel1 0000  
                     _motorTarget 0059      calculateSpeedIncrement@index 004F      calculateSpeedIncrement@speed 004B  
                      _OPTION_REG 0081  calculateSpeedIncrement@increment 004D                       _setupTimer0 0599  
                     _setupTimer1 058F                 _setTorretPosition 0027                       _mustStopNow 0074  
              ?_setTorretPosition 0076  
