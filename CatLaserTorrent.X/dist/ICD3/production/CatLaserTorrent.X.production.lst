

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Feb 16 14:17:14 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	12F683
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Generated 05/01/2024 GMT
    36                           ; 
    37                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC12F683 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69     0000                     	;# 
    70     0001                     	;# 
    71     0002                     	;# 
    72     0003                     	;# 
    73     0004                     	;# 
    74     0005                     	;# 
    75     000A                     	;# 
    76     000B                     	;# 
    77     000C                     	;# 
    78     000E                     	;# 
    79     000E                     	;# 
    80     000F                     	;# 
    81     0010                     	;# 
    82     0011                     	;# 
    83     0012                     	;# 
    84     0013                     	;# 
    85     0013                     	;# 
    86     0014                     	;# 
    87     0015                     	;# 
    88     0018                     	;# 
    89     0019                     	;# 
    90     001A                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     008C                     	;# 
    96     008E                     	;# 
    97     008F                     	;# 
    98     0090                     	;# 
    99     0092                     	;# 
   100     0095                     	;# 
   101     0095                     	;# 
   102     0096                     	;# 
   103     0096                     	;# 
   104     0099                     	;# 
   105     009A                     	;# 
   106     009A                     	;# 
   107     009B                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     000A                     	;# 
   119     000B                     	;# 
   120     000C                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0013                     	;# 
   129     0014                     	;# 
   130     0015                     	;# 
   131     0018                     	;# 
   132     0019                     	;# 
   133     001A                     	;# 
   134     001E                     	;# 
   135     001F                     	;# 
   136     0081                     	;# 
   137     0085                     	;# 
   138     008C                     	;# 
   139     008E                     	;# 
   140     008F                     	;# 
   141     0090                     	;# 
   142     0092                     	;# 
   143     0095                     	;# 
   144     0095                     	;# 
   145     0096                     	;# 
   146     0096                     	;# 
   147     0099                     	;# 
   148     009A                     	;# 
   149     009A                     	;# 
   150     009B                     	;# 
   151     009C                     	;# 
   152     009D                     	;# 
   153     009E                     	;# 
   154     009F                     	;# 
   155                           
   156                           	psect	idataBANK0
   157     0599                     __pidataBANK0:
   158                           
   159                           ;initializer for _randx
   160     0599  3401               	retlw	1
   161     059A  3400               	retlw	0
   162     059B  3400               	retlw	0
   163     059C  3400               	retlw	0
   164                           
   165                           	psect	nvBANK0
   166     006F                     __pnvBANK0:
   167     006F                     _MaskMotor:
   168     006F                     	ds	1
   169     000E                     _TMR1	set	14
   170     0005                     _GPIObits	set	5
   171     0012                     _T2CON	set	18
   172     0015                     _CCP1CON	set	21
   173     0010                     _T1CONbits	set	16
   174     0010                     _T1CON	set	16
   175     0011                     _TMR2	set	17
   176     0005                     _GPIO	set	5
   177     000C                     _PIR1bits	set	12
   178     0001                     _TMR0	set	1
   179     000B                     _INTCONbits	set	11
   180     002A                     _GP2	set	42
   181     0061                     _TMR2IF	set	97
   182     0092                     _TMR2ON	set	146
   183     008C                     _PIE1bits	set	140
   184     0085                     _TRISIO	set	133
   185     009F                     _ANSEL	set	159
   186     008F                     _OSCCON	set	143
   187     0081                     _OPTION_REGbits	set	129
   188     0081                     _OPTION_REG	set	129
   189     0092                     _PR2	set	146
   190                           
   191                           	psect	cinit
   192     000F                     start_initialization:	
   193                           ; #config settings
   194                           
   195     000F                     __initialization:
   196                           
   197                           ; Initialize objects allocated to BANK0
   198     000F  2599               	fcall	__pidataBANK0	;fetch initializer
   199     0010  00EB               	movwf	__pdataBANK0& (0+127)
   200     0011  259A               	fcall	__pidataBANK0+1	;fetch initializer
   201     0012  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   202     0013  259B               	fcall	__pidataBANK0+2	;fetch initializer
   203     0014  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   204     0015  259C               	fcall	__pidataBANK0+3	;fetch initializer
   205     0016  00EE               	movwf	(__pdataBANK0+3)& (0+127)
   206                           
   207                           ; Clear objects allocated to BANK0
   208     0017  1383               	bcf	3,7	;select IRP bank0
   209     0018  3054               	movlw	low __pbssBANK0
   210     0019  0084               	movwf	4
   211     001A  306B               	movlw	low (__pbssBANK0+23)
   212     001B  2589               	fcall	clear_ram0
   213                           
   214                           ; Clear objects allocated to COMMON
   215     001C  3070               	movlw	low __pbssCOMMON
   216     001D  0084               	movwf	4
   217     001E  3075               	movlw	low (__pbssCOMMON+5)
   218     001F  2589               	fcall	clear_ram0
   219     0020                     end_of_initialization:	
   220                           ;End of C runtime variable initialization code
   221                           
   222     0020                     __end_of__initialization:
   223     0020  0183               	clrf	3
   224     0021  297B               	ljmp	_main	;jump to C main() function
   225                           
   226                           	psect	bssCOMMON
   227     0070                     __pbssCOMMON:
   228     0070                     _ContadorMotor:
   229     0070                     	ds	1
   230     0071                     _contador1Seg:
   231     0071                     	ds	1
   232     0072                     _EstadoRCServo:
   233     0072                     	ds	1
   234     0073                     _mustStopNow:
   235     0073                     	ds	1
   236     0074                     _mustCheckServos:
   237     0074                     	ds	1
   238                           
   239                           	psect	bssBANK0
   240     0054                     __pbssBANK0:
   241     0054                     _motorAngle:
   242     0054                     	ds	4
   243     0058                     _motorIncrement:
   244     0058                     	ds	4
   245     005C                     _motorTarget:
   246     005C                     	ds	4
   247     0060                     _overflow_count:
   248     0060                     	ds	2
   249     0062                     _contadorTimeShutOff:
   250     0062                     	ds	2
   251     0064                     _speed:
   252     0064                     	ds	2
   253     0066                     _pwmActual:
   254     0066                     	ds	2
   255     0068                     _motorRawValueTarget:
   256     0068                     	ds	2
   257     006A                     _activeMotor:
   258     006A                     	ds	1
   259                           
   260                           	psect	dataBANK0
   261     006B                     __pdataBANK0:
   262     006B                     _randx:
   263     006B                     	ds	4
   264                           
   265                           	psect	clrtext
   266     0589                     clear_ram0:	
   267                           ;	Called with FSR containing the base address, and
   268                           ;	W with the last address+1
   269                           
   270     0589  0064               	clrwdt	;clear the watchdog before getting into this loop
   271     058A                     clrloop0:
   272     058A  0180               	clrf	0	;clear RAM location pointed to by FSR
   273     058B  0A84               	incf	4,f	;increment pointer
   274     058C  0604               	xorwf	4,w	;XOR with final address
   275     058D  1903               	btfsc	3,2	;have we reached the end yet?
   276     058E  3400               	retlw	0	;all done for this memory range, return
   277     058F  0604               	xorwf	4,w	;XOR again to restore value
   278     0590  2D8A               	goto	clrloop0	;do the next byte
   279                           
   280                           	psect	cstackCOMMON
   281     0075                     __pcstackCOMMON:
   282     0075                     ?_timer1InterruptHandler:
   283     0075                     ??_timer1InterruptHandler:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     0075                     ?_myISR:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     0075                     ?_setupTimer0:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0075                     ?_setupTimer1:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0075                     ?_initPWM:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0075                     ?_setup:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0075                     ?_setTorretPosition:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0075                     ?_main:	
   305                           ; 1 bytes @ 0x0
   306                           
   307                           
   308                           ; 1 bytes @ 0x0
   309     0075                     	ds	1
   310     0076                     ??_myISR:
   311                           
   312                           ; 1 bytes @ 0x1
   313     0076                     	ds	4
   314                           
   315                           	psect	cstackBANK0
   316     0020                     __pcstackBANK0:
   317     0020                     ?_srand:
   318     0020                     ??_setupTimer0:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0020                     ??_setupTimer1:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0020                     ??_initPWM:	
   325                           ; 1 bytes @ 0x0
   326                           
   327     0020                     ?___wmul:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     0020                     ?___lmul:	
   331                           ; 2 bytes @ 0x0
   332                           
   333     0020                     ___wmul@multiplier:	
   334                           ; 4 bytes @ 0x0
   335                           
   336     0020                     srand@x:	
   337                           ; 2 bytes @ 0x0
   338                           
   339     0020                     ___lmul@multiplier:	
   340                           ; 2 bytes @ 0x0
   341                           
   342                           
   343                           ; 4 bytes @ 0x0
   344     0020                     	ds	2
   345     0022                     ??_srand:
   346     0022                     ??_setup:	
   347                           ; 1 bytes @ 0x2
   348                           
   349     0022                     ___wmul@multiplicand:	
   350                           ; 1 bytes @ 0x2
   351                           
   352                           
   353                           ; 2 bytes @ 0x2
   354     0022                     	ds	2
   355     0024                     ??___wmul:
   356     0024                     ___wmul@product:	
   357                           ; 1 bytes @ 0x4
   358                           
   359     0024                     ___lmul@multiplicand:	
   360                           ; 2 bytes @ 0x4
   361                           
   362                           
   363                           ; 4 bytes @ 0x4
   364     0024                     	ds	2
   365     0026                     ?___awdiv:
   366     0026                     ___awdiv@divisor:	
   367                           ; 2 bytes @ 0x6
   368                           
   369                           
   370                           ; 2 bytes @ 0x6
   371     0026                     	ds	2
   372     0028                     ??___lmul:
   373     0028                     ___awdiv@dividend:	
   374                           ; 1 bytes @ 0x8
   375                           
   376                           
   377                           ; 2 bytes @ 0x8
   378     0028                     	ds	1
   379     0029                     ___lmul@product:
   380                           
   381                           ; 4 bytes @ 0x9
   382     0029                     	ds	1
   383     002A                     ??___awdiv:
   384     002A                     ___awdiv@counter:	
   385                           ; 1 bytes @ 0xA
   386                           
   387                           
   388                           ; 1 bytes @ 0xA
   389     002A                     	ds	1
   390     002B                     ___awdiv@sign:
   391                           
   392                           ; 1 bytes @ 0xB
   393     002B                     	ds	1
   394     002C                     ___awdiv@quotient:
   395                           
   396                           ; 2 bytes @ 0xC
   397     002C                     	ds	1
   398     002D                     ?_rand:
   399                           
   400                           ; 2 bytes @ 0xD
   401     002D                     	ds	1
   402     002E                     ?_convertAngle:
   403     002E                     convertAngle@value:	
   404                           ; 1 bytes @ 0xE
   405                           
   406                           
   407                           ; 2 bytes @ 0xE
   408     002E                     	ds	1
   409     002F                     ??_rand:
   410                           
   411                           ; 1 bytes @ 0xF
   412     002F                     	ds	1
   413     0030                     ??_convertAngle:
   414     0030                     convertAngle@temp:	
   415                           ; 1 bytes @ 0x10
   416                           
   417                           
   418                           ; 2 bytes @ 0x10
   419     0030                     	ds	4
   420     0034                     ?___awmod:
   421     0034                     ___awmod@divisor:	
   422                           ; 2 bytes @ 0x14
   423                           
   424                           
   425                           ; 2 bytes @ 0x14
   426     0034                     	ds	2
   427     0036                     ___awmod@dividend:
   428                           
   429                           ; 2 bytes @ 0x16
   430     0036                     	ds	2
   431     0038                     ??___awmod:
   432     0038                     ___awmod@counter:	
   433                           ; 1 bytes @ 0x18
   434                           
   435                           
   436                           ; 1 bytes @ 0x18
   437     0038                     	ds	1
   438     0039                     ___awmod@sign:
   439                           
   440                           ; 1 bytes @ 0x19
   441     0039                     	ds	1
   442     003A                     ?_generateRandom:
   443     003A                     generateRandom@min:	
   444                           ; 2 bytes @ 0x1A
   445                           
   446                           
   447                           ; 2 bytes @ 0x1A
   448     003A                     	ds	2
   449     003C                     generateRandom@max:
   450                           
   451                           ; 2 bytes @ 0x1C
   452     003C                     	ds	2
   453     003E                     ??_generateRandom:
   454                           
   455                           ; 1 bytes @ 0x1E
   456     003E                     	ds	2
   457     0040                     generateRandom@randomNumber:
   458                           
   459                           ; 2 bytes @ 0x20
   460     0040                     	ds	2
   461     0042                     ?_calculateSpeedIncrement:
   462                           
   463                           ; 2 bytes @ 0x22
   464     0042                     	ds	2
   465     0044                     ??_calculateSpeedIncrement:
   466                           
   467                           ; 1 bytes @ 0x24
   468     0044                     	ds	7
   469     004B                     calculateSpeedIncrement@speed:
   470                           
   471                           ; 2 bytes @ 0x2B
   472     004B                     	ds	2
   473     004D                     calculateSpeedIncrement@increment:
   474                           
   475                           ; 2 bytes @ 0x2D
   476     004D                     	ds	2
   477     004F                     calculateSpeedIncrement@index:
   478                           
   479                           ; 1 bytes @ 0x2F
   480     004F                     	ds	1
   481     0050                     ??_setTorretPosition:
   482                           
   483                           ; 1 bytes @ 0x30
   484     0050                     	ds	1
   485     0051                     ??_main:
   486                           
   487                           ; 1 bytes @ 0x31
   488     0051                     	ds	3
   489                           
   490                           	psect	maintext
   491     017B                     __pmaintext:	
   492 ;;
   493 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   494 ;;
   495 ;; *************** function _main *****************
   496 ;; Defined at:
   497 ;;		line 312 in file "main.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;		None
   502 ;; Return value:  Size  Location     Type
   503 ;;                  1    wreg      void 
   504 ;; Registers used:
   505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   506 ;; Tracked objects:
   507 ;;		On entry : B00/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMMON   BANK0   BANK1
   511 ;;      Params:         0       0       0
   512 ;;      Locals:         0       0       0
   513 ;;      Temps:          0       3       0
   514 ;;      Totals:         0       3       0
   515 ;;Total ram usage:        3 bytes
   516 ;; Hardware stack levels required when called: 7
   517 ;; This function calls:
   518 ;;		_convertAngle
   519 ;;		_setTorretPosition
   520 ;;		_setup
   521 ;; This function is called by:
   522 ;;		Startup code after reset
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526     017B                     _main:	
   527                           ;psect for function _main
   528                           
   529     017B                     l1947:	
   530                           ;incstack = 0
   531                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   532                           
   533                           
   534                           ;main.c: 313: setup();
   535     017B  2546               	fcall	_setup
   536     017C                     l1949:
   537                           
   538                           ;main.c: 314: motorAngle[0] = 0;
   539     017C  1283               	bcf	3,5	;RP0=0, select bank0
   540     017D  01D4               	clrf	_motorAngle
   541     017E  01D5               	clrf	_motorAngle+1
   542     017F                     l1951:
   543                           
   544                           ;main.c: 315: motorAngle[1] = 0;
   545     017F  01D6               	clrf	_motorAngle+2
   546     0180  01D7               	clrf	_motorAngle+3
   547     0181                     l1953:
   548                           
   549                           ;main.c: 316: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   550     0181  0855               	movf	_motorAngle+1,w
   551     0182  00AF               	movwf	convertAngle@value+1
   552     0183  0854               	movf	_motorAngle,w
   553     0184  00AE               	movwf	convertAngle@value
   554     0185  2473               	fcall	_convertAngle
   555     0186  1283               	bcf	3,5	;RP0=0, select bank0
   556     0187  00E8               	movwf	_motorRawValueTarget
   557     0188                     l1955:
   558                           
   559                           ;main.c: 317: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   560     0188  0857               	movf	_motorAngle+3,w
   561     0189  00AF               	movwf	convertAngle@value+1
   562     018A  0856               	movf	_motorAngle+2,w
   563     018B  00AE               	movwf	convertAngle@value
   564     018C  2473               	fcall	_convertAngle
   565     018D  1283               	bcf	3,5	;RP0=0, select bank0
   566     018E  00E9               	movwf	_motorRawValueTarget+1
   567     018F                     l1957:
   568                           
   569                           ;main.c: 318: GP2 = 0;
   570     018F  1105               	bcf	5,2	;volatile
   571     0190                     l1959:
   572                           
   573                           ;main.c: 334: _delay((unsigned long)((1000)*(8000000/4000.0)));
   574     0190  300B               	movlw	11
   575     0191  1283               	bcf	3,5	;RP0=0, select bank0
   576     0192  00D3               	movwf	??_main+2
   577     0193  3026               	movlw	38
   578     0194  00D2               	movwf	??_main+1
   579     0195  305D               	movlw	93
   580     0196  00D1               	movwf	??_main
   581     0197                     u1667:
   582     0197  0BD1               	decfsz	??_main,f
   583     0198  2997               	goto	u1667
   584     0199  0BD2               	decfsz	??_main+1,f
   585     019A  2997               	goto	u1667
   586     019B  0BD3               	decfsz	??_main+2,f
   587     019C  2997               	goto	u1667
   588     019D  0000               	nop
   589     019E                     l1961:
   590                           
   591                           ;main.c: 336: motorAngle[0] = -60;
   592     019E  30C4               	movlw	196
   593     019F  1283               	bcf	3,5	;RP0=0, select bank0
   594     01A0  00D4               	movwf	_motorAngle
   595     01A1  30FF               	movlw	255
   596     01A2  00D5               	movwf	_motorAngle+1
   597     01A3                     l1963:
   598                           
   599                           ;main.c: 337: motorAngle[1] = -65;
   600     01A3  30BF               	movlw	191
   601     01A4  00D6               	movwf	_motorAngle+2
   602     01A5  30FF               	movlw	255
   603     01A6  00D7               	movwf	_motorAngle+3
   604     01A7                     l1965:
   605                           
   606                           ;main.c: 338: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   607     01A7  0855               	movf	_motorAngle+1,w
   608     01A8  00AF               	movwf	convertAngle@value+1
   609     01A9  0854               	movf	_motorAngle,w
   610     01AA  00AE               	movwf	convertAngle@value
   611     01AB  2473               	fcall	_convertAngle
   612     01AC  1283               	bcf	3,5	;RP0=0, select bank0
   613     01AD  00E8               	movwf	_motorRawValueTarget
   614     01AE                     l1967:
   615                           
   616                           ;main.c: 339: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   617     01AE  0857               	movf	_motorAngle+3,w
   618     01AF  00AF               	movwf	convertAngle@value+1
   619     01B0  0856               	movf	_motorAngle+2,w
   620     01B1  00AE               	movwf	convertAngle@value
   621     01B2  2473               	fcall	_convertAngle
   622     01B3  1283               	bcf	3,5	;RP0=0, select bank0
   623     01B4  00E9               	movwf	_motorRawValueTarget+1
   624     01B5                     l1969:
   625                           
   626                           ;main.c: 341: _delay((unsigned long)((1000)*(8000000/4000.0)));
   627     01B5  300B               	movlw	11
   628     01B6  1283               	bcf	3,5	;RP0=0, select bank0
   629     01B7  00D3               	movwf	??_main+2
   630     01B8  3026               	movlw	38
   631     01B9  00D2               	movwf	??_main+1
   632     01BA  305D               	movlw	93
   633     01BB  00D1               	movwf	??_main
   634     01BC                     u1677:
   635     01BC  0BD1               	decfsz	??_main,f
   636     01BD  29BC               	goto	u1677
   637     01BE  0BD2               	decfsz	??_main+1,f
   638     01BF  29BC               	goto	u1677
   639     01C0  0BD3               	decfsz	??_main+2,f
   640     01C1  29BC               	goto	u1677
   641     01C2  0000               	nop
   642     01C3                     l1971:
   643                           
   644                           ;main.c: 342: motorAngle[0] = 60;
   645     01C3  303C               	movlw	60
   646     01C4  1283               	bcf	3,5	;RP0=0, select bank0
   647     01C5  00D4               	movwf	_motorAngle
   648     01C6  3000               	movlw	0
   649     01C7  00D5               	movwf	_motorAngle+1
   650     01C8                     l1973:
   651                           
   652                           ;main.c: 343: motorAngle[1] = -5;
   653     01C8  30FB               	movlw	251
   654     01C9  00D6               	movwf	_motorAngle+2
   655     01CA  30FF               	movlw	255
   656     01CB  00D7               	movwf	_motorAngle+3
   657     01CC                     l1975:
   658                           
   659                           ;main.c: 344: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   660     01CC  0855               	movf	_motorAngle+1,w
   661     01CD  00AF               	movwf	convertAngle@value+1
   662     01CE  0854               	movf	_motorAngle,w
   663     01CF  00AE               	movwf	convertAngle@value
   664     01D0  2473               	fcall	_convertAngle
   665     01D1  1283               	bcf	3,5	;RP0=0, select bank0
   666     01D2  00E8               	movwf	_motorRawValueTarget
   667     01D3                     l1977:
   668                           
   669                           ;main.c: 345: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   670     01D3  0857               	movf	_motorAngle+3,w
   671     01D4  00AF               	movwf	convertAngle@value+1
   672     01D5  0856               	movf	_motorAngle+2,w
   673     01D6  00AE               	movwf	convertAngle@value
   674     01D7  2473               	fcall	_convertAngle
   675     01D8  1283               	bcf	3,5	;RP0=0, select bank0
   676     01D9  00E9               	movwf	_motorRawValueTarget+1
   677     01DA                     l1979:
   678                           
   679                           ;main.c: 347: _delay((unsigned long)((1000)*(8000000/4000.0)));
   680     01DA  300B               	movlw	11
   681     01DB  1283               	bcf	3,5	;RP0=0, select bank0
   682     01DC  00D3               	movwf	??_main+2
   683     01DD  3026               	movlw	38
   684     01DE  00D2               	movwf	??_main+1
   685     01DF  305D               	movlw	93
   686     01E0  00D1               	movwf	??_main
   687     01E1                     u1687:
   688     01E1  0BD1               	decfsz	??_main,f
   689     01E2  29E1               	goto	u1687
   690     01E3  0BD2               	decfsz	??_main+1,f
   691     01E4  29E1               	goto	u1687
   692     01E5  0BD3               	decfsz	??_main+2,f
   693     01E6  29E1               	goto	u1687
   694     01E7  0000               	nop
   695     01E8                     l1981:
   696                           
   697                           ;main.c: 348: motorAngle[0] = 0;
   698     01E8  1283               	bcf	3,5	;RP0=0, select bank0
   699     01E9  01D4               	clrf	_motorAngle
   700     01EA  01D5               	clrf	_motorAngle+1
   701     01EB                     l1983:
   702                           
   703                           ;main.c: 349: motorAngle[1] = 0;
   704     01EB  01D6               	clrf	_motorAngle+2
   705     01EC  01D7               	clrf	_motorAngle+3
   706     01ED                     l1985:
   707                           
   708                           ;main.c: 350: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   709     01ED  0855               	movf	_motorAngle+1,w
   710     01EE  00AF               	movwf	convertAngle@value+1
   711     01EF  0854               	movf	_motorAngle,w
   712     01F0  00AE               	movwf	convertAngle@value
   713     01F1  2473               	fcall	_convertAngle
   714     01F2  1283               	bcf	3,5	;RP0=0, select bank0
   715     01F3  00E8               	movwf	_motorRawValueTarget
   716     01F4                     l1987:
   717                           
   718                           ;main.c: 351: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   719     01F4  0857               	movf	_motorAngle+3,w
   720     01F5  00AF               	movwf	convertAngle@value+1
   721     01F6  0856               	movf	_motorAngle+2,w
   722     01F7  00AE               	movwf	convertAngle@value
   723     01F8  2473               	fcall	_convertAngle
   724     01F9  1283               	bcf	3,5	;RP0=0, select bank0
   725     01FA  00E9               	movwf	_motorRawValueTarget+1
   726     01FB                     l1989:
   727                           
   728                           ;main.c: 353: _delay((unsigned long)((1000)*(8000000/4000.0)));
   729     01FB  300B               	movlw	11
   730     01FC  1283               	bcf	3,5	;RP0=0, select bank0
   731     01FD  00D3               	movwf	??_main+2
   732     01FE  3026               	movlw	38
   733     01FF  00D2               	movwf	??_main+1
   734     0200  305D               	movlw	93
   735     0201  00D1               	movwf	??_main
   736     0202                     u1697:
   737     0202  0BD1               	decfsz	??_main,f
   738     0203  2A02               	goto	u1697
   739     0204  0BD2               	decfsz	??_main+1,f
   740     0205  2A02               	goto	u1697
   741     0206  0BD3               	decfsz	??_main+2,f
   742     0207  2A02               	goto	u1697
   743     0208  0000               	nop
   744     0209                     l1991:
   745                           
   746                           ;main.c: 354: GP2 = 1;
   747     0209  1283               	bcf	3,5	;RP0=0, select bank0
   748     020A  1505               	bsf	5,2	;volatile
   749     020B                     l1993:
   750                           
   751                           ;main.c: 357: if (mustCheckServos == 1 && !mustStopNow) {
   752     020B  0374               	decf	_mustCheckServos,w
   753     020C  1D03               	btfss	3,2
   754     020D  2A0F               	goto	u1631
   755     020E  2A10               	goto	u1630
   756     020F                     u1631:
   757     020F  2A17               	goto	l2001
   758     0210                     u1630:
   759     0210                     l1995:
   760     0210  0873               	movf	_mustStopNow,w
   761     0211  1D03               	btfss	3,2
   762     0212  2A14               	goto	u1641
   763     0213  2A15               	goto	u1640
   764     0214                     u1641:
   765     0214  2A17               	goto	l2001
   766     0215                     u1640:
   767     0215                     l1997:
   768                           
   769                           ;main.c: 358: mustCheckServos = 0;
   770     0215  01F4               	clrf	_mustCheckServos
   771     0216                     l1999:
   772                           
   773                           ;main.c: 359: setTorretPosition();
   774     0216  2022               	fcall	_setTorretPosition
   775     0217                     l2001:
   776                           
   777                           ;main.c: 360: };main.c: 361: if (mustStopNow == 1) {
   778     0217  0373               	decf	_mustStopNow,w
   779     0218  1D03               	btfss	3,2
   780     0219  2A1B               	goto	u1651
   781     021A  2A1C               	goto	u1650
   782     021B                     u1651:
   783     021B  2A0B               	goto	l1993
   784     021C                     u1650:
   785     021C                     l2003:
   786                           
   787                           ;main.c: 362: GP2 = 0;
   788     021C  1283               	bcf	3,5	;RP0=0, select bank0
   789     021D  1105               	bcf	5,2	;volatile
   790     021E                     l2005:
   791                           
   792                           ;main.c: 363: motorAngle[0] = 0;
   793     021E  01D4               	clrf	_motorAngle
   794     021F  01D5               	clrf	_motorAngle+1
   795                           
   796                           ;main.c: 364: motorAngle[1] = 0;
   797     0220  01D6               	clrf	_motorAngle+2
   798     0221  01D7               	clrf	_motorAngle+3
   799     0222                     l2007:
   800                           
   801                           ;main.c: 365: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   802     0222  0855               	movf	_motorAngle+1,w
   803     0223  00AF               	movwf	convertAngle@value+1
   804     0224  0854               	movf	_motorAngle,w
   805     0225  00AE               	movwf	convertAngle@value
   806     0226  2473               	fcall	_convertAngle
   807     0227  1283               	bcf	3,5	;RP0=0, select bank0
   808     0228  00E8               	movwf	_motorRawValueTarget
   809     0229                     l2009:
   810                           
   811                           ;main.c: 366: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   812     0229  0857               	movf	_motorAngle+3,w
   813     022A  00AF               	movwf	convertAngle@value+1
   814     022B  0856               	movf	_motorAngle+2,w
   815     022C  00AE               	movwf	convertAngle@value
   816     022D  2473               	fcall	_convertAngle
   817     022E  1283               	bcf	3,5	;RP0=0, select bank0
   818     022F  00E9               	movwf	_motorRawValueTarget+1
   819     0230  2A0B               	goto	l1993
   820     0231  280E               	ljmp	start
   821     0232                     __end_of_main:
   822                           
   823                           	psect	text1
   824     0546                     __ptext1:	
   825 ;; *************** function _setup *****************
   826 ;; Defined at:
   827 ;;		line 199 in file "main.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;		None
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, pclath, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1
   841 ;;      Params:         0       0       0
   842 ;;      Locals:         0       0       0
   843 ;;      Temps:          0       0       0
   844 ;;      Totals:         0       0       0
   845 ;;Total ram usage:        0 bytes
   846 ;; Hardware stack levels used: 1
   847 ;; Hardware stack levels required when called: 3
   848 ;; This function calls:
   849 ;;		_initPWM
   850 ;;		_setupTimer0
   851 ;;		_setupTimer1
   852 ;;		_srand
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858     0546                     _setup:	
   859                           ;psect for function _setup
   860                           
   861     0546                     l1843:	
   862                           ;incstack = 0
   863                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   864                           
   865                           
   866                           ;main.c: 200: srand(TMR1);
   867     0546  1283               	bcf	3,5	;RP0=0, select bank0
   868     0547  080F               	movf	15,w	;volatile
   869     0548  00A1               	movwf	srand@x+1
   870     0549  080E               	movf	14,w	;volatile
   871     054A  00A0               	movwf	srand@x
   872     054B  2591               	fcall	_srand
   873     054C                     l1845:
   874                           
   875                           ;main.c: 201: OSCCON = 0x71;
   876     054C  3071               	movlw	113
   877     054D  1683               	bsf	3,5	;RP0=1, select bank1
   878     054E  008F               	movwf	15	;volatile
   879     054F                     l1847:
   880                           
   881                           ;main.c: 202: ANSEL = 0;
   882     054F  019F               	clrf	31	;volatile
   883     0550                     l1849:
   884                           
   885                           ;main.c: 203: TRISIO = 0b00000011;
   886     0550  3003               	movlw	3
   887     0551  0085               	movwf	5	;volatile
   888     0552                     l1851:
   889                           
   890                           ;main.c: 204: initPWM();
   891     0552  2568               	fcall	_initPWM
   892     0553                     l1853:
   893                           
   894                           ;main.c: 205: setupTimer1();
   895     0553  2575               	fcall	_setupTimer1
   896     0554                     l1855:
   897                           
   898                           ;main.c: 206: setupTimer0();
   899     0554  257F               	fcall	_setupTimer0
   900                           
   901                           ;main.c: 207: ContadorMotor = 0;
   902     0555  01F0               	clrf	_ContadorMotor
   903                           
   904                           ;main.c: 208: contador1Seg =0;
   905     0556  01F1               	clrf	_contador1Seg
   906                           
   907                           ;main.c: 209: contadorTimeShutOff =0;
   908     0557  1283               	bcf	3,5	;RP0=0, select bank0
   909     0558  01E2               	clrf	_contadorTimeShutOff
   910     0559  01E3               	clrf	_contadorTimeShutOff+1
   911                           
   912                           ;main.c: 210: mustStopNow = 0;
   913     055A  01F3               	clrf	_mustStopNow
   914     055B                     l1857:
   915                           
   916                           ;main.c: 211: GPIObits.GP2 = 0;
   917     055B  1105               	bcf	5,2	;volatile
   918     055C                     l1859:
   919                           
   920                           ;main.c: 212: GPIObits.GP4 = 0;
   921     055C  1205               	bcf	5,4	;volatile
   922     055D                     l1861:
   923                           
   924                           ;main.c: 213: GPIObits.GP5 = 0;
   925     055D  1285               	bcf	5,5	;volatile
   926     055E                     l1863:
   927                           
   928                           ;main.c: 216: INTCONbits.GIE = 1;
   929     055E  178B               	bsf	11,7	;volatile
   930     055F                     l1865:
   931                           
   932                           ;main.c: 217: INTCONbits.PEIE = 1;
   933     055F  170B               	bsf	11,6	;volatile
   934     0560                     l1867:
   935                           
   936                           ;main.c: 219: INTCONbits.TMR0IF = 0;
   937     0560  110B               	bcf	11,2	;volatile
   938     0561                     l1869:
   939                           
   940                           ;main.c: 220: PIR1bits.TMR1IF = 0;
   941     0561  100C               	bcf	12,0	;volatile
   942     0562                     l1871:
   943                           
   944                           ;main.c: 221: PIR1bits.TMR2IF = 0;
   945     0562  108C               	bcf	12,1	;volatile
   946     0563                     l1873:
   947                           
   948                           ;main.c: 222: INTCONbits.TMR0IE = 1;
   949     0563  168B               	bsf	11,5	;volatile
   950     0564                     l1875:
   951                           
   952                           ;main.c: 223: PIE1bits.TMR2IE = 1;
   953     0564  1683               	bsf	3,5	;RP0=1, select bank1
   954     0565  148C               	bsf	12,1	;volatile
   955     0566                     l1877:
   956                           
   957                           ;main.c: 224: PIE1bits.TMR1IE = 1;
   958     0566  140C               	bsf	12,0	;volatile
   959     0567                     l118:
   960     0567  0008               	return
   961     0568                     __end_of_setup:
   962                           
   963                           	psect	text2
   964     0591                     __ptext2:	
   965 ;; *************** function _srand *****************
   966 ;; Defined at:
   967 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\rand.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  x               2    0[BANK0 ] unsigned int 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMMON   BANK0   BANK1
   981 ;;      Params:         0       2       0
   982 ;;      Locals:         0       0       0
   983 ;;      Temps:          0       0       0
   984 ;;      Totals:         0       2       0
   985 ;;Total ram usage:        2 bytes
   986 ;; Hardware stack levels used: 1
   987 ;; Hardware stack levels required when called: 2
   988 ;; This function calls:
   989 ;;		Nothing
   990 ;; This function is called by:
   991 ;;		_setup
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995     0591                     _srand:	
   996                           ;psect for function _srand
   997                           
   998     0591                     l1807:	
   999                           ;incstack = 0
  1000                           ; Regs used in _srand: [wreg]
  1001                           
  1002     0591  1283               	bcf	3,5	;RP0=0, select bank0
  1003     0592  0820               	movf	srand@x,w
  1004     0593  00EB               	movwf	_randx
  1005     0594  0821               	movf	srand@x+1,w
  1006     0595  00EC               	movwf	_randx+1
  1007     0596  01ED               	clrf	_randx+2
  1008     0597  01EE               	clrf	_randx+3
  1009     0598                     l706:
  1010     0598  0008               	return
  1011     0599                     __end_of_srand:
  1012                           
  1013                           	psect	text3
  1014     0575                     __ptext3:	
  1015 ;; *************** function _setupTimer1 *****************
  1016 ;; Defined at:
  1017 ;;		line 178 in file "main.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, status,2, status,0
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMMON   BANK0   BANK1
  1031 ;;      Params:         0       0       0
  1032 ;;      Locals:         0       0       0
  1033 ;;      Temps:          0       0       0
  1034 ;;      Totals:         0       0       0
  1035 ;;Total ram usage:        0 bytes
  1036 ;; Hardware stack levels used: 1
  1037 ;; Hardware stack levels required when called: 2
  1038 ;; This function calls:
  1039 ;;		Nothing
  1040 ;; This function is called by:
  1041 ;;		_setup
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045     0575                     _setupTimer1:	
  1046                           ;psect for function _setupTimer1
  1047                           
  1048     0575                     l1787:	
  1049                           ;incstack = 0
  1050                           ; Regs used in _setupTimer1: [wreg+status,2+status,0]
  1051                           
  1052                           
  1053                           ;main.c: 179: T1CON = 0;
  1054     0575  1283               	bcf	3,5	;RP0=0, select bank0
  1055     0576  0190               	clrf	16	;volatile
  1056     0577                     l1789:
  1057                           
  1058                           ;main.c: 180: T1CONbits.T1CKPS = 0;
  1059     0577  30CF               	movlw	-49
  1060     0578  0590               	andwf	16,f	;volatile
  1061     0579                     l1791:
  1062                           
  1063                           ;main.c: 181: TMR1 = 61561;
  1064     0579  30F0               	movlw	240
  1065     057A  008F               	movwf	15	;volatile
  1066     057B  3079               	movlw	121
  1067     057C  008E               	movwf	14	;volatile
  1068     057D                     l1793:
  1069                           
  1070                           ;main.c: 182: T1CONbits.TMR1ON = 1;
  1071     057D  1410               	bsf	16,0	;volatile
  1072     057E                     l112:
  1073     057E  0008               	return
  1074     057F                     __end_of_setupTimer1:
  1075                           
  1076                           	psect	text4
  1077     057F                     __ptext4:	
  1078 ;; *************** function _setupTimer0 *****************
  1079 ;; Defined at:
  1080 ;;		line 170 in file "main.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;		None
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;		None
  1085 ;; Return value:  Size  Location     Type
  1086 ;;                  1    wreg      void 
  1087 ;; Registers used:
  1088 ;;		wreg, status,2, status,0
  1089 ;; Tracked objects:
  1090 ;;		On entry : 0/0
  1091 ;;		On exit  : 0/0
  1092 ;;		Unchanged: 0/0
  1093 ;; Data sizes:     COMMON   BANK0   BANK1
  1094 ;;      Params:         0       0       0
  1095 ;;      Locals:         0       0       0
  1096 ;;      Temps:          0       0       0
  1097 ;;      Totals:         0       0       0
  1098 ;;Total ram usage:        0 bytes
  1099 ;; Hardware stack levels used: 1
  1100 ;; Hardware stack levels required when called: 2
  1101 ;; This function calls:
  1102 ;;		Nothing
  1103 ;; This function is called by:
  1104 ;;		_setup
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108     057F                     _setupTimer0:	
  1109                           ;psect for function _setupTimer0
  1110                           
  1111     057F                     l1777:	
  1112                           ;incstack = 0
  1113                           ; Regs used in _setupTimer0: [wreg+status,2+status,0]
  1114                           
  1115                           
  1116                           ;main.c: 171: OPTION_REG = 0;
  1117     057F  1683               	bsf	3,5	;RP0=1, select bank1
  1118     0580  0181               	clrf	1	;volatile
  1119     0581                     l1779:
  1120                           
  1121                           ;main.c: 172: OPTION_REGbits.PSA = 0;
  1122     0581  1181               	bcf	1,3	;volatile
  1123     0582                     l1781:
  1124                           
  1125                           ;main.c: 173: OPTION_REGbits.PS = 7;
  1126     0582  3007               	movlw	7
  1127     0583  0481               	iorwf	1,f	;volatile
  1128     0584                     l1783:
  1129                           
  1130                           ;main.c: 174: TMR0 = 176;
  1131     0584  30B0               	movlw	176
  1132     0585  1283               	bcf	3,5	;RP0=0, select bank0
  1133     0586  0081               	movwf	1	;volatile
  1134     0587                     l1785:
  1135                           
  1136                           ;main.c: 175: INTCONbits.TMR0IE = 1;
  1137     0587  168B               	bsf	11,5	;volatile
  1138     0588                     l109:
  1139     0588  0008               	return
  1140     0589                     __end_of_setupTimer0:
  1141                           
  1142                           	psect	text5
  1143     0568                     __ptext5:	
  1144 ;; *************** function _initPWM *****************
  1145 ;; Defined at:
  1146 ;;		line 185 in file "main.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1
  1160 ;;      Params:         0       0       0
  1161 ;;      Locals:         0       0       0
  1162 ;;      Temps:          0       0       0
  1163 ;;      Totals:         0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; Hardware stack levels required when called: 2
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_setup
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174     0568                     _initPWM:	
  1175                           ;psect for function _initPWM
  1176                           
  1177     0568                     l1795:	
  1178                           ;incstack = 0
  1179                           ; Regs used in _initPWM: [wreg+status,2]
  1180                           
  1181                           
  1182                           ;main.c: 186: CCP1CON = 0b00000000;
  1183     0568  1283               	bcf	3,5	;RP0=0, select bank0
  1184     0569  0195               	clrf	21	;volatile
  1185     056A                     l1797:
  1186                           
  1187                           ;main.c: 187: T2CON = 0b00000011;
  1188     056A  3003               	movlw	3
  1189     056B  0092               	movwf	18	;volatile
  1190     056C                     l1799:
  1191                           
  1192                           ;main.c: 192: PR2 = 249;
  1193     056C  30F9               	movlw	249
  1194     056D  1683               	bsf	3,5	;RP0=1, select bank1
  1195     056E  0092               	movwf	18	;volatile
  1196     056F                     l1801:
  1197                           
  1198                           ;main.c: 194: MaskMotor = 0b00010000;
  1199     056F  3010               	movlw	16
  1200     0570  1283               	bcf	3,5	;RP0=0, select bank0
  1201     0571  00EF               	movwf	_MaskMotor
  1202     0572                     l1803:
  1203                           
  1204                           ;main.c: 195: EstadoRCServo = 0;
  1205     0572  01F2               	clrf	_EstadoRCServo
  1206     0573                     l1805:
  1207                           
  1208                           ;main.c: 196: ContadorMotor = 0;
  1209     0573  01F0               	clrf	_ContadorMotor
  1210     0574                     l115:
  1211     0574  0008               	return
  1212     0575                     __end_of_initPWM:
  1213                           
  1214                           	psect	text6
  1215     0022                     __ptext6:	
  1216 ;; *************** function _setTorretPosition *****************
  1217 ;; Defined at:
  1218 ;;		line 266 in file "main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1
  1232 ;;      Params:         0       0       0
  1233 ;;      Locals:         0       0       0
  1234 ;;      Temps:          0       1       0
  1235 ;;      Totals:         0       1       0
  1236 ;;Total ram usage:        1 bytes
  1237 ;; Hardware stack levels used: 1
  1238 ;; Hardware stack levels required when called: 6
  1239 ;; This function calls:
  1240 ;;		_calculateSpeedIncrement
  1241 ;;		_convertAngle
  1242 ;;		_generateRandom
  1243 ;; This function is called by:
  1244 ;;		_main
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248     0022                     _setTorretPosition:	
  1249                           ;psect for function _setTorretPosition
  1250                           
  1251     0022                     l1879:	
  1252                           ;incstack = 0
  1253                           ; Regs used in _setTorretPosition: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1254                           
  1255                           
  1256                           ;main.c: 269: __nop();
  1257     0022  0000               	nop
  1258                           
  1259                           ;main.c: 270: if ((motorIncrement[0] >= 0 && (motorAngle[0] >= motorTarget[0])) ||;main.
      +                          c: 271: ((motorIncrement[0] < 0 && (motorAngle[0] <= motorTarget[0])))) {
  1260     0023  1283               	bcf	3,5	;RP0=0, select bank0
  1261     0024  1BD9               	btfsc	_motorIncrement+1,7
  1262     0025  2827               	goto	u1511
  1263     0026  2828               	goto	u1510
  1264     0027                     u1511:
  1265     0027  2836               	goto	l141
  1266     0028                     u1510:
  1267     0028                     l1881:
  1268     0028  0855               	movf	_motorAngle+1,w
  1269     0029  3A80               	xorlw	128
  1270     002A  00D0               	movwf	??_setTorretPosition
  1271     002B  085D               	movf	_motorTarget+1,w
  1272     002C  3A80               	xorlw	128
  1273     002D  0250               	subwf	??_setTorretPosition,w
  1274     002E  1D03               	skipz
  1275     002F  2832               	goto	u1525
  1276     0030  085C               	movf	_motorTarget,w
  1277     0031  0254               	subwf	_motorAngle,w
  1278     0032                     u1525:
  1279     0032  1803               	skipnc
  1280     0033  2835               	goto	u1521
  1281     0034  2836               	goto	u1520
  1282     0035                     u1521:
  1283     0035  2849               	goto	l1885
  1284     0036                     u1520:
  1285     0036                     l141:
  1286     0036  1283               	bcf	3,5	;RP0=0, select bank0
  1287     0037  1FD9               	btfss	_motorIncrement+1,7
  1288     0038  283A               	goto	u1531
  1289     0039  283B               	goto	u1530
  1290     003A                     u1531:
  1291     003A  2860               	goto	l1889
  1292     003B                     u1530:
  1293     003B                     l1883:
  1294     003B  085D               	movf	_motorTarget+1,w
  1295     003C  3A80               	xorlw	128
  1296     003D  00D0               	movwf	??_setTorretPosition
  1297     003E  0855               	movf	_motorAngle+1,w
  1298     003F  3A80               	xorlw	128
  1299     0040  0250               	subwf	??_setTorretPosition,w
  1300     0041  1D03               	skipz
  1301     0042  2845               	goto	u1545
  1302     0043  0854               	movf	_motorAngle,w
  1303     0044  025C               	subwf	_motorTarget,w
  1304     0045                     u1545:
  1305     0045  1C03               	skipc
  1306     0046  2848               	goto	u1541
  1307     0047  2849               	goto	u1540
  1308     0048                     u1541:
  1309     0048  2860               	goto	l1889
  1310     0049                     u1540:
  1311     0049                     l1885:
  1312                           
  1313                           ;main.c: 272: motorTarget[0] = (int)generateRandom(-60, 60);
  1314     0049  30C4               	movlw	196
  1315     004A  1283               	bcf	3,5	;RP0=0, select bank0
  1316     004B  00BA               	movwf	generateRandom@min
  1317     004C  30FF               	movlw	255
  1318     004D  00BB               	movwf	generateRandom@min+1
  1319     004E  303C               	movlw	60
  1320     004F  00BC               	movwf	generateRandom@max
  1321     0050  3000               	movlw	0
  1322     0051  00BD               	movwf	generateRandom@max+1
  1323     0052  2520               	fcall	_generateRandom
  1324     0053  1283               	bcf	3,5	;RP0=0, select bank0
  1325     0054  083B               	movf	?_generateRandom+1,w
  1326     0055  00DD               	movwf	_motorTarget+1
  1327     0056  083A               	movf	?_generateRandom,w
  1328     0057  00DC               	movwf	_motorTarget
  1329     0058                     l1887:
  1330                           
  1331                           ;main.c: 273: motorIncrement[0] = calculateSpeedIncrement(0);
  1332     0058  3000               	movlw	0
  1333     0059  2232               	fcall	_calculateSpeedIncrement
  1334     005A  1283               	bcf	3,5	;RP0=0, select bank0
  1335     005B  0843               	movf	?_calculateSpeedIncrement+1,w
  1336     005C  00D9               	movwf	_motorIncrement+1
  1337     005D  0842               	movf	?_calculateSpeedIncrement,w
  1338     005E  00D8               	movwf	_motorIncrement
  1339                           
  1340                           ;main.c: 274: } else if (motorAngle[0] < -60) {
  1341     005F  28D0               	goto	l1913
  1342     0060                     l1889:
  1343     0060  1283               	bcf	3,5	;RP0=0, select bank0
  1344     0061  0855               	movf	_motorAngle+1,w
  1345     0062  3A80               	xorlw	128
  1346     0063  00FF               	movwf	btemp+1
  1347     0064  307F               	movlw	127
  1348     0065  027F               	subwf	btemp+1,w
  1349     0066  1D03               	skipz
  1350     0067  286A               	goto	u1555
  1351     0068  30C4               	movlw	196
  1352     0069  0254               	subwf	_motorAngle,w
  1353     006A                     u1555:
  1354     006A  1803               	skipnc
  1355     006B  286D               	goto	u1551
  1356     006C  286E               	goto	u1550
  1357     006D                     u1551:
  1358     006D  2890               	goto	l1899
  1359     006E                     u1550:
  1360     006E                     l1891:
  1361                           
  1362                           ;main.c: 275: motorTarget[0] = (int)generateRandom(-60, 60);
  1363     006E  30C4               	movlw	196
  1364     006F  1283               	bcf	3,5	;RP0=0, select bank0
  1365     0070  00BA               	movwf	generateRandom@min
  1366     0071  30FF               	movlw	255
  1367     0072  00BB               	movwf	generateRandom@min+1
  1368     0073  303C               	movlw	60
  1369     0074  00BC               	movwf	generateRandom@max
  1370     0075  3000               	movlw	0
  1371     0076  00BD               	movwf	generateRandom@max+1
  1372     0077  2520               	fcall	_generateRandom
  1373     0078  1283               	bcf	3,5	;RP0=0, select bank0
  1374     0079  083B               	movf	?_generateRandom+1,w
  1375     007A  00DD               	movwf	_motorTarget+1
  1376     007B  083A               	movf	?_generateRandom,w
  1377     007C  00DC               	movwf	_motorTarget
  1378     007D                     l1893:
  1379                           
  1380                           ;main.c: 276: motorAngle[0] = -60;
  1381     007D  30C4               	movlw	196
  1382     007E  00D4               	movwf	_motorAngle
  1383     007F  30FF               	movlw	255
  1384     0080  00D5               	movwf	_motorAngle+1
  1385     0081                     l1895:
  1386                           
  1387                           ;main.c: 277: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1388     0081  0855               	movf	_motorAngle+1,w
  1389     0082  00AF               	movwf	convertAngle@value+1
  1390     0083  0854               	movf	_motorAngle,w
  1391     0084  00AE               	movwf	convertAngle@value
  1392     0085  2473               	fcall	_convertAngle
  1393     0086  1283               	bcf	3,5	;RP0=0, select bank0
  1394     0087  00E8               	movwf	_motorRawValueTarget
  1395     0088                     l1897:
  1396                           
  1397                           ;main.c: 278: motorIncrement[0] = calculateSpeedIncrement(0);
  1398     0088  3000               	movlw	0
  1399     0089  2232               	fcall	_calculateSpeedIncrement
  1400     008A  1283               	bcf	3,5	;RP0=0, select bank0
  1401     008B  0843               	movf	?_calculateSpeedIncrement+1,w
  1402     008C  00D9               	movwf	_motorIncrement+1
  1403     008D  0842               	movf	?_calculateSpeedIncrement,w
  1404     008E  00D8               	movwf	_motorIncrement
  1405                           
  1406                           ;main.c: 279: } else if (motorAngle[0] > 60) {
  1407     008F  28D0               	goto	l1913
  1408     0090                     l1899:
  1409     0090  1283               	bcf	3,5	;RP0=0, select bank0
  1410     0091  0855               	movf	_motorAngle+1,w
  1411     0092  3A80               	xorlw	128
  1412     0093  00FF               	movwf	btemp+1
  1413     0094  3080               	movlw	128
  1414     0095  027F               	subwf	btemp+1,w
  1415     0096  1D03               	skipz
  1416     0097  289A               	goto	u1565
  1417     0098  303D               	movlw	61
  1418     0099  0254               	subwf	_motorAngle,w
  1419     009A                     u1565:
  1420     009A  1C03               	skipc
  1421     009B  289D               	goto	u1561
  1422     009C  289E               	goto	u1560
  1423     009D                     u1561:
  1424     009D  28C0               	goto	l1909
  1425     009E                     u1560:
  1426     009E                     l1901:
  1427                           
  1428                           ;main.c: 280: motorTarget[0] = (int)generateRandom(-60, 60);
  1429     009E  30C4               	movlw	196
  1430     009F  1283               	bcf	3,5	;RP0=0, select bank0
  1431     00A0  00BA               	movwf	generateRandom@min
  1432     00A1  30FF               	movlw	255
  1433     00A2  00BB               	movwf	generateRandom@min+1
  1434     00A3  303C               	movlw	60
  1435     00A4  00BC               	movwf	generateRandom@max
  1436     00A5  3000               	movlw	0
  1437     00A6  00BD               	movwf	generateRandom@max+1
  1438     00A7  2520               	fcall	_generateRandom
  1439     00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1440     00A9  083B               	movf	?_generateRandom+1,w
  1441     00AA  00DD               	movwf	_motorTarget+1
  1442     00AB  083A               	movf	?_generateRandom,w
  1443     00AC  00DC               	movwf	_motorTarget
  1444     00AD                     l1903:
  1445                           
  1446                           ;main.c: 281: motorAngle[0] = 60;
  1447     00AD  303C               	movlw	60
  1448     00AE  00D4               	movwf	_motorAngle
  1449     00AF  3000               	movlw	0
  1450     00B0  00D5               	movwf	_motorAngle+1
  1451     00B1                     l1905:
  1452                           
  1453                           ;main.c: 282: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1454     00B1  0855               	movf	_motorAngle+1,w
  1455     00B2  00AF               	movwf	convertAngle@value+1
  1456     00B3  0854               	movf	_motorAngle,w
  1457     00B4  00AE               	movwf	convertAngle@value
  1458     00B5  2473               	fcall	_convertAngle
  1459     00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1460     00B7  00E8               	movwf	_motorRawValueTarget
  1461     00B8                     l1907:
  1462                           
  1463                           ;main.c: 283: motorIncrement[0] = calculateSpeedIncrement(0);
  1464     00B8  3000               	movlw	0
  1465     00B9  2232               	fcall	_calculateSpeedIncrement
  1466     00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1467     00BB  0843               	movf	?_calculateSpeedIncrement+1,w
  1468     00BC  00D9               	movwf	_motorIncrement+1
  1469     00BD  0842               	movf	?_calculateSpeedIncrement,w
  1470     00BE  00D8               	movwf	_motorIncrement
  1471                           
  1472                           ;main.c: 284: } else {
  1473     00BF  28D0               	goto	l1913
  1474     00C0                     l1909:
  1475                           
  1476                           ;main.c: 285: motorAngle[0] = motorAngle[0] + motorIncrement[0];
  1477     00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1478     00C1  0858               	movf	_motorIncrement,w
  1479     00C2  0754               	addwf	_motorAngle,w
  1480     00C3  00D4               	movwf	_motorAngle
  1481     00C4  0859               	movf	_motorIncrement+1,w
  1482     00C5  1803               	skipnc
  1483     00C6  0A59               	incf	_motorIncrement+1,w
  1484     00C7  0755               	addwf	_motorAngle+1,w
  1485     00C8  00D5               	movwf	_motorAngle+1
  1486     00C9                     l1911:
  1487                           
  1488                           ;main.c: 286: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1489     00C9  0855               	movf	_motorAngle+1,w
  1490     00CA  00AF               	movwf	convertAngle@value+1
  1491     00CB  0854               	movf	_motorAngle,w
  1492     00CC  00AE               	movwf	convertAngle@value
  1493     00CD  2473               	fcall	_convertAngle
  1494     00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1495     00CF  00E8               	movwf	_motorRawValueTarget
  1496     00D0                     l1913:
  1497                           
  1498                           ;main.c: 287: };main.c: 293: if ((motorIncrement[1] >= 0 && (motorAngle[1] >= motorTarge
      +                          t[1])) ||;main.c: 294: ((motorIncrement[1] < 0 && (motorAngle[1] <= motorTarget[1])))) {
  1499     00D0  1BDB               	btfsc	_motorIncrement+3,7
  1500     00D1  28D3               	goto	u1571
  1501     00D2  28D4               	goto	u1570
  1502     00D3                     u1571:
  1503     00D3  28E2               	goto	l1917
  1504     00D4                     u1570:
  1505     00D4                     l1915:
  1506     00D4  0857               	movf	_motorAngle+3,w
  1507     00D5  3A80               	xorlw	128
  1508     00D6  00D0               	movwf	??_setTorretPosition
  1509     00D7  085F               	movf	_motorTarget+3,w
  1510     00D8  3A80               	xorlw	128
  1511     00D9  0250               	subwf	??_setTorretPosition,w
  1512     00DA  1D03               	skipz
  1513     00DB  28DE               	goto	u1585
  1514     00DC  085E               	movf	_motorTarget+2,w
  1515     00DD  0256               	subwf	_motorAngle+2,w
  1516     00DE                     u1585:
  1517     00DE  1803               	skipnc
  1518     00DF  28E1               	goto	u1581
  1519     00E0  28E2               	goto	u1580
  1520     00E1                     u1581:
  1521     00E1  28FA               	goto	l1921
  1522     00E2                     u1580:
  1523     00E2                     l1917:
  1524     00E2  3002               	movlw	2
  1525     00E3  3E58               	addlw	(low (_motorIncrement| 0))& (0+255)
  1526     00E4  0084               	movwf	4
  1527     00E5  0A84               	incf	4,f
  1528     00E6  1383               	bcf	3,7	;select IRP bank0
  1529     00E7  1F80               	btfss	0,7
  1530     00E8  28EA               	goto	u1591
  1531     00E9  28EB               	goto	u1590
  1532     00EA                     u1591:
  1533     00EA  2911               	goto	l1925
  1534     00EB                     u1590:
  1535     00EB                     l1919:
  1536     00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1537     00EC  085F               	movf	_motorTarget+3,w
  1538     00ED  3A80               	xorlw	128
  1539     00EE  00D0               	movwf	??_setTorretPosition
  1540     00EF  0857               	movf	_motorAngle+3,w
  1541     00F0  3A80               	xorlw	128
  1542     00F1  0250               	subwf	??_setTorretPosition,w
  1543     00F2  1D03               	skipz
  1544     00F3  28F6               	goto	u1605
  1545     00F4  0856               	movf	_motorAngle+2,w
  1546     00F5  025E               	subwf	_motorTarget+2,w
  1547     00F6                     u1605:
  1548     00F6  1C03               	skipc
  1549     00F7  28F9               	goto	u1601
  1550     00F8  28FA               	goto	u1600
  1551     00F9                     u1601:
  1552     00F9  2911               	goto	l1925
  1553     00FA                     u1600:
  1554     00FA                     l1921:
  1555                           
  1556                           ;main.c: 295: motorTarget[1] = (int)generateRandom(-65, -5);
  1557     00FA  30BF               	movlw	191
  1558     00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1559     00FC  00BA               	movwf	generateRandom@min
  1560     00FD  30FF               	movlw	255
  1561     00FE  00BB               	movwf	generateRandom@min+1
  1562     00FF  30FB               	movlw	251
  1563     0100  00BC               	movwf	generateRandom@max
  1564     0101  30FF               	movlw	255
  1565     0102  00BD               	movwf	generateRandom@max+1
  1566     0103  2520               	fcall	_generateRandom
  1567     0104  1283               	bcf	3,5	;RP0=0, select bank0
  1568     0105  083B               	movf	?_generateRandom+1,w
  1569     0106  00DF               	movwf	_motorTarget+3
  1570     0107  083A               	movf	?_generateRandom,w
  1571     0108  00DE               	movwf	_motorTarget+2
  1572     0109                     l1923:
  1573                           
  1574                           ;main.c: 296: motorIncrement[1] = calculateSpeedIncrement(1);
  1575     0109  3001               	movlw	1
  1576     010A  2232               	fcall	_calculateSpeedIncrement
  1577     010B  1283               	bcf	3,5	;RP0=0, select bank0
  1578     010C  0843               	movf	?_calculateSpeedIncrement+1,w
  1579     010D  00DB               	movwf	_motorIncrement+3
  1580     010E  0842               	movf	?_calculateSpeedIncrement,w
  1581     010F  00DA               	movwf	_motorIncrement+2
  1582                           
  1583                           ;main.c: 297: } else if (motorAngle[1] < -65) {
  1584     0110  297A               	goto	l157
  1585     0111                     l1925:
  1586     0111  1283               	bcf	3,5	;RP0=0, select bank0
  1587     0112  0857               	movf	_motorAngle+3,w
  1588     0113  3A80               	xorlw	128
  1589     0114  00FF               	movwf	btemp+1
  1590     0115  307F               	movlw	127
  1591     0116  027F               	subwf	btemp+1,w
  1592     0117  1D03               	skipz
  1593     0118  291B               	goto	u1615
  1594     0119  30BF               	movlw	191
  1595     011A  0256               	subwf	_motorAngle+2,w
  1596     011B                     u1615:
  1597     011B  1803               	skipnc
  1598     011C  291E               	goto	u1611
  1599     011D  291F               	goto	u1610
  1600     011E                     u1611:
  1601     011E  2941               	goto	l1935
  1602     011F                     u1610:
  1603     011F                     l1927:
  1604                           
  1605                           ;main.c: 298: motorTarget[1] = (int)generateRandom(-65, -5);
  1606     011F  30BF               	movlw	191
  1607     0120  1283               	bcf	3,5	;RP0=0, select bank0
  1608     0121  00BA               	movwf	generateRandom@min
  1609     0122  30FF               	movlw	255
  1610     0123  00BB               	movwf	generateRandom@min+1
  1611     0124  30FB               	movlw	251
  1612     0125  00BC               	movwf	generateRandom@max
  1613     0126  30FF               	movlw	255
  1614     0127  00BD               	movwf	generateRandom@max+1
  1615     0128  2520               	fcall	_generateRandom
  1616     0129  1283               	bcf	3,5	;RP0=0, select bank0
  1617     012A  083B               	movf	?_generateRandom+1,w
  1618     012B  00DF               	movwf	_motorTarget+3
  1619     012C  083A               	movf	?_generateRandom,w
  1620     012D  00DE               	movwf	_motorTarget+2
  1621     012E                     l1929:
  1622                           
  1623                           ;main.c: 299: motorAngle[1] = -65;
  1624     012E  30BF               	movlw	191
  1625     012F  00D6               	movwf	_motorAngle+2
  1626     0130  30FF               	movlw	255
  1627     0131  00D7               	movwf	_motorAngle+3
  1628     0132                     l1931:
  1629                           
  1630                           ;main.c: 300: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
  1631     0132  0857               	movf	_motorAngle+3,w
  1632     0133  00AF               	movwf	convertAngle@value+1
  1633     0134  0856               	movf	_motorAngle+2,w
  1634     0135  00AE               	movwf	convertAngle@value
  1635     0136  2473               	fcall	_convertAngle
  1636     0137  1283               	bcf	3,5	;RP0=0, select bank0
  1637     0138  00E9               	movwf	_motorRawValueTarget+1
  1638     0139                     l1933:
  1639                           
  1640                           ;main.c: 301: motorIncrement[1] = calculateSpeedIncrement(1);
  1641     0139  3001               	movlw	1
  1642     013A  2232               	fcall	_calculateSpeedIncrement
  1643     013B  1283               	bcf	3,5	;RP0=0, select bank0
  1644     013C  0843               	movf	?_calculateSpeedIncrement+1,w
  1645     013D  00DB               	movwf	_motorIncrement+3
  1646     013E  0842               	movf	?_calculateSpeedIncrement,w
  1647     013F  00DA               	movwf	_motorIncrement+2
  1648                           
  1649                           ;main.c: 302: } else if (motorAngle[1] > -5) {
  1650     0140  297A               	goto	l157
  1651     0141                     l1935:
  1652     0141  1283               	bcf	3,5	;RP0=0, select bank0
  1653     0142  0857               	movf	_motorAngle+3,w
  1654     0143  3A80               	xorlw	128
  1655     0144  00FF               	movwf	btemp+1
  1656     0145  307F               	movlw	127
  1657     0146  027F               	subwf	btemp+1,w
  1658     0147  1D03               	skipz
  1659     0148  294B               	goto	u1625
  1660     0149  30FC               	movlw	252
  1661     014A  0256               	subwf	_motorAngle+2,w
  1662     014B                     u1625:
  1663     014B  1C03               	skipc
  1664     014C  294E               	goto	u1621
  1665     014D  294F               	goto	u1620
  1666     014E                     u1621:
  1667     014E  296A               	goto	l1943
  1668     014F                     u1620:
  1669     014F                     l1937:
  1670                           
  1671                           ;main.c: 303: motorTarget[1] = (int)generateRandom(-65, -5);
  1672     014F  30BF               	movlw	191
  1673     0150  1283               	bcf	3,5	;RP0=0, select bank0
  1674     0151  00BA               	movwf	generateRandom@min
  1675     0152  30FF               	movlw	255
  1676     0153  00BB               	movwf	generateRandom@min+1
  1677     0154  30FB               	movlw	251
  1678     0155  00BC               	movwf	generateRandom@max
  1679     0156  30FF               	movlw	255
  1680     0157  00BD               	movwf	generateRandom@max+1
  1681     0158  2520               	fcall	_generateRandom
  1682     0159  1283               	bcf	3,5	;RP0=0, select bank0
  1683     015A  083B               	movf	?_generateRandom+1,w
  1684     015B  00DF               	movwf	_motorTarget+3
  1685     015C  083A               	movf	?_generateRandom,w
  1686     015D  00DE               	movwf	_motorTarget+2
  1687     015E                     l1939:
  1688                           
  1689                           ;main.c: 304: motorAngle[1] = -5;
  1690     015E  30FB               	movlw	251
  1691     015F  00D6               	movwf	_motorAngle+2
  1692     0160  30FF               	movlw	255
  1693     0161  00D7               	movwf	_motorAngle+3
  1694     0162                     l1941:
  1695                           
  1696                           ;main.c: 305: motorIncrement[1] = calculateSpeedIncrement(1);
  1697     0162  3001               	movlw	1
  1698     0163  2232               	fcall	_calculateSpeedIncrement
  1699     0164  1283               	bcf	3,5	;RP0=0, select bank0
  1700     0165  0843               	movf	?_calculateSpeedIncrement+1,w
  1701     0166  00DB               	movwf	_motorIncrement+3
  1702     0167  0842               	movf	?_calculateSpeedIncrement,w
  1703     0168  00DA               	movwf	_motorIncrement+2
  1704                           
  1705                           ;main.c: 306: } else {
  1706     0169  297A               	goto	l157
  1707     016A                     l1943:
  1708                           
  1709                           ;main.c: 307: motorAngle[1] = motorAngle[1] + motorIncrement[1];
  1710     016A  1283               	bcf	3,5	;RP0=0, select bank0
  1711     016B  085A               	movf	_motorIncrement+2,w
  1712     016C  0756               	addwf	_motorAngle+2,w
  1713     016D  00D6               	movwf	_motorAngle+2
  1714     016E  085B               	movf	_motorIncrement+3,w
  1715     016F  1803               	skipnc
  1716     0170  0A5B               	incf	_motorIncrement+3,w
  1717     0171  0757               	addwf	_motorAngle+3,w
  1718     0172  00D7               	movwf	_motorAngle+3
  1719     0173                     l1945:
  1720                           
  1721                           ;main.c: 308: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
  1722     0173  0857               	movf	_motorAngle+3,w
  1723     0174  00AF               	movwf	convertAngle@value+1
  1724     0175  0856               	movf	_motorAngle+2,w
  1725     0176  00AE               	movwf	convertAngle@value
  1726     0177  2473               	fcall	_convertAngle
  1727     0178  1283               	bcf	3,5	;RP0=0, select bank0
  1728     0179  00E9               	movwf	_motorRawValueTarget+1
  1729     017A                     l157:
  1730     017A  0008               	return
  1731     017B                     __end_of_setTorretPosition:
  1732                           
  1733                           	psect	text7
  1734     0473                     __ptext7:	
  1735 ;; *************** function _convertAngle *****************
  1736 ;; Defined at:
  1737 ;;		line 236 in file "main.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  value           2   14[BANK0 ] int 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  temp            2   16[BANK0 ] int 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      unsigned char 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1
  1751 ;;      Params:         0       2       0
  1752 ;;      Locals:         0       2       0
  1753 ;;      Temps:          0       0       0
  1754 ;;      Totals:         0       4       0
  1755 ;;Total ram usage:        4 bytes
  1756 ;; Hardware stack levels used: 1
  1757 ;; Hardware stack levels required when called: 3
  1758 ;; This function calls:
  1759 ;;		___awdiv
  1760 ;;		___wmul
  1761 ;; This function is called by:
  1762 ;;		_setTorretPosition
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767     0473                     _convertAngle:	
  1768                           ;psect for function _convertAngle
  1769                           
  1770     0473                     l1809:	
  1771                           ;incstack = 0
  1772                           ; Regs used in _convertAngle: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1773                           
  1774                           
  1775                           ;main.c: 237: int temp;;main.c: 238: if (value < -90) {
  1776     0473  1283               	bcf	3,5	;RP0=0, select bank0
  1777     0474  082F               	movf	convertAngle@value+1,w
  1778     0475  3A80               	xorlw	128
  1779     0476  00FF               	movwf	btemp+1
  1780     0477  307F               	movlw	127
  1781     0478  027F               	subwf	btemp+1,w
  1782     0479  1D03               	skipz
  1783     047A  2C7D               	goto	u1465
  1784     047B  30A6               	movlw	166
  1785     047C  022E               	subwf	convertAngle@value,w
  1786     047D                     u1465:
  1787     047D  1803               	skipnc
  1788     047E  2C80               	goto	u1461
  1789     047F  2C81               	goto	u1460
  1790     0480                     u1461:
  1791     0480  2C87               	goto	l1813
  1792     0481                     u1460:
  1793     0481                     l1811:
  1794                           
  1795                           ;main.c: 239: value = -90;
  1796     0481  30A6               	movlw	166
  1797     0482  1283               	bcf	3,5	;RP0=0, select bank0
  1798     0483  00AE               	movwf	convertAngle@value
  1799     0484  30FF               	movlw	255
  1800     0485  00AF               	movwf	convertAngle@value+1
  1801                           
  1802                           ;main.c: 240: } else if (value > 90) {
  1803     0486  2C9A               	goto	l1817
  1804     0487                     l1813:
  1805     0487  1283               	bcf	3,5	;RP0=0, select bank0
  1806     0488  082F               	movf	convertAngle@value+1,w
  1807     0489  3A80               	xorlw	128
  1808     048A  00FF               	movwf	btemp+1
  1809     048B  3080               	movlw	128
  1810     048C  027F               	subwf	btemp+1,w
  1811     048D  1D03               	skipz
  1812     048E  2C91               	goto	u1475
  1813     048F  305B               	movlw	91
  1814     0490  022E               	subwf	convertAngle@value,w
  1815     0491                     u1475:
  1816     0491  1C03               	skipc
  1817     0492  2C94               	goto	u1471
  1818     0493  2C95               	goto	u1470
  1819     0494                     u1471:
  1820     0494  2C9A               	goto	l1817
  1821     0495                     u1470:
  1822     0495                     l1815:
  1823                           
  1824                           ;main.c: 241: value = 90;
  1825     0495  305A               	movlw	90
  1826     0496  1283               	bcf	3,5	;RP0=0, select bank0
  1827     0497  00AE               	movwf	convertAngle@value
  1828     0498  3000               	movlw	0
  1829     0499  00AF               	movwf	convertAngle@value+1
  1830     049A                     l1817:
  1831                           
  1832                           ;main.c: 242: };main.c: 243: temp = (value * 255) / (90 - -90) + (127);
  1833     049A  30B4               	movlw	180
  1834     049B  1283               	bcf	3,5	;RP0=0, select bank0
  1835     049C  00A6               	movwf	___awdiv@divisor
  1836     049D  3000               	movlw	0
  1837     049E  00A7               	movwf	___awdiv@divisor+1
  1838     049F  082F               	movf	convertAngle@value+1,w
  1839     04A0  00A1               	movwf	___wmul@multiplier+1
  1840     04A1  082E               	movf	convertAngle@value,w
  1841     04A2  00A0               	movwf	___wmul@multiplier
  1842     04A3  30FF               	movlw	255
  1843     04A4  00A2               	movwf	___wmul@multiplicand
  1844     04A5  3000               	movlw	0
  1845     04A6  00A3               	movwf	___wmul@multiplicand+1
  1846     04A7  24FA               	fcall	___wmul
  1847     04A8  1283               	bcf	3,5	;RP0=0, select bank0
  1848     04A9  0821               	movf	?___wmul+1,w
  1849     04AA  00A9               	movwf	___awdiv@dividend+1
  1850     04AB  0820               	movf	?___wmul,w
  1851     04AC  00A8               	movwf	___awdiv@dividend
  1852     04AD  2317               	fcall	___awdiv
  1853     04AE  1283               	bcf	3,5	;RP0=0, select bank0
  1854     04AF  0826               	movf	?___awdiv,w
  1855     04B0  3E7F               	addlw	127
  1856     04B1  00B0               	movwf	convertAngle@temp
  1857     04B2  0827               	movf	?___awdiv+1,w
  1858     04B3  1803               	skipnc
  1859     04B4  3E01               	addlw	1
  1860     04B5  3E00               	addlw	0
  1861     04B6  00B1               	movwf	convertAngle@temp+1
  1862     04B7                     l1819:
  1863                           
  1864                           ;main.c: 244: return temp;
  1865     04B7  0830               	movf	convertAngle@temp,w
  1866     04B8                     l127:
  1867     04B8  0008               	return
  1868     04B9                     __end_of_convertAngle:
  1869                           
  1870                           	psect	text8
  1871     04FA                     __ptext8:	
  1872 ;; *************** function ___wmul *****************
  1873 ;; Defined at:
  1874 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\Umul16.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1877 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;  product         2    4[BANK0 ] unsigned int 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  2    0[BANK0 ] unsigned int 
  1882 ;; Registers used:
  1883 ;;		wreg, status,2, status,0
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1
  1889 ;;      Params:         0       4       0
  1890 ;;      Locals:         0       2       0
  1891 ;;      Temps:          0       0       0
  1892 ;;      Totals:         0       6       0
  1893 ;;Total ram usage:        6 bytes
  1894 ;; Hardware stack levels used: 1
  1895 ;; Hardware stack levels required when called: 2
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_convertAngle
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903     04FA                     ___wmul:	
  1904                           ;psect for function ___wmul
  1905                           
  1906     04FA                     l1719:	
  1907                           ;incstack = 0
  1908                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1909                           
  1910     04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1911     04FB  01A4               	clrf	___wmul@product
  1912     04FC  01A5               	clrf	___wmul@product+1
  1913     04FD                     l1721:
  1914     04FD  1C20               	btfss	___wmul@multiplier,0
  1915     04FE  2D00               	goto	u1321
  1916     04FF  2D01               	goto	u1320
  1917     0500                     u1321:
  1918     0500  2D07               	goto	l253
  1919     0501                     u1320:
  1920     0501                     l1723:
  1921     0501  0822               	movf	___wmul@multiplicand,w
  1922     0502  07A4               	addwf	___wmul@product,f
  1923     0503  1803               	skipnc
  1924     0504  0AA5               	incf	___wmul@product+1,f
  1925     0505  0823               	movf	___wmul@multiplicand+1,w
  1926     0506  07A5               	addwf	___wmul@product+1,f
  1927     0507                     l253:
  1928     0507  3001               	movlw	1
  1929     0508                     u1335:
  1930     0508  1003               	clrc
  1931     0509  0DA2               	rlf	___wmul@multiplicand,f
  1932     050A  0DA3               	rlf	___wmul@multiplicand+1,f
  1933     050B  3EFF               	addlw	-1
  1934     050C  1D03               	skipz
  1935     050D  2D08               	goto	u1335
  1936     050E                     l1725:
  1937     050E  3001               	movlw	1
  1938     050F                     u1345:
  1939     050F  1003               	clrc
  1940     0510  0CA1               	rrf	___wmul@multiplier+1,f
  1941     0511  0CA0               	rrf	___wmul@multiplier,f
  1942     0512  3EFF               	addlw	-1
  1943     0513  1D03               	skipz
  1944     0514  2D0F               	goto	u1345
  1945     0515                     l1727:
  1946     0515  0820               	movf	___wmul@multiplier,w
  1947     0516  0421               	iorwf	___wmul@multiplier+1,w
  1948     0517  1D03               	btfss	3,2
  1949     0518  2D1A               	goto	u1351
  1950     0519  2D1B               	goto	u1350
  1951     051A                     u1351:
  1952     051A  2CFD               	goto	l1721
  1953     051B                     u1350:
  1954     051B                     l1729:
  1955     051B  0825               	movf	___wmul@product+1,w
  1956     051C  00A1               	movwf	?___wmul+1
  1957     051D  0824               	movf	___wmul@product,w
  1958     051E  00A0               	movwf	?___wmul
  1959     051F                     l255:
  1960     051F  0008               	return
  1961     0520                     __end_of___wmul:
  1962                           
  1963                           	psect	text9
  1964     0232                     __ptext9:	
  1965 ;; *************** function _calculateSpeedIncrement *****************
  1966 ;; Defined at:
  1967 ;;		line 247 in file "main.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  index           1    wreg     unsigned char 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  index           1   47[BANK0 ] unsigned char 
  1972 ;;  increment       2   45[BANK0 ] int 
  1973 ;;  speed           2   43[BANK0 ] int 
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  2   34[BANK0 ] int 
  1976 ;; Registers used:
  1977 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMMON   BANK0   BANK1
  1983 ;;      Params:         0       2       0
  1984 ;;      Locals:         0       5       0
  1985 ;;      Temps:          0       7       0
  1986 ;;      Totals:         0      14       0
  1987 ;;Total ram usage:       14 bytes
  1988 ;; Hardware stack levels used: 1
  1989 ;; Hardware stack levels required when called: 5
  1990 ;; This function calls:
  1991 ;;		___awdiv
  1992 ;;		_generateRandom
  1993 ;; This function is called by:
  1994 ;;		_setTorretPosition
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998     0232                     _calculateSpeedIncrement:	
  1999                           ;psect for function _calculateSpeedIncrement
  2000                           
  2001                           
  2002                           ;incstack = 0
  2003                           ; Regs used in _calculateSpeedIncrement: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  2004                           ;calculateSpeedIncrement@index stored from wreg
  2005     0232  1283               	bcf	3,5	;RP0=0, select bank0
  2006     0233  00CF               	movwf	calculateSpeedIncrement@index
  2007     0234                     l1823:
  2008                           
  2009                           ;main.c: 248: int increment;;main.c: 249: int speed;;main.c: 251: if (index > (2 - 1)) {
  2010     0234  3002               	movlw	2
  2011     0235  024F               	subwf	calculateSpeedIncrement@index,w
  2012     0236  1C03               	skipc
  2013     0237  2A39               	goto	u1481
  2014     0238  2A3A               	goto	u1480
  2015     0239                     u1481:
  2016     0239  2A3D               	goto	l1829
  2017     023A                     u1480:
  2018     023A                     l1825:
  2019                           
  2020                           ;main.c: 252: return 0;
  2021     023A  01C2               	clrf	?_calculateSpeedIncrement
  2022     023B  01C3               	clrf	?_calculateSpeedIncrement+1
  2023     023C  2AAD               	goto	l131
  2024     023D                     l1829:
  2025                           
  2026                           ;main.c: 253: };main.c: 254: speed = (uint8_t)generateRandom(15, 30);
  2027     023D  300F               	movlw	15
  2028     023E  00BA               	movwf	generateRandom@min
  2029     023F  3000               	movlw	0
  2030     0240  00BB               	movwf	generateRandom@min+1
  2031     0241  301E               	movlw	30
  2032     0242  00BC               	movwf	generateRandom@max
  2033     0243  3000               	movlw	0
  2034     0244  00BD               	movwf	generateRandom@max+1
  2035     0245  2520               	fcall	_generateRandom
  2036     0246  1283               	bcf	3,5	;RP0=0, select bank0
  2037     0247  083A               	movf	?_generateRandom,w
  2038     0248  00C4               	movwf	??_calculateSpeedIncrement
  2039     0249  01C5               	clrf	??_calculateSpeedIncrement+1
  2040     024A  0844               	movf	??_calculateSpeedIncrement,w
  2041     024B  00CB               	movwf	calculateSpeedIncrement@speed
  2042     024C  0845               	movf	??_calculateSpeedIncrement+1,w
  2043     024D  00CC               	movwf	calculateSpeedIncrement@speed+1
  2044     024E                     l1831:
  2045                           
  2046                           ;main.c: 255: increment = (motorTarget[index] - motorAngle[index]) / speed;
  2047     024E  084C               	movf	calculateSpeedIncrement@speed+1,w
  2048     024F  00A7               	movwf	___awdiv@divisor+1
  2049     0250  084B               	movf	calculateSpeedIncrement@speed,w
  2050     0251  00A6               	movwf	___awdiv@divisor
  2051     0252  084F               	movf	calculateSpeedIncrement@index,w
  2052     0253  00C4               	movwf	??_calculateSpeedIncrement
  2053     0254  0744               	addwf	??_calculateSpeedIncrement,w
  2054     0255  3E54               	addlw	(low (_motorAngle| 0))& (0+255)
  2055     0256  0084               	movwf	4
  2056     0257  1383               	bcf	3,7	;select IRP bank0
  2057     0258  0800               	movf	0,w
  2058     0259  00C5               	movwf	??_calculateSpeedIncrement+1
  2059     025A  0A84               	incf	4,f
  2060     025B  0800               	movf	0,w
  2061     025C  00C6               	movwf	??_calculateSpeedIncrement+2
  2062     025D  084F               	movf	calculateSpeedIncrement@index,w
  2063     025E  00C7               	movwf	??_calculateSpeedIncrement+3
  2064     025F  0747               	addwf	??_calculateSpeedIncrement+3,w
  2065     0260  3E5C               	addlw	(low (_motorTarget| 0))& (0+255)
  2066     0261  0084               	movwf	4
  2067     0262  0800               	movf	0,w
  2068     0263  00C8               	movwf	??_calculateSpeedIncrement+4
  2069     0264  0A84               	incf	4,f
  2070     0265  0800               	movf	0,w
  2071     0266  00C9               	movwf	??_calculateSpeedIncrement+5
  2072     0267  0845               	movf	??_calculateSpeedIncrement+1,w
  2073     0268  0248               	subwf	??_calculateSpeedIncrement+4,w
  2074     0269  00A8               	movwf	___awdiv@dividend
  2075     026A  0846               	movf	??_calculateSpeedIncrement+2,w
  2076     026B  1C03               	skipc
  2077     026C  0A46               	incf	??_calculateSpeedIncrement+2,w
  2078     026D  0249               	subwf	??_calculateSpeedIncrement+5,w
  2079     026E  00A9               	movwf	___awdiv@dividend+1
  2080     026F  2317               	fcall	___awdiv
  2081     0270  1283               	bcf	3,5	;RP0=0, select bank0
  2082     0271  0827               	movf	?___awdiv+1,w
  2083     0272  00CE               	movwf	calculateSpeedIncrement@increment+1
  2084     0273  0826               	movf	?___awdiv,w
  2085     0274  00CD               	movwf	calculateSpeedIncrement@increment
  2086     0275                     l1833:
  2087                           
  2088                           ;main.c: 256: if (increment == 0) {
  2089     0275  084D               	movf	calculateSpeedIncrement@increment,w
  2090     0276  044E               	iorwf	calculateSpeedIncrement@increment+1,w
  2091     0277  1D03               	btfss	3,2
  2092     0278  2A7A               	goto	u1491
  2093     0279  2A7B               	goto	u1490
  2094     027A                     u1491:
  2095     027A  2AA9               	goto	l132
  2096     027B                     u1490:
  2097     027B                     l1835:
  2098                           
  2099                           ;main.c: 257: if (motorTarget[index] > motorAngle[index]) {
  2100     027B  084F               	movf	calculateSpeedIncrement@index,w
  2101     027C  00C4               	movwf	??_calculateSpeedIncrement
  2102     027D  0744               	addwf	??_calculateSpeedIncrement,w
  2103     027E  3E5C               	addlw	(low (_motorTarget| 0))& (0+255)
  2104     027F  0084               	movwf	4
  2105     0280  1383               	bcf	3,7	;select IRP bank0
  2106     0281  0800               	movf	0,w
  2107     0282  00C5               	movwf	??_calculateSpeedIncrement+1
  2108     0283  0A84               	incf	4,f
  2109     0284  0800               	movf	0,w
  2110     0285  00C6               	movwf	??_calculateSpeedIncrement+2
  2111     0286  084F               	movf	calculateSpeedIncrement@index,w
  2112     0287  00C7               	movwf	??_calculateSpeedIncrement+3
  2113     0288  0747               	addwf	??_calculateSpeedIncrement+3,w
  2114     0289  3E54               	addlw	(low (_motorAngle| 0))& (0+255)
  2115     028A  0084               	movwf	4
  2116     028B  0800               	movf	0,w
  2117     028C  00C8               	movwf	??_calculateSpeedIncrement+4
  2118     028D  0A84               	incf	4,f
  2119     028E  0800               	movf	0,w
  2120     028F  00C9               	movwf	??_calculateSpeedIncrement+5
  2121     0290  0849               	movf	??_calculateSpeedIncrement+5,w
  2122     0291  3A80               	xorlw	128
  2123     0292  00CA               	movwf	??_calculateSpeedIncrement+6
  2124     0293  0846               	movf	??_calculateSpeedIncrement+2,w
  2125     0294  3A80               	xorlw	128
  2126     0295  024A               	subwf	??_calculateSpeedIncrement+6,w
  2127     0296  1D03               	skipz
  2128     0297  2A9A               	goto	u1505
  2129     0298  0845               	movf	??_calculateSpeedIncrement+1,w
  2130     0299  0248               	subwf	??_calculateSpeedIncrement+4,w
  2131     029A                     u1505:
  2132     029A  1803               	skipnc
  2133     029B  2A9D               	goto	u1501
  2134     029C  2A9E               	goto	u1500
  2135     029D                     u1501:
  2136     029D  2AA4               	goto	l1839
  2137     029E                     u1500:
  2138     029E                     l1837:
  2139                           
  2140                           ;main.c: 258: increment = 1;
  2141     029E  3001               	movlw	1
  2142     029F  1283               	bcf	3,5	;RP0=0, select bank0
  2143     02A0  00CD               	movwf	calculateSpeedIncrement@increment
  2144     02A1  3000               	movlw	0
  2145     02A2  00CE               	movwf	calculateSpeedIncrement@increment+1
  2146                           
  2147                           ;main.c: 259: } else {
  2148     02A3  2AA9               	goto	l132
  2149     02A4                     l1839:
  2150                           
  2151                           ;main.c: 260: increment = -1;
  2152     02A4  30FF               	movlw	255
  2153     02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2154     02A6  00CD               	movwf	calculateSpeedIncrement@increment
  2155     02A7  30FF               	movlw	255
  2156     02A8  00CE               	movwf	calculateSpeedIncrement@increment+1
  2157     02A9                     l132:
  2158                           
  2159                           ;main.c: 261: };main.c: 262: };main.c: 263: return increment;
  2160     02A9  084E               	movf	calculateSpeedIncrement@increment+1,w
  2161     02AA  00C3               	movwf	?_calculateSpeedIncrement+1
  2162     02AB  084D               	movf	calculateSpeedIncrement@increment,w
  2163     02AC  00C2               	movwf	?_calculateSpeedIncrement
  2164     02AD                     l131:
  2165     02AD  0008               	return
  2166     02AE                     __end_of_calculateSpeedIncrement:
  2167                           
  2168                           	psect	text10
  2169     0520                     __ptext10:	
  2170 ;; *************** function _generateRandom *****************
  2171 ;; Defined at:
  2172 ;;		line 228 in file "main.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  min             2   26[BANK0 ] int 
  2175 ;;  max             2   28[BANK0 ] int 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  randomNumber    2   32[BANK0 ] int 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  2   26[BANK0 ] int 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1
  2187 ;;      Params:         0       4       0
  2188 ;;      Locals:         0       2       0
  2189 ;;      Temps:          0       2       0
  2190 ;;      Totals:         0       8       0
  2191 ;;Total ram usage:        8 bytes
  2192 ;; Hardware stack levels used: 1
  2193 ;; Hardware stack levels required when called: 4
  2194 ;; This function calls:
  2195 ;;		___awmod
  2196 ;;		_rand
  2197 ;; This function is called by:
  2198 ;;		_calculateSpeedIncrement
  2199 ;;		_setTorretPosition
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203     0520                     _generateRandom:	
  2204                           ;psect for function _generateRandom
  2205                           
  2206     0520                     l1711:	
  2207                           ;incstack = 0
  2208                           ; Regs used in _generateRandom: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2209                           
  2210     0520                     l1713:
  2211                           
  2212                           ;main.c: 231: randomNumber = (rand() % (max - min + 1)) +;main.c: 232: min;
  2213     0520  1283               	bcf	3,5	;RP0=0, select bank0
  2214     0521  083A               	movf	generateRandom@min,w
  2215     0522  023C               	subwf	generateRandom@max,w
  2216     0523  00BE               	movwf	??_generateRandom
  2217     0524  083B               	movf	generateRandom@min+1,w
  2218     0525  1C03               	skipc
  2219     0526  0A3B               	incf	generateRandom@min+1,w
  2220     0527  023D               	subwf	generateRandom@max+1,w
  2221     0528  00BF               	movwf	??_generateRandom+1
  2222     0529  083E               	movf	??_generateRandom,w
  2223     052A  3E01               	addlw	1
  2224     052B  00B4               	movwf	___awmod@divisor
  2225     052C  083F               	movf	??_generateRandom+1,w
  2226     052D  1803               	skipnc
  2227     052E  3E01               	addlw	1
  2228     052F  3E00               	addlw	0
  2229     0530  00B5               	movwf	___awmod@divisor+1
  2230     0531  24B9               	fcall	_rand
  2231     0532  1283               	bcf	3,5	;RP0=0, select bank0
  2232     0533  082E               	movf	?_rand+1,w
  2233     0534  00B7               	movwf	___awmod@dividend+1
  2234     0535  082D               	movf	?_rand,w
  2235     0536  00B6               	movwf	___awmod@dividend
  2236     0537  237F               	fcall	___awmod
  2237     0538  1283               	bcf	3,5	;RP0=0, select bank0
  2238     0539  083A               	movf	generateRandom@min,w
  2239     053A  0734               	addwf	?___awmod,w
  2240     053B  00C0               	movwf	generateRandom@randomNumber
  2241     053C  083B               	movf	generateRandom@min+1,w
  2242     053D  1803               	skipnc
  2243     053E  0A3B               	incf	generateRandom@min+1,w
  2244     053F  0735               	addwf	?___awmod+1,w
  2245     0540  00C1               	movwf	generateRandom@randomNumber+1
  2246     0541                     l1715:
  2247                           
  2248                           ;main.c: 233: return randomNumber;
  2249     0541  0841               	movf	generateRandom@randomNumber+1,w
  2250     0542  00BB               	movwf	?_generateRandom+1
  2251     0543  0840               	movf	generateRandom@randomNumber,w
  2252     0544  00BA               	movwf	?_generateRandom
  2253     0545                     l121:
  2254     0545  0008               	return
  2255     0546                     __end_of_generateRandom:
  2256                           
  2257                           	psect	text11
  2258     04B9                     __ptext11:	
  2259 ;; *************** function _rand *****************
  2260 ;; Defined at:
  2261 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\rand.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2   13[BANK0 ] int 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1
  2275 ;;      Params:         0       2       0
  2276 ;;      Locals:         0       0       0
  2277 ;;      Temps:          0       5       0
  2278 ;;      Totals:         0       7       0
  2279 ;;Total ram usage:        7 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; Hardware stack levels required when called: 3
  2282 ;; This function calls:
  2283 ;;		___lmul
  2284 ;; This function is called by:
  2285 ;;		_generateRandom
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289     04B9                     _rand:	
  2290                           ;psect for function _rand
  2291                           
  2292     04B9                     l1665:	
  2293                           ;incstack = 0
  2294                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2295                           
  2296     04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2297     04BA  086E               	movf	_randx+3,w
  2298     04BB  00A3               	movwf	___lmul@multiplier+3
  2299     04BC  086D               	movf	_randx+2,w
  2300     04BD  00A2               	movwf	___lmul@multiplier+2
  2301     04BE  086C               	movf	_randx+1,w
  2302     04BF  00A1               	movwf	___lmul@multiplier+1
  2303     04C0  086B               	movf	_randx,w
  2304     04C1  00A0               	movwf	___lmul@multiplier
  2305     04C2  3041               	movlw	65
  2306     04C3  00A7               	movwf	___lmul@multiplicand+3
  2307     04C4  30C6               	movlw	198
  2308     04C5  00A6               	movwf	___lmul@multiplicand+2
  2309     04C6  304E               	movlw	78
  2310     04C7  00A5               	movwf	___lmul@multiplicand+1
  2311     04C8  306D               	movlw	109
  2312     04C9  00A4               	movwf	___lmul@multiplicand
  2313     04CA  242C               	fcall	___lmul
  2314     04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2315     04CC  0823               	movf	?___lmul+3,w
  2316     04CD  00EE               	movwf	_randx+3
  2317     04CE  0822               	movf	?___lmul+2,w
  2318     04CF  00ED               	movwf	_randx+2
  2319     04D0  0821               	movf	?___lmul+1,w
  2320     04D1  00EC               	movwf	_randx+1
  2321     04D2  0820               	movf	?___lmul,w
  2322     04D3  00EB               	movwf	_randx
  2323     04D4                     l1667:
  2324     04D4  3039               	movlw	57
  2325     04D5  07EB               	addwf	_randx,f
  2326     04D6  3030               	movlw	48
  2327     04D7  1803               	skipnc
  2328     04D8  3031               	movlw	49
  2329     04D9  07EC               	addwf	_randx+1,f
  2330     04DA  3000               	movlw	0
  2331     04DB  1803               	skipnc
  2332     04DC  3001               	movlw	1
  2333     04DD  07ED               	addwf	_randx+2,f
  2334     04DE  3000               	movlw	0
  2335     04DF  1803               	skipnc
  2336     04E0  3001               	movlw	1
  2337     04E1  07EE               	addwf	_randx+3,f
  2338     04E2                     l1669:
  2339     04E2  086B               	movf	_randx,w
  2340     04E3  00AF               	movwf	??_rand
  2341     04E4  086C               	movf	_randx+1,w
  2342     04E5  00B0               	movwf	??_rand+1
  2343     04E6  086D               	movf	_randx+2,w
  2344     04E7  00B1               	movwf	??_rand+2
  2345     04E8  086E               	movf	_randx+3,w
  2346     04E9  00B2               	movwf	??_rand+3
  2347     04EA  3010               	movlw	16
  2348     04EB  00B3               	movwf	??_rand+4
  2349     04EC                     u1225:
  2350     04EC  0D32               	rlf	??_rand+3,w
  2351     04ED  0CB2               	rrf	??_rand+3,f
  2352     04EE  0CB1               	rrf	??_rand+2,f
  2353     04EF  0CB0               	rrf	??_rand+1,f
  2354     04F0  0CAF               	rrf	??_rand,f
  2355     04F1                     u1220:
  2356     04F1  0BB3               	decfsz	??_rand+4,f
  2357     04F2  2CEC               	goto	u1225
  2358     04F3  30FF               	movlw	255
  2359     04F4  052F               	andwf	??_rand,w
  2360     04F5  00AD               	movwf	?_rand
  2361     04F6  307F               	movlw	127
  2362     04F7  0530               	andwf	??_rand+1,w
  2363     04F8  00AE               	movwf	?_rand+1
  2364     04F9                     l709:
  2365     04F9  0008               	return
  2366     04FA                     __end_of_rand:
  2367                           
  2368                           	psect	text12
  2369     042C                     __ptext12:	
  2370 ;; *************** function ___lmul *****************
  2371 ;; Defined at:
  2372 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\Umul32.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2375 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  product         4    9[BANK0 ] unsigned long 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  4    0[BANK0 ] unsigned long 
  2380 ;; Registers used:
  2381 ;;		wreg, status,2, status,0
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMMON   BANK0   BANK1
  2387 ;;      Params:         0       8       0
  2388 ;;      Locals:         0       4       0
  2389 ;;      Temps:          0       1       0
  2390 ;;      Totals:         0      13       0
  2391 ;;Total ram usage:       13 bytes
  2392 ;; Hardware stack levels used: 1
  2393 ;; Hardware stack levels required when called: 2
  2394 ;; This function calls:
  2395 ;;		Nothing
  2396 ;; This function is called by:
  2397 ;;		_rand
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401     042C                     ___lmul:	
  2402                           ;psect for function ___lmul
  2403                           
  2404     042C                     l1651:	
  2405                           ;incstack = 0
  2406                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2407                           
  2408     042C  3000               	movlw	0
  2409     042D  1283               	bcf	3,5	;RP0=0, select bank0
  2410     042E  00AC               	movwf	___lmul@product+3
  2411     042F  3000               	movlw	0
  2412     0430  00AB               	movwf	___lmul@product+2
  2413     0431  3000               	movlw	0
  2414     0432  00AA               	movwf	___lmul@product+1
  2415     0433  3000               	movlw	0
  2416     0434  00A9               	movwf	___lmul@product
  2417     0435                     l1653:
  2418     0435  1C20               	btfss	___lmul@multiplier,0
  2419     0436  2C38               	goto	u1171
  2420     0437  2C39               	goto	u1170
  2421     0438                     u1171:
  2422     0438  2C50               	goto	l1657
  2423     0439                     u1170:
  2424     0439                     l1655:
  2425     0439  0824               	movf	___lmul@multiplicand,w
  2426     043A  07A9               	addwf	___lmul@product,f
  2427     043B  0825               	movf	___lmul@multiplicand+1,w
  2428     043C  1103               	clrz
  2429     043D  1803               	skipnc
  2430     043E  3E01               	addlw	1
  2431     043F  1903               	skipnz
  2432     0440  2C42               	goto	u1181
  2433     0441  07AA               	addwf	___lmul@product+1,f
  2434     0442                     u1181:
  2435     0442  0826               	movf	___lmul@multiplicand+2,w
  2436     0443  1103               	clrz
  2437     0444  1803               	skipnc
  2438     0445  3E01               	addlw	1
  2439     0446  1903               	skipnz
  2440     0447  2C49               	goto	u1182
  2441     0448  07AB               	addwf	___lmul@product+2,f
  2442     0449                     u1182:
  2443     0449  0827               	movf	___lmul@multiplicand+3,w
  2444     044A  1103               	clrz
  2445     044B  1803               	skipnc
  2446     044C  3E01               	addlw	1
  2447     044D  1903               	skipnz
  2448     044E  2C50               	goto	u1183
  2449     044F  07AC               	addwf	___lmul@product+3,f
  2450     0450                     u1183:
  2451     0450                     l1657:
  2452     0450  3001               	movlw	1
  2453     0451  00A8               	movwf	??___lmul
  2454     0452                     u1195:
  2455     0452  1003               	clrc
  2456     0453  0DA4               	rlf	___lmul@multiplicand,f
  2457     0454  0DA5               	rlf	___lmul@multiplicand+1,f
  2458     0455  0DA6               	rlf	___lmul@multiplicand+2,f
  2459     0456  0DA7               	rlf	___lmul@multiplicand+3,f
  2460     0457  0BA8               	decfsz	??___lmul,f
  2461     0458  2C52               	goto	u1195
  2462     0459                     l1659:
  2463     0459  3001               	movlw	1
  2464     045A                     u1205:
  2465     045A  1003               	clrc
  2466     045B  0CA3               	rrf	___lmul@multiplier+3,f
  2467     045C  0CA2               	rrf	___lmul@multiplier+2,f
  2468     045D  0CA1               	rrf	___lmul@multiplier+1,f
  2469     045E  0CA0               	rrf	___lmul@multiplier,f
  2470     045F  3EFF               	addlw	-1
  2471     0460  1D03               	skipz
  2472     0461  2C5A               	goto	u1205
  2473     0462  0823               	movf	___lmul@multiplier+3,w
  2474     0463  0422               	iorwf	___lmul@multiplier+2,w
  2475     0464  0421               	iorwf	___lmul@multiplier+1,w
  2476     0465  0420               	iorwf	___lmul@multiplier,w
  2477     0466  1D03               	skipz
  2478     0467  2C69               	goto	u1211
  2479     0468  2C6A               	goto	u1210
  2480     0469                     u1211:
  2481     0469  2C35               	goto	l1653
  2482     046A                     u1210:
  2483     046A                     l1661:
  2484     046A  082C               	movf	___lmul@product+3,w
  2485     046B  00A3               	movwf	?___lmul+3
  2486     046C  082B               	movf	___lmul@product+2,w
  2487     046D  00A2               	movwf	?___lmul+2
  2488     046E  082A               	movf	___lmul@product+1,w
  2489     046F  00A1               	movwf	?___lmul+1
  2490     0470  0829               	movf	___lmul@product,w
  2491     0471  00A0               	movwf	?___lmul
  2492     0472                     l267:
  2493     0472  0008               	return
  2494     0473                     __end_of___lmul:
  2495                           
  2496                           	psect	text13
  2497     037F                     __ptext13:	
  2498 ;; *************** function ___awmod *****************
  2499 ;; Defined at:
  2500 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\awmod.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  divisor         2   20[BANK0 ] int 
  2503 ;;  dividend        2   22[BANK0 ] int 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  sign            1   25[BANK0 ] unsigned char 
  2506 ;;  counter         1   24[BANK0 ] unsigned char 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  2   20[BANK0 ] int 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0, btemp+1
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMMON   BANK0   BANK1
  2516 ;;      Params:         0       4       0
  2517 ;;      Locals:         0       2       0
  2518 ;;      Temps:          0       0       0
  2519 ;;      Totals:         0       6       0
  2520 ;;Total ram usage:        6 bytes
  2521 ;; Hardware stack levels used: 1
  2522 ;; Hardware stack levels required when called: 2
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_generateRandom
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530     037F                     ___awmod:	
  2531                           ;psect for function ___awmod
  2532                           
  2533     037F                     l1673:	
  2534                           ;incstack = 0
  2535                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2536                           
  2537     037F  1283               	bcf	3,5	;RP0=0, select bank0
  2538     0380  01B9               	clrf	___awmod@sign
  2539     0381                     l1675:
  2540     0381  1FB7               	btfss	___awmod@dividend+1,7
  2541     0382  2B84               	goto	u1231
  2542     0383  2B85               	goto	u1230
  2543     0384                     u1231:
  2544     0384  2B8C               	goto	l1681
  2545     0385                     u1230:
  2546     0385                     l1677:
  2547     0385  09B6               	comf	___awmod@dividend,f
  2548     0386  09B7               	comf	___awmod@dividend+1,f
  2549     0387  0AB6               	incf	___awmod@dividend,f
  2550     0388  1903               	skipnz
  2551     0389  0AB7               	incf	___awmod@dividend+1,f
  2552     038A                     l1679:
  2553     038A  01B9               	clrf	___awmod@sign
  2554     038B  0AB9               	incf	___awmod@sign,f
  2555     038C                     l1681:
  2556     038C  1FB5               	btfss	___awmod@divisor+1,7
  2557     038D  2B8F               	goto	u1241
  2558     038E  2B90               	goto	u1240
  2559     038F                     u1241:
  2560     038F  2B95               	goto	l1685
  2561     0390                     u1240:
  2562     0390                     l1683:
  2563     0390  09B4               	comf	___awmod@divisor,f
  2564     0391  09B5               	comf	___awmod@divisor+1,f
  2565     0392  0AB4               	incf	___awmod@divisor,f
  2566     0393  1903               	skipnz
  2567     0394  0AB5               	incf	___awmod@divisor+1,f
  2568     0395                     l1685:
  2569     0395  0834               	movf	___awmod@divisor,w
  2570     0396  0435               	iorwf	___awmod@divisor+1,w
  2571     0397  1903               	btfsc	3,2
  2572     0398  2B9A               	goto	u1251
  2573     0399  2B9B               	goto	u1250
  2574     039A                     u1251:
  2575     039A  2BCA               	goto	l1703
  2576     039B                     u1250:
  2577     039B                     l1687:
  2578     039B  01B8               	clrf	___awmod@counter
  2579     039C  0AB8               	incf	___awmod@counter,f
  2580     039D  2BA9               	goto	l1693
  2581     039E                     l1689:
  2582     039E  3001               	movlw	1
  2583     039F                     u1265:
  2584     039F  1003               	clrc
  2585     03A0  0DB4               	rlf	___awmod@divisor,f
  2586     03A1  0DB5               	rlf	___awmod@divisor+1,f
  2587     03A2  3EFF               	addlw	-1
  2588     03A3  1D03               	skipz
  2589     03A4  2B9F               	goto	u1265
  2590     03A5                     l1691:
  2591     03A5  3001               	movlw	1
  2592     03A6  00FF               	movwf	btemp+1
  2593     03A7  087F               	movf	btemp+1,w
  2594     03A8  07B8               	addwf	___awmod@counter,f
  2595     03A9                     l1693:
  2596     03A9  1FB5               	btfss	___awmod@divisor+1,7
  2597     03AA  2BAC               	goto	u1271
  2598     03AB  2BAD               	goto	u1270
  2599     03AC                     u1271:
  2600     03AC  2B9E               	goto	l1689
  2601     03AD                     u1270:
  2602     03AD                     l1695:
  2603     03AD  0835               	movf	___awmod@divisor+1,w
  2604     03AE  0237               	subwf	___awmod@dividend+1,w
  2605     03AF  1D03               	skipz
  2606     03B0  2BB3               	goto	u1285
  2607     03B1  0834               	movf	___awmod@divisor,w
  2608     03B2  0236               	subwf	___awmod@dividend,w
  2609     03B3                     u1285:
  2610     03B3  1C03               	skipc
  2611     03B4  2BB6               	goto	u1281
  2612     03B5  2BB7               	goto	u1280
  2613     03B6                     u1281:
  2614     03B6  2BBD               	goto	l1699
  2615     03B7                     u1280:
  2616     03B7                     l1697:
  2617     03B7  0834               	movf	___awmod@divisor,w
  2618     03B8  02B6               	subwf	___awmod@dividend,f
  2619     03B9  0835               	movf	___awmod@divisor+1,w
  2620     03BA  1C03               	skipc
  2621     03BB  03B7               	decf	___awmod@dividend+1,f
  2622     03BC  02B7               	subwf	___awmod@dividend+1,f
  2623     03BD                     l1699:
  2624     03BD  3001               	movlw	1
  2625     03BE                     u1295:
  2626     03BE  1003               	clrc
  2627     03BF  0CB5               	rrf	___awmod@divisor+1,f
  2628     03C0  0CB4               	rrf	___awmod@divisor,f
  2629     03C1  3EFF               	addlw	-1
  2630     03C2  1D03               	skipz
  2631     03C3  2BBE               	goto	u1295
  2632     03C4                     l1701:
  2633     03C4  3001               	movlw	1
  2634     03C5  02B8               	subwf	___awmod@counter,f
  2635     03C6  1D03               	btfss	3,2
  2636     03C7  2BC9               	goto	u1301
  2637     03C8  2BCA               	goto	u1300
  2638     03C9                     u1301:
  2639     03C9  2BAD               	goto	l1695
  2640     03CA                     u1300:
  2641     03CA                     l1703:
  2642     03CA  0839               	movf	___awmod@sign,w
  2643     03CB  1903               	btfsc	3,2
  2644     03CC  2BCE               	goto	u1311
  2645     03CD  2BCF               	goto	u1310
  2646     03CE                     u1311:
  2647     03CE  2BD4               	goto	l1707
  2648     03CF                     u1310:
  2649     03CF                     l1705:
  2650     03CF  09B6               	comf	___awmod@dividend,f
  2651     03D0  09B7               	comf	___awmod@dividend+1,f
  2652     03D1  0AB6               	incf	___awmod@dividend,f
  2653     03D2  1903               	skipnz
  2654     03D3  0AB7               	incf	___awmod@dividend+1,f
  2655     03D4                     l1707:
  2656     03D4  0837               	movf	___awmod@dividend+1,w
  2657     03D5  00B5               	movwf	?___awmod+1
  2658     03D6  0836               	movf	___awmod@dividend,w
  2659     03D7  00B4               	movwf	?___awmod
  2660     03D8                     l419:
  2661     03D8  0008               	return
  2662     03D9                     __end_of___awmod:
  2663                           
  2664                           	psect	text14
  2665     0317                     __ptext14:	
  2666 ;; *************** function ___awdiv *****************
  2667 ;; Defined at:
  2668 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\awdiv.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  divisor         2    6[BANK0 ] int 
  2671 ;;  dividend        2    8[BANK0 ] int 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;  quotient        2   12[BANK0 ] int 
  2674 ;;  sign            1   11[BANK0 ] unsigned char 
  2675 ;;  counter         1   10[BANK0 ] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  2    6[BANK0 ] int 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, btemp+1
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1
  2685 ;;      Params:         0       4       0
  2686 ;;      Locals:         0       4       0
  2687 ;;      Temps:          0       0       0
  2688 ;;      Totals:         0       8       0
  2689 ;;Total ram usage:        8 bytes
  2690 ;; Hardware stack levels used: 1
  2691 ;; Hardware stack levels required when called: 2
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_convertAngle
  2696 ;;		_calculateSpeedIncrement
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700     0317                     ___awdiv:	
  2701                           ;psect for function ___awdiv
  2702                           
  2703     0317                     l1733:	
  2704                           ;incstack = 0
  2705                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  2706                           
  2707     0317  1283               	bcf	3,5	;RP0=0, select bank0
  2708     0318  01AB               	clrf	___awdiv@sign
  2709     0319                     l1735:
  2710     0319  1FA7               	btfss	___awdiv@divisor+1,7
  2711     031A  2B1C               	goto	u1361
  2712     031B  2B1D               	goto	u1360
  2713     031C                     u1361:
  2714     031C  2B24               	goto	l1741
  2715     031D                     u1360:
  2716     031D                     l1737:
  2717     031D  09A6               	comf	___awdiv@divisor,f
  2718     031E  09A7               	comf	___awdiv@divisor+1,f
  2719     031F  0AA6               	incf	___awdiv@divisor,f
  2720     0320  1903               	skipnz
  2721     0321  0AA7               	incf	___awdiv@divisor+1,f
  2722     0322                     l1739:
  2723     0322  01AB               	clrf	___awdiv@sign
  2724     0323  0AAB               	incf	___awdiv@sign,f
  2725     0324                     l1741:
  2726     0324  1FA9               	btfss	___awdiv@dividend+1,7
  2727     0325  2B27               	goto	u1371
  2728     0326  2B28               	goto	u1370
  2729     0327                     u1371:
  2730     0327  2B31               	goto	l1747
  2731     0328                     u1370:
  2732     0328                     l1743:
  2733     0328  09A8               	comf	___awdiv@dividend,f
  2734     0329  09A9               	comf	___awdiv@dividend+1,f
  2735     032A  0AA8               	incf	___awdiv@dividend,f
  2736     032B  1903               	skipnz
  2737     032C  0AA9               	incf	___awdiv@dividend+1,f
  2738     032D                     l1745:
  2739     032D  3001               	movlw	1
  2740     032E  00FF               	movwf	btemp+1
  2741     032F  087F               	movf	btemp+1,w
  2742     0330  06AB               	xorwf	___awdiv@sign,f
  2743     0331                     l1747:
  2744     0331  01AC               	clrf	___awdiv@quotient
  2745     0332  01AD               	clrf	___awdiv@quotient+1
  2746     0333                     l1749:
  2747     0333  0826               	movf	___awdiv@divisor,w
  2748     0334  0427               	iorwf	___awdiv@divisor+1,w
  2749     0335  1903               	btfsc	3,2
  2750     0336  2B38               	goto	u1381
  2751     0337  2B39               	goto	u1380
  2752     0338                     u1381:
  2753     0338  2B70               	goto	l1769
  2754     0339                     u1380:
  2755     0339                     l1751:
  2756     0339  01AA               	clrf	___awdiv@counter
  2757     033A  0AAA               	incf	___awdiv@counter,f
  2758     033B  2B47               	goto	l1757
  2759     033C                     l1753:
  2760     033C  3001               	movlw	1
  2761     033D                     u1395:
  2762     033D  1003               	clrc
  2763     033E  0DA6               	rlf	___awdiv@divisor,f
  2764     033F  0DA7               	rlf	___awdiv@divisor+1,f
  2765     0340  3EFF               	addlw	-1
  2766     0341  1D03               	skipz
  2767     0342  2B3D               	goto	u1395
  2768     0343                     l1755:
  2769     0343  3001               	movlw	1
  2770     0344  00FF               	movwf	btemp+1
  2771     0345  087F               	movf	btemp+1,w
  2772     0346  07AA               	addwf	___awdiv@counter,f
  2773     0347                     l1757:
  2774     0347  1FA7               	btfss	___awdiv@divisor+1,7
  2775     0348  2B4A               	goto	u1401
  2776     0349  2B4B               	goto	u1400
  2777     034A                     u1401:
  2778     034A  2B3C               	goto	l1753
  2779     034B                     u1400:
  2780     034B                     l1759:
  2781     034B  3001               	movlw	1
  2782     034C                     u1415:
  2783     034C  1003               	clrc
  2784     034D  0DAC               	rlf	___awdiv@quotient,f
  2785     034E  0DAD               	rlf	___awdiv@quotient+1,f
  2786     034F  3EFF               	addlw	-1
  2787     0350  1D03               	skipz
  2788     0351  2B4C               	goto	u1415
  2789     0352  0827               	movf	___awdiv@divisor+1,w
  2790     0353  0229               	subwf	___awdiv@dividend+1,w
  2791     0354  1D03               	skipz
  2792     0355  2B58               	goto	u1425
  2793     0356  0826               	movf	___awdiv@divisor,w
  2794     0357  0228               	subwf	___awdiv@dividend,w
  2795     0358                     u1425:
  2796     0358  1C03               	skipc
  2797     0359  2B5B               	goto	u1421
  2798     035A  2B5C               	goto	u1420
  2799     035B                     u1421:
  2800     035B  2B63               	goto	l1765
  2801     035C                     u1420:
  2802     035C                     l1761:
  2803     035C  0826               	movf	___awdiv@divisor,w
  2804     035D  02A8               	subwf	___awdiv@dividend,f
  2805     035E  0827               	movf	___awdiv@divisor+1,w
  2806     035F  1C03               	skipc
  2807     0360  03A9               	decf	___awdiv@dividend+1,f
  2808     0361  02A9               	subwf	___awdiv@dividend+1,f
  2809     0362                     l1763:
  2810     0362  142C               	bsf	___awdiv@quotient,0
  2811     0363                     l1765:
  2812     0363  3001               	movlw	1
  2813     0364                     u1435:
  2814     0364  1003               	clrc
  2815     0365  0CA7               	rrf	___awdiv@divisor+1,f
  2816     0366  0CA6               	rrf	___awdiv@divisor,f
  2817     0367  3EFF               	addlw	-1
  2818     0368  1D03               	skipz
  2819     0369  2B64               	goto	u1435
  2820     036A                     l1767:
  2821     036A  3001               	movlw	1
  2822     036B  02AA               	subwf	___awdiv@counter,f
  2823     036C  1D03               	btfss	3,2
  2824     036D  2B6F               	goto	u1441
  2825     036E  2B70               	goto	u1440
  2826     036F                     u1441:
  2827     036F  2B4B               	goto	l1759
  2828     0370                     u1440:
  2829     0370                     l1769:
  2830     0370  082B               	movf	___awdiv@sign,w
  2831     0371  1903               	btfsc	3,2
  2832     0372  2B74               	goto	u1451
  2833     0373  2B75               	goto	u1450
  2834     0374                     u1451:
  2835     0374  2B7A               	goto	l1773
  2836     0375                     u1450:
  2837     0375                     l1771:
  2838     0375  09AC               	comf	___awdiv@quotient,f
  2839     0376  09AD               	comf	___awdiv@quotient+1,f
  2840     0377  0AAC               	incf	___awdiv@quotient,f
  2841     0378  1903               	skipnz
  2842     0379  0AAD               	incf	___awdiv@quotient+1,f
  2843     037A                     l1773:
  2844     037A  082D               	movf	___awdiv@quotient+1,w
  2845     037B  00A7               	movwf	?___awdiv+1
  2846     037C  082C               	movf	___awdiv@quotient,w
  2847     037D  00A6               	movwf	?___awdiv
  2848     037E                     l406:
  2849     037E  0008               	return
  2850     037F                     __end_of___awdiv:
  2851                           
  2852                           	psect	text15
  2853     03D9                     __ptext15:	
  2854 ;; *************** function _myISR *****************
  2855 ;; Defined at:
  2856 ;;		line 81 in file "main.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;		None
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;		None
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMMON   BANK0   BANK1
  2870 ;;      Params:         0       0       0
  2871 ;;      Locals:         0       0       0
  2872 ;;      Temps:          4       0       0
  2873 ;;      Totals:         4       0       0
  2874 ;;Total ram usage:        4 bytes
  2875 ;; Hardware stack levels used: 1
  2876 ;; Hardware stack levels required when called: 1
  2877 ;; This function calls:
  2878 ;;		_timer1InterruptHandler
  2879 ;; This function is called by:
  2880 ;;		Interrupt level 1
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884     03D9                     _myISR:	
  2885                           ;psect for function _myISR
  2886                           
  2887     03D9                     i1l1555:
  2888                           
  2889                           ;main.c: 82: if (INTCONbits.TMR0IF) {
  2890     03D9  1D0B               	btfss	11,2	;volatile
  2891     03DA  2BDC               	goto	u108_21
  2892     03DB  2BDD               	goto	u108_20
  2893     03DC                     u108_21:
  2894     03DC  2C10               	goto	i1l87
  2895     03DD                     u108_20:
  2896     03DD                     i1l1557:
  2897                           
  2898                           ;main.c: 83: INTCONbits.TMR0IF = 0;
  2899     03DD  110B               	bcf	11,2	;volatile
  2900     03DE                     i1l1559:
  2901                           
  2902                           ;main.c: 84: TMR0 = 178;
  2903     03DE  30B2               	movlw	178
  2904     03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2905     03E0  0081               	movwf	1	;volatile
  2906                           
  2907                           ;main.c: 85: overflow_count++;
  2908     03E1  3001               	movlw	1
  2909     03E2  07E0               	addwf	_overflow_count,f	;volatile
  2910     03E3  1803               	skipnc
  2911     03E4  0AE1               	incf	_overflow_count+1,f	;volatile
  2912     03E5  3000               	movlw	0
  2913     03E6  07E1               	addwf	_overflow_count+1,f	;volatile
  2914                           
  2915                           ;main.c: 87: if (overflow_count >= 5) {
  2916     03E7  3000               	movlw	0
  2917     03E8  0261               	subwf	_overflow_count+1,w	;volatile
  2918     03E9  3005               	movlw	5
  2919     03EA  1903               	skipnz
  2920     03EB  0260               	subwf	_overflow_count,w	;volatile
  2921     03EC  1C03               	skipc
  2922     03ED  2BEF               	goto	u109_21
  2923     03EE  2BF0               	goto	u109_20
  2924     03EF                     u109_21:
  2925     03EF  2BF4               	goto	i1l1565
  2926     03F0                     u109_20:
  2927     03F0                     i1l1561:
  2928                           
  2929                           ;main.c: 88: overflow_count = 0;
  2930     03F0  01E0               	clrf	_overflow_count	;volatile
  2931     03F1  01E1               	clrf	_overflow_count+1	;volatile
  2932     03F2                     i1l1563:
  2933                           
  2934                           ;main.c: 89: mustCheckServos = 1;
  2935     03F2  01F4               	clrf	_mustCheckServos
  2936     03F3  0AF4               	incf	_mustCheckServos,f
  2937     03F4                     i1l1565:
  2938                           
  2939                           ;main.c: 90: };main.c: 91: contador1Seg++;
  2940     03F4  3001               	movlw	1
  2941     03F5  00FF               	movwf	btemp+1
  2942     03F6  087F               	movf	btemp+1,w
  2943     03F7  07F1               	addwf	_contador1Seg,f
  2944     03F8                     i1l1567:
  2945                           
  2946                           ;main.c: 92: if(contador1Seg>= 100){
  2947     03F8  3064               	movlw	100
  2948     03F9  0271               	subwf	_contador1Seg,w
  2949     03FA  1C03               	skipc
  2950     03FB  2BFD               	goto	u110_21
  2951     03FC  2BFE               	goto	u110_20
  2952     03FD                     u110_21:
  2953     03FD  2C10               	goto	i1l87
  2954     03FE                     u110_20:
  2955     03FE                     i1l1569:
  2956                           
  2957                           ;main.c: 93: contador1Seg = 0;
  2958     03FE  01F1               	clrf	_contador1Seg
  2959     03FF                     i1l1571:
  2960                           
  2961                           ;main.c: 94: contadorTimeShutOff++;
  2962     03FF  3001               	movlw	1
  2963     0400  07E2               	addwf	_contadorTimeShutOff,f
  2964     0401  1803               	skipnc
  2965     0402  0AE3               	incf	_contadorTimeShutOff+1,f
  2966     0403  3000               	movlw	0
  2967     0404  07E3               	addwf	_contadorTimeShutOff+1,f
  2968     0405                     i1l1573:
  2969                           
  2970                           ;main.c: 95: if(contadorTimeShutOff >= 15*60) {
  2971     0405  3003               	movlw	3
  2972     0406  0263               	subwf	_contadorTimeShutOff+1,w
  2973     0407  3084               	movlw	132
  2974     0408  1903               	skipnz
  2975     0409  0262               	subwf	_contadorTimeShutOff,w
  2976     040A  1C03               	skipc
  2977     040B  2C0D               	goto	u111_21
  2978     040C  2C0E               	goto	u111_20
  2979     040D                     u111_21:
  2980     040D  2C10               	goto	i1l87
  2981     040E                     u111_20:
  2982     040E                     i1l1575:
  2983                           
  2984                           ;main.c: 96: mustStopNow = 1;
  2985     040E  01F3               	clrf	_mustStopNow
  2986     040F  0AF3               	incf	_mustStopNow,f
  2987     0410                     i1l87:
  2988                           
  2989                           ;main.c: 97: };main.c: 98: };main.c: 100: };main.c: 102: if (PIR1bits.TMR1IF) {
  2990     0410  1283               	bcf	3,5	;RP0=0, select bank0
  2991     0411  1C0C               	btfss	12,0	;volatile
  2992     0412  2C14               	goto	u112_21
  2993     0413  2C15               	goto	u112_20
  2994     0414                     u112_21:
  2995     0414  2C17               	goto	i1l1581
  2996     0415                     u112_20:
  2997     0415                     i1l1577:
  2998                           
  2999                           ;main.c: 103: PIR1bits.TMR1IF = 0;
  3000     0415  100C               	bcf	12,0	;volatile
  3001     0416                     i1l1579:
  3002                           
  3003                           ;main.c: 104: timer1InterruptHandler();
  3004     0416  22AE               	fcall	_timer1InterruptHandler
  3005     0417                     i1l1581:
  3006                           
  3007                           ;main.c: 105: };main.c: 107: if (PIR1bits.TMR2IF) {
  3008     0417  1283               	bcf	3,5	;RP0=0, select bank0
  3009     0418  1C8C               	btfss	12,1	;volatile
  3010     0419  2C1B               	goto	u113_21
  3011     041A  2C1C               	goto	u113_20
  3012     041B                     u113_21:
  3013     041B  2C21               	goto	i1l93
  3014     041C                     u113_20:
  3015     041C                     i1l1583:
  3016                           
  3017                           ;main.c: 108: TMR2ON = 0;
  3018     041C  1112               	bcf	18,2	;volatile
  3019                           
  3020                           ;main.c: 110: PIR1bits.TMR2IF = 0;
  3021     041D  108C               	bcf	12,1	;volatile
  3022     041E                     i1l1585:
  3023                           
  3024                           ;main.c: 112: GPIO = GPIO & 0b11001111;
  3025     041E  0805               	movf	5,w	;volatile
  3026     041F  39CF               	andlw	207
  3027     0420  0085               	movwf	5	;volatile
  3028     0421                     i1l93:
  3029     0421  0879               	movf	??_myISR+3,w
  3030     0422  00FF               	movwf	btemp+1
  3031     0423  0878               	movf	??_myISR+2,w
  3032     0424  008A               	movwf	10
  3033     0425  0877               	movf	??_myISR+1,w
  3034     0426  0084               	movwf	4
  3035     0427  0E76               	swapf	??_myISR,w
  3036     0428  0083               	movwf	3
  3037     0429  0EFE               	swapf	btemp,f
  3038     042A  0E7E               	swapf	btemp,w
  3039     042B  0009               	retfie
  3040     042C                     __end_of_myISR:
  3041                           
  3042                           	psect	intentry
  3043     0004                     __pintentry:	
  3044                           ;incstack = 0
  3045                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3046                           
  3047     0004                     interrupt_function:
  3048     007E                     saved_w	set	btemp
  3049     0004  00FE               	movwf	btemp
  3050     0005  0E03               	swapf	3,w
  3051     0006  00F6               	movwf	??_myISR
  3052     0007  0804               	movf	4,w
  3053     0008  00F7               	movwf	??_myISR+1
  3054     0009  080A               	movf	10,w
  3055     000A  00F8               	movwf	??_myISR+2
  3056     000B  087F               	movf	btemp+1,w
  3057     000C  00F9               	movwf	??_myISR+3
  3058     000D  2BD9               	ljmp	_myISR
  3059                           
  3060                           	psect	text16
  3061     02AE                     __ptext16:	
  3062 ;; *************** function _timer1InterruptHandler *****************
  3063 ;; Defined at:
  3064 ;;		line 118 in file "main.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      void 
  3071 ;; Registers used:
  3072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1
  3078 ;;      Params:         0       0       0
  3079 ;;      Locals:         0       0       0
  3080 ;;      Temps:          1       0       0
  3081 ;;      Totals:         1       0       0
  3082 ;;Total ram usage:        1 bytes
  3083 ;; Hardware stack levels used: 1
  3084 ;; This function calls:
  3085 ;;		Nothing
  3086 ;; This function is called by:
  3087 ;;		_myISR
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091     02AE                     _timer1InterruptHandler:	
  3092                           ;psect for function _timer1InterruptHandler
  3093                           
  3094     02AE                     i1l1401:	
  3095                           ;incstack = 0
  3096                           ; Regs used in _timer1InterruptHandler: [wreg-fsr0h+status,2+status,0+btemp+1]
  3097                           
  3098                           
  3099                           ;main.c: 119: switch (EstadoRCServo) {
  3100     02AE  2B0B               	goto	i1l1449
  3101     02AF                     i1l97:	
  3102                           ;main.c: 120: case 0:
  3103                           
  3104                           
  3105                           ;main.c: 121: TMR1 = 64561;
  3106     02AF  30FC               	movlw	252
  3107     02B0  1283               	bcf	3,5	;RP0=0, select bank0
  3108     02B1  008F               	movwf	15	;volatile
  3109     02B2  3031               	movlw	49
  3110     02B3  008E               	movwf	14	;volatile
  3111                           
  3112                           ;main.c: 122: TMR2ON = 0;
  3113     02B4  1112               	bcf	18,2	;volatile
  3114     02B5                     i1l1403:
  3115                           
  3116                           ;main.c: 123: TMR2 = 0;
  3117     02B5  0191               	clrf	17	;volatile
  3118     02B6                     i1l1405:
  3119                           
  3120                           ;main.c: 124: EstadoRCServo = 1;
  3121     02B6  01F2               	clrf	_EstadoRCServo
  3122     02B7  0AF2               	incf	_EstadoRCServo,f
  3123     02B8                     i1l1407:
  3124                           
  3125                           ;main.c: 125: if (ContadorMotor >= 2) {
  3126     02B8  3002               	movlw	2
  3127     02B9  0270               	subwf	_ContadorMotor,w
  3128     02BA  1C03               	skipc
  3129     02BB  2ABD               	goto	u93_21
  3130     02BC  2ABE               	goto	u93_20
  3131     02BD                     u93_21:
  3132     02BD  2AC4               	goto	i1l1413
  3133     02BE                     u93_20:
  3134     02BE                     i1l1409:
  3135                           
  3136                           ;main.c: 126: ContadorMotor = 0;
  3137     02BE  01F0               	clrf	_ContadorMotor
  3138     02BF                     i1l1411:
  3139                           
  3140                           ;main.c: 127: MaskMotor = 0b00010000;
  3141     02BF  3010               	movlw	16
  3142     02C0  00EF               	movwf	_MaskMotor
  3143                           
  3144                           ;main.c: 128: GPIO = GPIO & 0b11001111;
  3145     02C1  0805               	movf	5,w	;volatile
  3146     02C2  39CF               	andlw	207
  3147     02C3  0085               	movwf	5	;volatile
  3148     02C4                     i1l1413:
  3149                           
  3150                           ;main.c: 129: };main.c: 130: GPIO = (GPIO & 0b11001111) | MaskMotor;
  3151     02C4  0805               	movf	5,w	;volatile
  3152     02C5  39CF               	andlw	207
  3153     02C6  046F               	iorwf	_MaskMotor,w
  3154     02C7  0085               	movwf	5	;volatile
  3155                           
  3156                           ;main.c: 132: break;
  3157     02C8  2B16               	goto	i1l106
  3158     02C9                     i1l100:	
  3159                           ;main.c: 133: case 1:
  3160                           
  3161                           
  3162                           ;main.c: 134: TMR1 = 61561;
  3163     02C9  30F0               	movlw	240
  3164     02CA  1283               	bcf	3,5	;RP0=0, select bank0
  3165     02CB  008F               	movwf	15	;volatile
  3166     02CC  3079               	movlw	121
  3167     02CD  008E               	movwf	14	;volatile
  3168     02CE                     i1l1415:
  3169                           
  3170                           ;main.c: 135: PR2 = motorRawValueTarget[ContadorMotor];
  3171     02CE  0870               	movf	_ContadorMotor,w
  3172     02CF  3E68               	addlw	(low (_motorRawValueTarget| 0))& (0+255)
  3173     02D0  0084               	movwf	4
  3174     02D1  1383               	bcf	3,7	;select IRP bank0
  3175     02D2  0800               	movf	0,w
  3176     02D3  1683               	bsf	3,5	;RP0=1, select bank1
  3177     02D4  0092               	movwf	18	;volatile
  3178     02D5                     i1l1417:
  3179                           
  3180                           ;main.c: 136: TMR2ON = 1;
  3181     02D5  1283               	bcf	3,5	;RP0=0, select bank0
  3182     02D6  1512               	bsf	18,2	;volatile
  3183     02D7                     i1l1419:
  3184                           
  3185                           ;main.c: 137: EstadoRCServo = 2;
  3186     02D7  3002               	movlw	2
  3187     02D8  00F2               	movwf	_EstadoRCServo
  3188     02D9                     i1l1421:
  3189                           
  3190                           ;main.c: 138: if (PR2 <= 1) {
  3191     02D9  3002               	movlw	2
  3192     02DA  1683               	bsf	3,5	;RP0=1, select bank1
  3193     02DB  0212               	subwf	18,w	;volatile
  3194     02DC  1803               	skipnc
  3195     02DD  2ADF               	goto	u94_21
  3196     02DE  2AE0               	goto	u94_20
  3197     02DF                     u94_21:
  3198     02DF  2B16               	goto	i1l106
  3199     02E0                     u94_20:
  3200     02E0                     i1l1423:
  3201                           
  3202                           ;main.c: 139: TMR2ON = 0;
  3203     02E0  1283               	bcf	3,5	;RP0=0, select bank0
  3204     02E1  1112               	bcf	18,2	;volatile
  3205     02E2                     i1l1425:
  3206                           
  3207                           ;main.c: 141: GPIO = (GPIO & 0b11001111);
  3208     02E2  1283               	bcf	3,5	;RP0=0, select bank0
  3209     02E3  0805               	movf	5,w	;volatile
  3210     02E4  39CF               	andlw	207
  3211     02E5  0085               	movwf	5	;volatile
  3212     02E6  2B16               	goto	i1l106
  3213     02E7                     i1l102:	
  3214                           ;main.c: 145: case 2:
  3215                           
  3216                           
  3217                           ;main.c: 146: TMR2IF = 0;
  3218     02E7  1283               	bcf	3,5	;RP0=0, select bank0
  3219     02E8  108C               	bcf	12,1	;volatile
  3220                           
  3221                           ;main.c: 148: TMR2ON = 0;
  3222     02E9  1112               	bcf	18,2	;volatile
  3223     02EA                     i1l1427:
  3224                           
  3225                           ;main.c: 149: EstadoRCServo = 0;
  3226     02EA  01F2               	clrf	_EstadoRCServo
  3227     02EB                     i1l1429:
  3228                           
  3229                           ;main.c: 150: ContadorMotor++;
  3230     02EB  3001               	movlw	1
  3231     02EC  00FF               	movwf	btemp+1
  3232     02ED  087F               	movf	btemp+1,w
  3233     02EE  07F0               	addwf	_ContadorMotor,f
  3234     02EF                     i1l1431:
  3235                           
  3236                           ;main.c: 151: GPIO = GPIO & 0b11001111;
  3237     02EF  0805               	movf	5,w	;volatile
  3238     02F0  39CF               	andlw	207
  3239     02F1  0085               	movwf	5	;volatile
  3240     02F2                     i1l1433:
  3241                           
  3242                           ;main.c: 152: MaskMotor = (uint8_t)(MaskMotor << 1);
  3243     02F2  086F               	movf	_MaskMotor,w
  3244     02F3  00F5               	movwf	??_timer1InterruptHandler
  3245     02F4  0775               	addwf	??_timer1InterruptHandler,w
  3246     02F5  00EF               	movwf	_MaskMotor
  3247     02F6                     i1l1435:
  3248                           
  3249                           ;main.c: 153: if (ContadorMotor >= 2) {
  3250     02F6  3002               	movlw	2
  3251     02F7  0270               	subwf	_ContadorMotor,w
  3252     02F8  1C03               	skipc
  3253     02F9  2AFB               	goto	u95_21
  3254     02FA  2AFC               	goto	u95_20
  3255     02FB                     u95_21:
  3256     02FB  2B04               	goto	i1l103
  3257     02FC                     u95_20:
  3258     02FC                     i1l1437:
  3259                           
  3260                           ;main.c: 154: ContadorMotor = 0;
  3261     02FC  01F0               	clrf	_ContadorMotor
  3262     02FD                     i1l1439:
  3263                           
  3264                           ;main.c: 155: MaskMotor = 0b00010000;
  3265     02FD  3010               	movlw	16
  3266     02FE  00EF               	movwf	_MaskMotor
  3267     02FF                     i1l1441:
  3268                           
  3269                           ;main.c: 156: TMR1 = 37535;
  3270     02FF  3092               	movlw	146
  3271     0300  008F               	movwf	15	;volatile
  3272     0301  309F               	movlw	159
  3273     0302  008E               	movwf	14	;volatile
  3274                           
  3275                           ;main.c: 157: } else {
  3276     0303  2B16               	goto	i1l106
  3277     0304                     i1l103:
  3278                           
  3279                           ;main.c: 158: TMR1 = 65535;
  3280     0304  30FF               	movlw	255
  3281     0305  008F               	movwf	15	;volatile
  3282     0306  30FF               	movlw	255
  3283     0307  008E               	movwf	14	;volatile
  3284     0308  2B16               	goto	i1l106
  3285     0309                     i1l1443:
  3286                           
  3287                           ;main.c: 164: EstadoRCServo = 0;
  3288     0309  01F2               	clrf	_EstadoRCServo
  3289     030A  2AE2               	goto	i1l1425
  3290     030B                     i1l1449:
  3291     030B  0872               	movf	_EstadoRCServo,w
  3292                           
  3293                           ; Switch size 1, requested type "simple"
  3294                           ; Number of cases is 3, Range of values is 0 to 2
  3295                           ; switch strategies available:
  3296                           ; Name         Instructions Cycles
  3297                           ; direct_byte            9     6 (fixed)
  3298                           ; simple_byte           10     6 (average)
  3299                           ; jumptable            260     6 (fixed)
  3300                           ;	Chosen strategy is simple_byte
  3301     030C  3A00               	xorlw	0	; case 0
  3302     030D  1903               	skipnz
  3303     030E  2AAF               	goto	i1l97
  3304     030F  3A01               	xorlw	1	; case 1
  3305     0310  1903               	skipnz
  3306     0311  2AC9               	goto	i1l100
  3307     0312  3A03               	xorlw	3	; case 2
  3308     0313  1903               	skipnz
  3309     0314  2AE7               	goto	i1l102
  3310     0315  2B09               	goto	i1l1443
  3311     0316                     i1l106:
  3312     0316  0008               	return
  3313     0317                     __end_of_timer1InterruptHandler:
  3314     007E                     btemp	set	126	;btemp
  3315     007E                     wtemp0	set	126
  3316                           
  3317                           	psect	idloc
  3318                           
  3319                           ;Config register IDLOC0 @ 0x2000
  3320                           ;	unspecified, using default values
  3321     2000                     	org	8192
  3322     2000  3FFF               	dw	16383
  3323                           
  3324                           ;Config register IDLOC1 @ 0x2001
  3325                           ;	unspecified, using default values
  3326     2001                     	org	8193
  3327     2001  3FFF               	dw	16383
  3328                           
  3329                           ;Config register IDLOC2 @ 0x2002
  3330                           ;	unspecified, using default values
  3331     2002                     	org	8194
  3332     2002  3FFF               	dw	16383
  3333                           
  3334                           ;Config register IDLOC3 @ 0x2003
  3335                           ;	unspecified, using default values
  3336     2003                     	org	8195
  3337     2003  3FFF               	dw	16383
  3338                           
  3339                           	psect	config
  3340                           
  3341                           ;Config register CONFIG @ 0x2007
  3342                           ;	Oscillator Selection bits
  3343                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  3344                           ;	Watchdog Timer Enable bit
  3345                           ;	WDTE = OFF, WDT disabled
  3346                           ;	Power-up Timer Enable bit
  3347                           ;	PWRTE = ON, PWRT enabled
  3348                           ;	MCLR Pin Function Select bit
  3349                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  3350                           ;	Code Protection bit
  3351                           ;	CP = OFF, Program memory code protection is disabled
  3352                           ;	Data Code Protection bit
  3353                           ;	CPD = 0x1, unprogrammed default
  3354                           ;	Brown Out Detect
  3355                           ;	BOREN = ON, BOR enabled
  3356                           ;	Internal External Switchover bit
  3357                           ;	IESO = 0x1, unprogrammed default
  3358                           ;	Fail-Safe Clock Monitor Enabled bit
  3359                           ;	FCMEN = 0x1, unprogrammed default
  3360     2007                     	org	8199
  3361     2007  3FC4               	dw	16324

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         28
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     52      80
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    _myISR->_timer1InterruptHandler

Critical Paths under _main in BANK0

    _main->_setTorretPosition
    _setup->_srand
    _setTorretPosition->_calculateSpeedIncrement
    _convertAngle->___awdiv
    _calculateSpeedIncrement->_generateRandom
    _generateRandom->___awmod
    _rand->___lmul
    ___awmod->_rand
    ___awdiv->___wmul

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   11032
                                             49 BANK0      3     3      0
                       _convertAngle
                  _setTorretPosition
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     121
                            _initPWM
                        _setupTimer0
                        _setupTimer1
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _setupTimer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTorretPosition                                    1     1      0    8307
                                             48 BANK0      1     1      0
            _calculateSpeedIncrement
                       _convertAngle
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _convertAngle                                         4     2      2    2604
                                             14 BANK0      4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _calculateSpeedIncrement                             14    12      2    3384
                                             34 BANK0     14    12      2
                            ___awdiv
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _generateRandom                                       8     4      4    2319
                                             26 BANK0      8     4      4
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                             13 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     613
                                             20 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     805
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                4     4      0       0
                                              1 COMMON     4     4      0
             _timer1InterruptHandler
 ---------------------------------------------------------------------------------
 (7) _timer1InterruptHandler                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convertAngle
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _setTorretPosition
     _calculateSpeedIncrement
       ___awdiv
       _generateRandom
         ___awmod
           _rand (ARG)
             ___lmul
         _rand
     _convertAngle
     _generateRandom
   _setup
     _initPWM
     _setupTimer0
     _setupTimer1
     _srand

 _myISR (ROOT)
   _timer1InterruptHandler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     34      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5A       8        0.0%
ABS                  0      0      5A       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Feb 16 14:17:14 2024

             ??_setTorretPosition 0050                      ___awdiv@sign 002B                                fsr 0004  
             ___wmul@multiplicand 0022                               l112 057E                               l121 0545  
                             l131 02AD                               l115 0574                               l132 02A9  
                             l141 0036                               l109 0588                               l118 0567  
                             l127 04B8                               l253 0507                               l157 017A  
                             l406 037E                               l255 051F                               l419 03D8  
                             l267 0472                               l706 0598                               l709 04F9  
                             _GP2 002A                               _PR2 0092                               fsr0 0004  
                             indf 0000                      ___awmod@sign 0039                              l2001 0217  
                            l2003 021C                              l2005 021E                              l2007 0222  
                            l2009 0229                              l1701 03C4                              l1703 03CA  
                            l1711 0520                              l1705 03CF                              l1713 0520  
                            l1721 04FD                              l1801 056F                              l1707 03D4  
                            l1651 042C                              l1715 0541                              l1723 0501  
                            l1811 0481                              l1803 0572                              l1741 0324  
                            l1733 0317                              l1661 046A                              l1653 0435  
                            l1725 050E                              l1813 0487                              l1901 009E  
                            l1805 0573                              l1751 0339                              l1743 0328  
                            l1735 0319                              l1655 0439                              l1831 024E  
                            l1823 0234                              l1727 0515                              l1719 04FA  
                            l1815 0495                              l1911 00C9                              l1903 00AD  
                            l1807 0591                              l1761 035C                              l1753 033C  
                            l1745 032D                              l1737 031D                              l1681 038C  
                            l1673 037F                              l1657 0450                              l1665 04B9  
                            l1833 0275                              l1825 023A                              l1729 051B  
                            l1817 049A                              l1809 0473                              l1921 00FA  
                            l1905 00B1                              l1913 00D0                              l1771 0375  
                            l1763 0362                              l1755 0343                              l1747 0331  
                            l1739 0322                              l1691 03A5                              l1683 0390  
                            l1675 0381                              l1659 0459                              l1667 04D4  
                            l1835 027B                              l1819 04B7                              l1931 0132  
                            l1923 0109                              l1915 00D4                              l1907 00B8  
                            l1851 0552                              l1843 0546                              l1773 037A  
                            l1765 0363                              l1757 0347                              l1749 0333  
                            l1693 03A9                              l1685 0395                              l1677 0385  
                            l1669 04E2                              l1837 029E                              l1829 023D  
                            l1941 0162                              l1933 0139                              l1925 0111  
                            l1917 00E2                              l1909 00C0                              l1781 0582  
                            l1861 055D                              l1853 0553                              l1845 054C  
                            l1767 036A                              l1759 034B                              l1695 03AD  
                            l1687 039B                              l1679 038A                              l1839 02A4  
                            l1943 016A                              l1927 011F                              l1935 0141  
                            l1919 00EB                              l1783 0584                              l1791 0579  
                            l1871 0562                              l1863 055E                              l1855 0554  
                            l1847 054F                              l1951 017F                              l1769 0370  
                            l1697 03B7                              l1689 039E                              l1945 0173  
                            l1937 014F                              l1929 012E                              l1881 0028  
                            l1785 0587                              l1777 057F                              l1793 057D  
                            l1873 0563                              l1865 055F                              l1857 055B  
                            l1849 0550                              l1961 019E                              l1953 0181  
                            l1699 03BD                              l1939 015E                              l1891 006E  
                            l1883 003B                              l1795 0568                              l1779 0581  
                            l1787 0575                              l1875 0564                              l1867 0560  
                            l1859 055C                              l1971 01C3                              l1963 01A3  
                            l1955 0188                              l1947 017B                              l1893 007D  
                            l1885 0049                              l1797 056A                              l1789 0577  
                            l1877 0566                              l1869 0561                              l1981 01E8  
                            l1973 01C8                              l1965 01A7                              l1957 018F  
                            l1949 017C                              l1895 0081                              l1887 0058  
                            l1879 0022                              l1799 056C                              l1991 0209  
                            l1983 01EB                              l1975 01CC                              l1967 01AE  
                            l1959 0190                              l1897 0088                              l1889 0060  
                            l1993 020B                              l1985 01ED                              l1977 01D3  
                            l1969 01B5                              l1899 0090                              l1995 0210  
                            l1987 01F4                              l1979 01DA         __end_of_setTorretPosition 017B  
                            l1997 0215                              l1989 01FB                              l1999 0216  
                            u1210 046A                              u1211 0469                              u1300 03CA  
                            u1220 04F1                              u1301 03C9                              u1205 045A  
                            u1310 03CF                              u1230 0385                              u1311 03CE  
                            u1231 0384                              u1400 034B                              u1240 0390  
                            u1320 0501                              u1401 034A                              u1241 038F  
                            u1225 04EC                              u1321 0500                              u1250 039B  
                            u1170 0439                              u1251 039A                              u1171 0438  
                            u1420 035C                              u1500 029E                              u1421 035B  
                            u1181 0442                              u1501 029D                              u1270 03AD  
                            u1182 0449                              u1350 051B                              u1510 0028  
                            u1415 034C                              u1271 03AC                              u1183 0450  
                            u1351 051A                              u1335 0508                              u1511 0027  
                            u1440 0370                              u1360 031D                              u1280 03B7  
                            u1600 00FA                              u1520 0036                              u1441 036F  
                            u1425 0358                              u1361 031C                              u1281 03B6  
                            u1265 039F                              u1505 029A                              u1345 050F  
                            u1601 00F9                              u1521 0035                              u1450 0375  
                            u1370 0328                              u1610 011F                              u1530 003B  
                            u1451 0374                              u1435 0364                              u1371 0327  
                            u1195 0452                              u1611 011E                              u1531 003A  
                            u1380 0339                              u1460 0481                              u1620 014F  
                            u1540 0049                              u1381 0338                              u1285 03B3  
                            u1461 0480                              u1621 014E                              u1605 00F6  
                            u1541 0048                              u1525 0032                              u1470 0495  
                            u1550 006E                              u1630 0210                              u1295 03BE  
                            u1471 0494                              u1615 011B                              u1551 006D  
                            u1631 020F                              u1480 023A                              u1560 009E  
                            u1640 0215                              u1481 0239                              u1465 047D  
                            u1625 014B                              u1561 009D                              u1545 0045  
                            u1641 0214                              _GPIO 0005                              u1490 027B  
                            u1570 00D4                              u1650 021C                              u1395 033D  
                            u1491 027A                              u1475 0491                              u1571 00D3  
                            u1555 006A                              u1651 021B                              u1580 00E2  
                            u1581 00E1                              u1565 009A                              u1590 00EB  
                            u1591 00EA                              u1585 00DE                              u1667 0197  
                            u1677 01BC                     _EstadoRCServo 0072                              u1687 01E1  
                            u1697 0202                              i1l93 0421                              i1l87 0410  
                            i1l97 02AF                              _TMR0 0001                              _TMR1 000E  
                            _TMR2 0011                              _main 017B                              _rand 04B9  
                            btemp 007E                              start 000E                     ?_convertAngle 002E  
                           ?_main 0075                             ?_rand 002D                   __end_of___awdiv 037F  
                 __end_of___awmod 03D9                             _ANSEL 009F                   ___awdiv@divisor 0026  
                           _T1CON 0010                             _T2CON 0012                             i1l100 02C9  
                           i1l102 02E7                             i1l103 0304                             i1l106 0316  
                 ___awdiv@counter 002A                             u93_20 02BE                             u93_21 02BD  
                           u94_20 02E0                             u94_21 02DF                             u95_20 02FC  
                           u95_21 02FB               ___lmul@multiplicand 0024                   __end_of_initPWM 0575  
                           _myISR 03D9                             _randx 006B                             _speed 0064  
                           _setup 0546                             _srand 0591                             pclath 000A  
      generateRandom@randomNumber 0040                             status 0003                             wtemp0 007E  
                  ??_convertAngle 0030                   __initialization 000F          ?_calculateSpeedIncrement 0042  
                    __end_of_main 0232                      __end_of_rand 04FA                            ??_main 0051  
                          ??_rand 002F                  ??_generateRandom 003E          ??_timer1InterruptHandler 0075  
                          ?_myISR 0075                  ___awdiv@dividend 0028                            ?_setup 0075  
                          ?_srand 0020                            u110_20 03FE                            u110_21 03FD  
                          u111_20 040E                            i1l1401 02AE                            u111_21 040D  
                          i1l1411 02BF                            i1l1403 02B5                            i1l1421 02D9  
                          i1l1413 02C4                            i1l1405 02B6                            i1l1431 02EF  
                          i1l1423 02E0                            i1l1415 02CE                            i1l1407 02B8  
                          u112_20 0415                            i1l1441 02FF                            i1l1433 02F2  
                          i1l1425 02E2                            i1l1417 02D5                            i1l1409 02BE  
                          u112_21 0414                            i1l1443 0309                            i1l1435 02F6  
                          i1l1427 02EA                            i1l1419 02D7                            i1l1437 02FC  
                          i1l1429 02EB                            i1l1439 02FD                            u113_20 041C  
                          i1l1449 030B                            u113_21 041B                            i1l1561 03F0  
                          i1l1571 03FF                            i1l1563 03F2                            i1l1555 03D9  
                          i1l1581 0417                            i1l1573 0405                            i1l1565 03F4  
                          i1l1557 03DD                            i1l1583 041C                            i1l1575 040E  
                          i1l1567 03F8                            i1l1559 03DE                            i1l1585 041E  
                          i1l1577 0415                            i1l1569 03FE                            i1l1579 0416  
                          u108_20 03DD                            u108_21 03DC                            u109_20 03F0  
                          u109_21 03EF                            _OSCCON 008F                            _TMR2IF 0061  
                          _TMR2ON 0092                            _TRISIO 0085                            ___lmul 042C  
                          ___wmul 04FA                         ??___awdiv 002A                         ??___awmod 0038  
                ___awdiv@quotient 002C                   ___awmod@divisor 0034                   ___awmod@counter 0038  
                       ??_initPWM 0020                            saved_w 007E                            srand@x 0020  
                    ?_setupTimer0 0075                      ?_setupTimer1 0075           __end_of__initialization 0020  
             _contadorTimeShutOff 0062                  convertAngle@temp 0030                    __pcstackCOMMON 0075  
                    __pidataBANK0 0599                     __end_of_myISR 042C                     __end_of_setup 0568  
                   __end_of_srand 0599                    _OPTION_REGbits 0081              __end_of_convertAngle 04B9  
                         ??_myISR 0076                           ??_setup 0022                           ??_srand 0022  
                      __pbssBANK0 0054                        __pmaintext 017B                           ?___lmul 0020  
                         ?___wmul 0020                        __pintentry 0004                           _CCP1CON 0015  
                  ___lmul@product 0029            _timer1InterruptHandler 02AE                   _mustCheckServos 0074  
                         ___awdiv 0317                           ___awmod 037F                           __ptext1 0546  
                         __ptext2 0591                           __ptext3 0575                           __ptext4 057F  
                         __ptext5 0568                           __ptext6 0022                           __ptext7 0473  
                         __ptext8 04FA                           __ptext9 0232                         _T1CONbits 0010  
                         _initPWM 0568                  ___awmod@dividend 0036                           clrloop0 058A  
            end_of_initialization 0020                        _motorAngle 0054                      _contador1Seg 0071  
               convertAngle@value 002E                      _convertAngle 0473                    _motorIncrement 0058  
                  __end_of___lmul 0473                    __end_of___wmul 0520               start_initialization 000F  
                       _MaskMotor 006F                          ??___lmul 0028                          ??___wmul 0024  
                     __pdataBANK0 006B           _calculateSpeedIncrement 0232                       __pbssCOMMON 0070  
                       ___latbits 0000                     __pcstackBANK0 0020                       _activeMotor 006A  
         ?_timer1InterruptHandler 0075                         __pnvBANK0 006F                          ?___awdiv 0026  
                        ?___awmod 0034                          ?_initPWM 0075    __end_of_timer1InterruptHandler 0317  
               interrupt_function 0004                    ___wmul@product 0024                          _GPIObits 0005  
                       clear_ram0 0589                          _PIE1bits 008C                 generateRandom@max 003C  
               generateRandom@min 003A                          _PIR1bits 000C                         _pwmActual 0066  
       ??_calculateSpeedIncrement 0044                 ___wmul@multiplier 0020                     ??_setupTimer0 0020  
                   ??_setupTimer1 0020               _motorRawValueTarget 0068                 ___lmul@multiplier 0020  
                  _generateRandom 0520            __end_of_generateRandom 0546                          __ptext10 0520  
                        __ptext11 04B9                          __ptext12 042C                          __ptext13 037F  
                        __ptext14 0317                          __ptext15 03D9                          __ptext16 02AE  
 __end_of_calculateSpeedIncrement 02AE                     _ContadorMotor 0070               __end_of_setupTimer0 0589  
             __end_of_setupTimer1 057F                    _overflow_count 0060                        _INTCONbits 000B  
                 ?_generateRandom 003A                          intlevel1 0000                       _motorTarget 005C  
    calculateSpeedIncrement@index 004F      calculateSpeedIncrement@speed 004B                        _OPTION_REG 0081  
calculateSpeedIncrement@increment 004D                       _setupTimer0 057F                       _setupTimer1 0575  
               _setTorretPosition 0022                       _mustStopNow 0073                ?_setTorretPosition 0075  
