

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Feb 02 20:47:56 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F683
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Generated 21/04/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC12F683 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     000A                     	;# 
    73     000B                     	;# 
    74     000C                     	;# 
    75     000E                     	;# 
    76     000E                     	;# 
    77     000F                     	;# 
    78     0010                     	;# 
    79     0011                     	;# 
    80     0012                     	;# 
    81     0013                     	;# 
    82     0013                     	;# 
    83     0014                     	;# 
    84     0015                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001E                     	;# 
    89     001F                     	;# 
    90     0081                     	;# 
    91     0085                     	;# 
    92     008C                     	;# 
    93     008E                     	;# 
    94     008F                     	;# 
    95     0090                     	;# 
    96     0092                     	;# 
    97     0095                     	;# 
    98     0095                     	;# 
    99     0096                     	;# 
   100     0096                     	;# 
   101     0099                     	;# 
   102     009A                     	;# 
   103     009A                     	;# 
   104     009B                     	;# 
   105     009C                     	;# 
   106     009D                     	;# 
   107     009E                     	;# 
   108     009F                     	;# 
   109     0000                     	;# 
   110     0001                     	;# 
   111     0002                     	;# 
   112     0003                     	;# 
   113     0004                     	;# 
   114     0005                     	;# 
   115     000A                     	;# 
   116     000B                     	;# 
   117     000C                     	;# 
   118     000E                     	;# 
   119     000E                     	;# 
   120     000F                     	;# 
   121     0010                     	;# 
   122     0011                     	;# 
   123     0012                     	;# 
   124     0013                     	;# 
   125     0013                     	;# 
   126     0014                     	;# 
   127     0015                     	;# 
   128     0018                     	;# 
   129     0019                     	;# 
   130     001A                     	;# 
   131     001E                     	;# 
   132     001F                     	;# 
   133     0081                     	;# 
   134     0085                     	;# 
   135     008C                     	;# 
   136     008E                     	;# 
   137     008F                     	;# 
   138     0090                     	;# 
   139     0092                     	;# 
   140     0095                     	;# 
   141     0095                     	;# 
   142     0096                     	;# 
   143     0096                     	;# 
   144     0099                     	;# 
   145     009A                     	;# 
   146     009A                     	;# 
   147     009B                     	;# 
   148     009C                     	;# 
   149     009D                     	;# 
   150     009E                     	;# 
   151     009F                     	;# 
   152                           
   153                           	psect	idataBANK0
   154     02C4                     __pidataBANK0:
   155                           
   156                           ;initializer for _randx
   157     02C4  3401               	retlw	1
   158     02C5  3400               	retlw	0
   159     02C6  3400               	retlw	0
   160     02C7  3400               	retlw	0
   161                           
   162                           	psect	nvCOMMON
   163     0079                     __pnvCOMMON:
   164     0079                     _MaskMotor:
   165     0079                     	ds	1
   166                           
   167                           	psect	nvBANK0
   168     0055                     __pnvBANK0:
   169     0055                     _EstadoRCServo:
   170     0055                     	ds	1
   171     000E                     _TMR1	set	14
   172     0005                     _GPIObits	set	5
   173     0000                     _INDF	set	0
   174     0012                     _T2CON	set	18
   175     0015                     _CCP1CON	set	21
   176     0010                     _T1CONbits	set	16
   177     0010                     _T1CON	set	16
   178     0011                     _TMR2	set	17
   179     0005                     _GPIO	set	5
   180     000C                     _PIR1bits	set	12
   181     0001                     _TMR0	set	1
   182     000B                     _INTCONbits	set	11
   183     0061                     _TMR2IF	set	97
   184     0092                     _TMR2ON	set	146
   185     008C                     _PIE1bits	set	140
   186     0085                     _TRISIO	set	133
   187     009F                     _ANSEL	set	159
   188     008F                     _OSCCON	set	143
   189     0081                     _OPTION_REGbits	set	129
   190     0081                     _OPTION_REG	set	129
   191     0092                     _PR2	set	146
   192                           
   193                           	psect	cinit
   194     000D                     start_initialization:	
   195                           ; #config settings
   196                           
   197     000D                     __initialization:
   198                           
   199                           ; Initialize objects allocated to BANK0
   200     000D  22C4               	fcall	__pidataBANK0	;fetch initializer
   201     000E  00D1               	movwf	__pdataBANK0& (0+127)
   202     000F  22C5               	fcall	__pidataBANK0+1	;fetch initializer
   203     0010  00D2               	movwf	(__pdataBANK0+1)& (0+127)
   204     0011  22C6               	fcall	__pidataBANK0+2	;fetch initializer
   205     0012  00D3               	movwf	(__pdataBANK0+2)& (0+127)
   206     0013  22C7               	fcall	__pidataBANK0+3	;fetch initializer
   207     0014  00D4               	movwf	(__pdataBANK0+3)& (0+127)
   208                           
   209                           ; Clear objects allocated to BANK0
   210     0015  1383               	bcf	3,7	;select IRP bank0
   211     0016  3043               	movlw	low __pbssBANK0
   212     0017  0084               	movwf	4
   213     0018  3051               	movlw	low (__pbssBANK0+14)
   214     0019  22B4               	fcall	clear_ram0
   215                           
   216                           ; Clear objects allocated to COMMON
   217     001A  01F6               	clrf	__pbssCOMMON& (0+127)
   218     001B  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   219     001C  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   220     001D                     end_of_initialization:	
   221                           ;End of C runtime variable initialization code
   222                           
   223     001D                     __end_of__initialization:
   224     001D  0183               	clrf	3
   225     001E  2A96               	ljmp	_main	;jump to C main() function
   226                           
   227                           	psect	bssCOMMON
   228     0076                     __pbssCOMMON:
   229     0076                     _ContadorMotor:
   230     0076                     	ds	1
   231     0077                     _activeMotor:
   232     0077                     	ds	1
   233     0078                     _mustCheckServos:
   234     0078                     	ds	1
   235                           
   236                           	psect	bssBANK0
   237     0043                     __pbssBANK0:
   238     0043                     _motorAngle:
   239     0043                     	ds	4
   240     0047                     _motorTarget:
   241     0047                     	ds	4
   242     004B                     _overflow_count:
   243     004B                     	ds	2
   244     004D                     _speedCounter:
   245     004D                     	ds	2
   246     004F                     _speed:
   247     004F                     	ds	2
   248                           
   249                           	psect	dataBANK0
   250     0051                     __pdataBANK0:
   251     0051                     _randx:
   252     0051                     	ds	4
   253                           
   254                           	psect	clrtext
   255     02B4                     clear_ram0:	
   256                           ;	Called with FSR containing the base address, and
   257                           ;	W with the last address+1
   258                           
   259     02B4  0064               	clrwdt	;clear the watchdog before getting into this loop
   260     02B5                     clrloop0:
   261     02B5  0180               	clrf	0	;clear RAM location pointed to by FSR
   262     02B6  0A84               	incf	4,f	;increment pointer
   263     02B7  0604               	xorwf	4,w	;XOR with final address
   264     02B8  1903               	btfsc	3,2	;have we reached the end yet?
   265     02B9  3400               	retlw	0	;all done for this memory range, return
   266     02BA  0604               	xorwf	4,w	;XOR again to restore value
   267     02BB  2AB5               	goto	clrloop0	;do the next byte
   268                           
   269                           	psect	cstackCOMMON
   270     0071                     __pcstackCOMMON:
   271     0071                     ?_timer1InterruptHandler:
   272     0071                     ??_timer1InterruptHandler:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0071                     ?_myISR:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0071                     ?_setupTimer0:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0071                     ?_setupTimer1:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     0071                     ?_initPWM:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0071                     ?_setup:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0071                     ?_setTorretPosition:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0071                     ?_main:	
   294                           ; 1 bytes @ 0x0
   295                           
   296                           
   297                           ; 1 bytes @ 0x0
   298     0071                     	ds	1
   299     0072                     ??_myISR:
   300                           
   301                           ; 1 bytes @ 0x1
   302     0072                     	ds	3
   303     0075                     ??_srand:
   304     0075                     ??_setupTimer0:	
   305                           ; 1 bytes @ 0x4
   306                           
   307     0075                     ??_setupTimer1:	
   308                           ; 1 bytes @ 0x4
   309                           
   310     0075                     ??_initPWM:	
   311                           ; 1 bytes @ 0x4
   312                           
   313     0075                     ??___lmul:	
   314                           ; 1 bytes @ 0x4
   315                           
   316                           
   317                           ; 1 bytes @ 0x4
   318     0075                     	ds	1
   319     0076                     ??_main:
   320                           
   321                           	psect	cstackBANK0
   322     0020                     __pcstackBANK0:	
   323                           ; 1 bytes @ 0x5
   324                           
   325     0020                     ?_srand:
   326     0020                     ?___lmul:	
   327                           ; 1 bytes @ 0x0
   328                           
   329     0020                     srand@x:	
   330                           ; 4 bytes @ 0x0
   331                           
   332     0020                     ___lmul@multiplier:	
   333                           ; 2 bytes @ 0x0
   334                           
   335                           
   336                           ; 4 bytes @ 0x0
   337     0020                     	ds	2
   338     0022                     ??_setup:
   339                           
   340                           ; 1 bytes @ 0x2
   341     0022                     	ds	2
   342     0024                     ___lmul@multiplicand:
   343                           
   344                           ; 4 bytes @ 0x4
   345     0024                     	ds	4
   346     0028                     ___lmul@product:
   347                           
   348                           ; 4 bytes @ 0x8
   349     0028                     	ds	4
   350     002C                     ?_rand:
   351                           
   352                           ; 2 bytes @ 0xC
   353     002C                     	ds	2
   354     002E                     ??_rand:
   355                           
   356                           ; 1 bytes @ 0xE
   357     002E                     	ds	5
   358     0033                     ?___awmod:
   359     0033                     ___awmod@divisor:	
   360                           ; 2 bytes @ 0x13
   361                           
   362                           
   363                           ; 2 bytes @ 0x13
   364     0033                     	ds	2
   365     0035                     ___awmod@dividend:
   366                           
   367                           ; 2 bytes @ 0x15
   368     0035                     	ds	2
   369     0037                     ??___awmod:
   370                           
   371                           ; 1 bytes @ 0x17
   372     0037                     	ds	1
   373     0038                     ___awmod@counter:
   374                           
   375                           ; 1 bytes @ 0x18
   376     0038                     	ds	1
   377     0039                     ___awmod@sign:
   378                           
   379                           ; 1 bytes @ 0x19
   380     0039                     	ds	1
   381     003A                     ?_generateRandom:
   382     003A                     generateRandom@min:	
   383                           ; 2 bytes @ 0x1A
   384                           
   385                           
   386                           ; 2 bytes @ 0x1A
   387     003A                     	ds	2
   388     003C                     generateRandom@max:
   389                           
   390                           ; 2 bytes @ 0x1C
   391     003C                     	ds	2
   392     003E                     ??_generateRandom:
   393                           
   394                           ; 1 bytes @ 0x1E
   395     003E                     	ds	2
   396     0040                     generateRandom@randomNumber:
   397                           
   398                           ; 2 bytes @ 0x20
   399     0040                     	ds	2
   400     0042                     ??_setTorretPosition:
   401                           
   402                           ; 1 bytes @ 0x22
   403     0042                     	ds	1
   404                           
   405                           	psect	maintext
   406     0296                     __pmaintext:	
   407 ;;
   408 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   409 ;;
   410 ;; *************** function _main *****************
   411 ;; Defined at:
   412 ;;		line 224 in file "main.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;		None
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : B00/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1
   426 ;;      Params:         0       0       0
   427 ;;      Locals:         0       0       0
   428 ;;      Temps:          0       0       0
   429 ;;      Totals:         0       0       0
   430 ;;Total ram usage:        0 bytes
   431 ;; Hardware stack levels required when called: 6
   432 ;; This function calls:
   433 ;;		_setTorretPosition
   434 ;;		_setup
   435 ;; This function is called by:
   436 ;;		Startup code after reset
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440     0296                     _main:	
   441                           ;psect for function _main
   442                           
   443     0296                     l1324:	
   444                           ;incstack = 0
   445                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   446                           
   447                           
   448                           ;main.c: 225:     setup();
   449     0296  2267               	fcall	_setup
   450     0297                     l1326:
   451                           
   452                           ;main.c: 228:       if (mustCheckServos == 1) {
   453     0297  0378               	decf	_mustCheckServos,w
   454     0298  1D03               	btfss	3,2
   455     0299  2A9B               	goto	u811
   456     029A  2A9C               	goto	u810
   457     029B                     u811:
   458     029B  2A97               	goto	l1326
   459     029C                     u810:
   460     029C                     l1328:
   461                           
   462                           ;main.c: 229:         mustCheckServos =0;
   463     029C  01F8               	clrf	_mustCheckServos
   464     029D                     l1330:
   465                           
   466                           ;main.c: 230:         setTorretPosition();
   467     029D  201F               	fcall	_setTorretPosition
   468     029E  2A97               	goto	l1326
   469     029F  280C               	ljmp	start
   470     02A0                     __end_of_main:
   471                           
   472                           	psect	text1
   473     0267                     __ptext1:	
   474 ;; *************** function _setup *****************
   475 ;; Defined at:
   476 ;;		line 142 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, pclath, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMMON   BANK0   BANK1
   490 ;;      Params:         0       0       0
   491 ;;      Locals:         0       0       0
   492 ;;      Temps:          0       2       0
   493 ;;      Totals:         0       2       0
   494 ;;Total ram usage:        2 bytes
   495 ;; Hardware stack levels used: 1
   496 ;; Hardware stack levels required when called: 3
   497 ;; This function calls:
   498 ;;		_initPWM
   499 ;;		_setupTimer0
   500 ;;		_setupTimer1
   501 ;;		_srand
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507     0267                     _setup:	
   508                           ;psect for function _setup
   509                           
   510     0267                     l1240:	
   511                           ;incstack = 0
   512                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   513                           
   514                           
   515                           ;main.c: 143:     srand(INDF);
   516     0267  1283               	bcf	3,5	;RP0=0, select bank0
   517     0268  0800               	movf	0,w	;volatile
   518     0269  00A2               	movwf	??_setup
   519     026A  01A3               	clrf	??_setup+1
   520     026B  0822               	movf	??_setup,w
   521     026C  00A0               	movwf	srand@x
   522     026D  0823               	movf	??_setup+1,w
   523     026E  00A1               	movwf	srand@x+1
   524     026F  22BC               	fcall	_srand
   525     0270                     l1242:
   526                           
   527                           ;main.c: 144:     OSCCON = 0x71;
   528     0270  3071               	movlw	113
   529     0271  1683               	bsf	3,5	;RP0=1, select bank1
   530     0272  008F               	movwf	15	;volatile
   531     0273                     l1244:
   532                           
   533                           ;main.c: 145:     ANSEL = 0;
   534     0273  019F               	clrf	31	;volatile
   535     0274                     l1246:
   536                           
   537                           ;main.c: 146:     TRISIO = 0b00000011;
   538     0274  3003               	movlw	3
   539     0275  0085               	movwf	5	;volatile
   540     0276                     l1248:
   541                           
   542                           ;main.c: 147:     initPWM();
   543     0276  2288               	fcall	_initPWM
   544     0277                     l1250:
   545                           
   546                           ;main.c: 148:     setupTimer1();
   547     0277  22A0               	fcall	_setupTimer1
   548     0278                     l1252:
   549                           
   550                           ;main.c: 149:     setupTimer0();
   551     0278  22AA               	fcall	_setupTimer0
   552                           
   553                           ;main.c: 150:     ContadorMotor = 0;
   554     0279  01F6               	clrf	_ContadorMotor
   555     027A                     l1254:
   556                           
   557                           ;main.c: 151:     GPIObits.GP2 = 1;
   558     027A  1283               	bcf	3,5	;RP0=0, select bank0
   559     027B  1505               	bsf	5,2	;volatile
   560     027C                     l1256:
   561                           
   562                           ;main.c: 152:     GPIObits.GP4 = 1;
   563     027C  1605               	bsf	5,4	;volatile
   564     027D                     l1258:
   565                           
   566                           ;main.c: 153:     GPIObits.GP5 = 1;
   567     027D  1685               	bsf	5,5	;volatile
   568     027E                     l1260:
   569                           
   570                           ;main.c: 156:     INTCONbits.GIE = 1;
   571     027E  178B               	bsf	11,7	;volatile
   572     027F                     l1262:
   573                           
   574                           ;main.c: 157:     INTCONbits.PEIE = 1;
   575     027F  170B               	bsf	11,6	;volatile
   576     0280                     l1264:
   577                           
   578                           ;main.c: 159:     INTCONbits.TMR0IF = 0;
   579     0280  110B               	bcf	11,2	;volatile
   580     0281                     l1266:
   581                           
   582                           ;main.c: 160:     PIR1bits.TMR1IF = 0;
   583     0281  100C               	bcf	12,0	;volatile
   584     0282                     l1268:
   585                           
   586                           ;main.c: 161:     PIR1bits.TMR2IF = 0;
   587     0282  108C               	bcf	12,1	;volatile
   588     0283                     l1270:
   589                           
   590                           ;main.c: 162:     INTCONbits.TMR0IE = 1;
   591     0283  168B               	bsf	11,5	;volatile
   592     0284                     l1272:
   593                           
   594                           ;main.c: 163:     PIE1bits.TMR2IE = 1;
   595     0284  1683               	bsf	3,5	;RP0=1, select bank1
   596     0285  148C               	bsf	12,1	;volatile
   597     0286                     l1274:
   598                           
   599                           ;main.c: 164:     PIE1bits.TMR1IE = 1;
   600     0286  140C               	bsf	12,0	;volatile
   601     0287                     l95:
   602     0287  0008               	return
   603     0288                     __end_of_setup:
   604                           
   605                           	psect	text2
   606     02BC                     __ptext2:	
   607 ;; *************** function _srand *****************
   608 ;; Defined at:
   609 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;  x               2    0[BANK0 ] unsigned int 
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMMON   BANK0   BANK1
   623 ;;      Params:         0       2       0
   624 ;;      Locals:         0       0       0
   625 ;;      Temps:          0       0       0
   626 ;;      Totals:         0       2       0
   627 ;;Total ram usage:        2 bytes
   628 ;; Hardware stack levels used: 1
   629 ;; Hardware stack levels required when called: 2
   630 ;; This function calls:
   631 ;;		Nothing
   632 ;; This function is called by:
   633 ;;		_setup
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637     02BC                     _srand:	
   638                           ;psect for function _srand
   639                           
   640     02BC                     l1230:	
   641                           ;incstack = 0
   642                           ; Regs used in _srand: [wreg]
   643                           
   644     02BC  1283               	bcf	3,5	;RP0=0, select bank0
   645     02BD  0820               	movf	srand@x,w
   646     02BE  00D1               	movwf	_randx
   647     02BF  0821               	movf	srand@x+1,w
   648     02C0  00D2               	movwf	_randx+1
   649     02C1  01D3               	clrf	_randx+2
   650     02C2  01D4               	clrf	_randx+3
   651     02C3                     l669:
   652     02C3  0008               	return
   653     02C4                     __end_of_srand:
   654                           
   655                           	psect	text3
   656     02A0                     __ptext3:	
   657 ;; *************** function _setupTimer1 *****************
   658 ;; Defined at:
   659 ;;		line 125 in file "main.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1
   673 ;;      Params:         0       0       0
   674 ;;      Locals:         0       0       0
   675 ;;      Temps:          0       0       0
   676 ;;      Totals:         0       0       0
   677 ;;Total ram usage:        0 bytes
   678 ;; Hardware stack levels used: 1
   679 ;; Hardware stack levels required when called: 2
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		_setup
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687     02A0                     _setupTimer1:	
   688                           ;psect for function _setupTimer1
   689                           
   690     02A0                     l800:	
   691                           ;incstack = 0
   692                           ; Regs used in _setupTimer1: [wreg+status,2+status,0]
   693                           
   694                           
   695                           ;main.c: 126:     T1CON = 0;
   696     02A0  1283               	bcf	3,5	;RP0=0, select bank0
   697     02A1  0190               	clrf	16	;volatile
   698     02A2                     l802:
   699                           
   700                           ;main.c: 127:     T1CONbits.T1CKPS = 0;
   701     02A2  30CF               	movlw	-49
   702     02A3  0590               	andwf	16,f	;volatile
   703     02A4                     l804:
   704                           
   705                           ;main.c: 128:     TMR1 = 61561;
   706     02A4  30F0               	movlw	240
   707     02A5  008F               	movwf	15	;volatile
   708     02A6  3079               	movlw	121
   709     02A7  008E               	movwf	14	;volatile
   710     02A8                     l806:
   711                           
   712                           ;main.c: 129:     T1CONbits.TMR1ON = 1;
   713     02A8  1410               	bsf	16,0	;volatile
   714     02A9                     l89:
   715     02A9  0008               	return
   716     02AA                     __end_of_setupTimer1:
   717                           
   718                           	psect	text4
   719     02AA                     __ptext4:	
   720 ;; *************** function _setupTimer0 *****************
   721 ;; Defined at:
   722 ;;		line 117 in file "main.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;		None
   725 ;; Auto vars:     Size  Location     Type
   726 ;;		None
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg, status,2, status,0
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMMON   BANK0   BANK1
   736 ;;      Params:         0       0       0
   737 ;;      Locals:         0       0       0
   738 ;;      Temps:          0       0       0
   739 ;;      Totals:         0       0       0
   740 ;;Total ram usage:        0 bytes
   741 ;; Hardware stack levels used: 1
   742 ;; Hardware stack levels required when called: 2
   743 ;; This function calls:
   744 ;;		Nothing
   745 ;; This function is called by:
   746 ;;		_setup
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750     02AA                     _setupTimer0:	
   751                           ;psect for function _setupTimer0
   752                           
   753     02AA                     l790:	
   754                           ;incstack = 0
   755                           ; Regs used in _setupTimer0: [wreg+status,2+status,0]
   756                           
   757                           
   758                           ;main.c: 118:     OPTION_REG = 0;
   759     02AA  1683               	bsf	3,5	;RP0=1, select bank1
   760     02AB  0181               	clrf	1	;volatile
   761     02AC                     l792:
   762                           
   763                           ;main.c: 119:     OPTION_REGbits.PSA = 0;
   764     02AC  1181               	bcf	1,3	;volatile
   765     02AD                     l794:
   766                           
   767                           ;main.c: 120:     OPTION_REGbits.PS = 7;
   768     02AD  3007               	movlw	7
   769     02AE  0481               	iorwf	1,f	;volatile
   770     02AF                     l796:
   771                           
   772                           ;main.c: 121:     TMR0 = 176;
   773     02AF  30B0               	movlw	176
   774     02B0  1283               	bcf	3,5	;RP0=0, select bank0
   775     02B1  0081               	movwf	1	;volatile
   776     02B2                     l798:
   777                           
   778                           ;main.c: 122:     INTCONbits.TMR0IE = 1;
   779     02B2  168B               	bsf	11,5	;volatile
   780     02B3                     l86:
   781     02B3  0008               	return
   782     02B4                     __end_of_setupTimer0:
   783                           
   784                           	psect	text5
   785     0288                     __ptext5:	
   786 ;; *************** function _initPWM *****************
   787 ;; Defined at:
   788 ;;		line 132 in file "main.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, status,2
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1
   802 ;;      Params:         0       0       0
   803 ;;      Locals:         0       0       0
   804 ;;      Temps:          0       0       0
   805 ;;      Totals:         0       0       0
   806 ;;Total ram usage:        0 bytes
   807 ;; Hardware stack levels used: 1
   808 ;; Hardware stack levels required when called: 2
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_setup
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816     0288                     _initPWM:	
   817                           ;psect for function _initPWM
   818                           
   819     0288                     l1038:	
   820                           ;incstack = 0
   821                           ; Regs used in _initPWM: [wreg+status,2]
   822                           
   823                           
   824                           ;main.c: 133:     CCP1CON = 0b00000000;
   825     0288  1283               	bcf	3,5	;RP0=0, select bank0
   826     0289  0195               	clrf	21	;volatile
   827     028A                     l1040:
   828                           
   829                           ;main.c: 134:     T2CON = 0b00000011;
   830     028A  3003               	movlw	3
   831     028B  0092               	movwf	18	;volatile
   832     028C                     l1042:
   833                           
   834                           ;main.c: 135:     TMR2ON = 1;
   835     028C  1512               	bsf	18,2	;volatile
   836     028D                     l1044:
   837                           
   838                           ;main.c: 136:     PR2 = 249;
   839     028D  30F9               	movlw	249
   840     028E  1683               	bsf	3,5	;RP0=1, select bank1
   841     028F  0092               	movwf	18	;volatile
   842     0290                     l1046:
   843                           
   844                           ;main.c: 138:     MaskMotor = 0b00010000;
   845     0290  3010               	movlw	16
   846     0291  00F9               	movwf	_MaskMotor
   847     0292                     l1048:
   848                           
   849                           ;main.c: 139:     EstadoRCServo = 1;
   850     0292  1283               	bcf	3,5	;RP0=0, select bank0
   851     0293  01D5               	clrf	_EstadoRCServo
   852     0294  0AD5               	incf	_EstadoRCServo,f
   853     0295                     l92:
   854     0295  0008               	return
   855     0296                     __end_of_initPWM:
   856                           
   857                           	psect	text6
   858     001F                     __ptext6:	
   859 ;; *************** function _setTorretPosition *****************
   860 ;; Defined at:
   861 ;;		line 175 in file "main.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;		None
   866 ;; Return value:  Size  Location     Type
   867 ;;                  1    wreg      void 
   868 ;; Registers used:
   869 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMMON   BANK0   BANK1
   875 ;;      Params:         0       0       0
   876 ;;      Locals:         0       0       0
   877 ;;      Temps:          0       1       0
   878 ;;      Totals:         0       1       0
   879 ;;Total ram usage:        1 bytes
   880 ;; Hardware stack levels used: 1
   881 ;; Hardware stack levels required when called: 5
   882 ;; This function calls:
   883 ;;		_generateRandom
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889     001F                     _setTorretPosition:	
   890                           ;psect for function _setTorretPosition
   891                           
   892     001F                     l1276:	
   893                           ;incstack = 0
   894                           ; Regs used in _setTorretPosition: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   895                           
   896                           
   897                           ;main.c: 178:     if (speedCounter[0] > speed[0]) {
   898     001F  1283               	bcf	3,5	;RP0=0, select bank0
   899     0020  084D               	movf	_speedCounter,w
   900     0021  024F               	subwf	_speed,w
   901     0022  1803               	skipnc
   902     0023  2825               	goto	u711
   903     0024  2826               	goto	u710
   904     0025                     u711:
   905     0025  2889               	goto	l1298
   906     0026                     u710:
   907     0026                     l1278:
   908                           
   909                           ;main.c: 179:         speedCounter[0] = 0;
   910     0026  01CD               	clrf	_speedCounter
   911     0027                     l1280:
   912                           
   913                           ;main.c: 180:         if (motorAngle[0] == motorTarget[0]) {
   914     0027  0848               	movf	_motorTarget+1,w
   915     0028  0644               	xorwf	_motorAngle+1,w
   916     0029  1D03               	skipz
   917     002A  282D               	goto	u725
   918     002B  0847               	movf	_motorTarget,w
   919     002C  0643               	xorwf	_motorAngle,w
   920     002D                     u725:
   921     002D  1D03               	skipz
   922     002E  2830               	goto	u721
   923     002F  2831               	goto	u720
   924     0030                     u721:
   925     0030  284D               	goto	l1284
   926     0031                     u720:
   927     0031                     l1282:
   928                           
   929                           ;main.c: 181:             motorTarget[0] = (int)generateRandom(-50, 50);
   930     0031  30CE               	movlw	206
   931     0032  1283               	bcf	3,5	;RP0=0, select bank0
   932     0033  00BA               	movwf	generateRandom@min
   933     0034  30FF               	movlw	255
   934     0035  00BB               	movwf	generateRandom@min+1
   935     0036  3032               	movlw	50
   936     0037  00BC               	movwf	generateRandom@max
   937     0038  3000               	movlw	0
   938     0039  00BD               	movwf	generateRandom@max+1
   939     003A  221E               	fcall	_generateRandom
   940     003B  1283               	bcf	3,5	;RP0=0, select bank0
   941     003C  083B               	movf	?_generateRandom+1,w
   942     003D  00C8               	movwf	_motorTarget+1
   943     003E  083A               	movf	?_generateRandom,w
   944     003F  00C7               	movwf	_motorTarget
   945                           
   946                           ;main.c: 182:             speed[0] = (uint8_t)generateRandom(5, 10);
   947     0040  3005               	movlw	5
   948     0041  00BA               	movwf	generateRandom@min
   949     0042  3000               	movlw	0
   950     0043  00BB               	movwf	generateRandom@min+1
   951     0044  300A               	movlw	10
   952     0045  00BC               	movwf	generateRandom@max
   953     0046  3000               	movlw	0
   954     0047  00BD               	movwf	generateRandom@max+1
   955     0048  221E               	fcall	_generateRandom
   956     0049  1283               	bcf	3,5	;RP0=0, select bank0
   957     004A  083A               	movf	?_generateRandom,w
   958     004B  00CF               	movwf	_speed
   959                           
   960                           ;main.c: 183:         } else if (motorAngle[0] <= -50) {
   961     004C  288D               	goto	l1300
   962     004D                     l1284:
   963     004D  0844               	movf	_motorAngle+1,w
   964     004E  3A80               	xorlw	128
   965     004F  00FF               	movwf	btemp+1
   966     0050  307F               	movlw	127
   967     0051  027F               	subwf	btemp+1,w
   968     0052  1D03               	skipz
   969     0053  2856               	goto	u735
   970     0054  30CF               	movlw	207
   971     0055  0243               	subwf	_motorAngle,w
   972     0056                     u735:
   973     0056  1803               	skipnc
   974     0057  2859               	goto	u731
   975     0058  285A               	goto	u730
   976     0059                     u731:
   977     0059  285B               	goto	l1288
   978     005A                     u730:
   979     005A  2831               	goto	l1282
   980     005B                     l1288:
   981     005B  1283               	bcf	3,5	;RP0=0, select bank0
   982     005C  0844               	movf	_motorAngle+1,w
   983     005D  3A80               	xorlw	128
   984     005E  00FF               	movwf	btemp+1
   985     005F  3080               	movlw	128
   986     0060  027F               	subwf	btemp+1,w
   987     0061  1D03               	skipz
   988     0062  2865               	goto	u745
   989     0063  3032               	movlw	50
   990     0064  0243               	subwf	_motorAngle,w
   991     0065                     u745:
   992     0065  1C03               	skipc
   993     0066  2868               	goto	u741
   994     0067  2869               	goto	u740
   995     0068                     u741:
   996     0068  286A               	goto	l1292
   997     0069                     u740:
   998     0069  2831               	goto	l1282
   999     006A                     l1292:
  1000     006A  1283               	bcf	3,5	;RP0=0, select bank0
  1001     006B  0844               	movf	_motorAngle+1,w
  1002     006C  3A80               	xorlw	128
  1003     006D  00C2               	movwf	??_setTorretPosition
  1004     006E  0848               	movf	_motorTarget+1,w
  1005     006F  3A80               	xorlw	128
  1006     0070  0242               	subwf	??_setTorretPosition,w
  1007     0071  1D03               	skipz
  1008     0072  2875               	goto	u755
  1009     0073  0847               	movf	_motorTarget,w
  1010     0074  0243               	subwf	_motorAngle,w
  1011     0075                     u755:
  1012     0075  1803               	skipnc
  1013     0076  2878               	goto	u751
  1014     0077  2879               	goto	u750
  1015     0078                     u751:
  1016     0078  2881               	goto	l1296
  1017     0079                     u750:
  1018     0079                     l1294:
  1019                           
  1020                           ;main.c: 190:             motorAngle[0]++;
  1021     0079  3001               	movlw	1
  1022     007A  1283               	bcf	3,5	;RP0=0, select bank0
  1023     007B  07C3               	addwf	_motorAngle,f
  1024     007C  1803               	skipnc
  1025     007D  0AC4               	incf	_motorAngle+1,f
  1026     007E  3000               	movlw	0
  1027     007F  07C4               	addwf	_motorAngle+1,f
  1028                           
  1029                           ;main.c: 191:         } else {
  1030     0080  288D               	goto	l1300
  1031     0081                     l1296:
  1032                           
  1033                           ;main.c: 192:             motorAngle[0]--;
  1034     0081  30FF               	movlw	255
  1035     0082  1283               	bcf	3,5	;RP0=0, select bank0
  1036     0083  07C3               	addwf	_motorAngle,f
  1037     0084  1803               	skipnc
  1038     0085  0AC4               	incf	_motorAngle+1,f
  1039     0086  30FF               	movlw	255
  1040     0087  07C4               	addwf	_motorAngle+1,f
  1041     0088  288D               	goto	l1300
  1042     0089                     l1298:
  1043                           
  1044                           ;main.c: 195:         speedCounter[0]++;
  1045     0089  3001               	movlw	1
  1046     008A  00C2               	movwf	??_setTorretPosition
  1047     008B  0842               	movf	??_setTorretPosition,w
  1048     008C  07CD               	addwf	_speedCounter,f
  1049     008D                     l1300:
  1050                           
  1051                           ;main.c: 202:     if (speedCounter[1] > speed[1]) {
  1052     008D  084E               	movf	_speedCounter+1,w
  1053     008E  0250               	subwf	_speed+1,w
  1054     008F  1803               	skipnc
  1055     0090  2892               	goto	u761
  1056     0091  2893               	goto	u760
  1057     0092                     u761:
  1058     0092  28F6               	goto	l1322
  1059     0093                     u760:
  1060     0093                     l1302:
  1061                           
  1062                           ;main.c: 203:         speedCounter[1] = 0;
  1063     0093  01CE               	clrf	_speedCounter+1
  1064     0094                     l1304:
  1065                           
  1066                           ;main.c: 205:         if (motorAngle[1] == motorTarget[1]) {
  1067     0094  084A               	movf	_motorTarget+3,w
  1068     0095  0646               	xorwf	_motorAngle+3,w
  1069     0096  1D03               	skipz
  1070     0097  289A               	goto	u775
  1071     0098  0849               	movf	_motorTarget+2,w
  1072     0099  0645               	xorwf	_motorAngle+2,w
  1073     009A                     u775:
  1074     009A  1D03               	skipz
  1075     009B  289D               	goto	u771
  1076     009C  289E               	goto	u770
  1077     009D                     u771:
  1078     009D  28BA               	goto	l1308
  1079     009E                     u770:
  1080     009E                     l1306:
  1081                           
  1082                           ;main.c: 206:             motorTarget[1] = (int)generateRandom(45, 90);
  1083     009E  302D               	movlw	45
  1084     009F  1283               	bcf	3,5	;RP0=0, select bank0
  1085     00A0  00BA               	movwf	generateRandom@min
  1086     00A1  3000               	movlw	0
  1087     00A2  00BB               	movwf	generateRandom@min+1
  1088     00A3  305A               	movlw	90
  1089     00A4  00BC               	movwf	generateRandom@max
  1090     00A5  3000               	movlw	0
  1091     00A6  00BD               	movwf	generateRandom@max+1
  1092     00A7  221E               	fcall	_generateRandom
  1093     00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1094     00A9  083B               	movf	?_generateRandom+1,w
  1095     00AA  00CA               	movwf	_motorTarget+3
  1096     00AB  083A               	movf	?_generateRandom,w
  1097     00AC  00C9               	movwf	_motorTarget+2
  1098                           
  1099                           ;main.c: 207:             speed[1] = (uint8_t)generateRandom(5, 10);
  1100     00AD  3005               	movlw	5
  1101     00AE  00BA               	movwf	generateRandom@min
  1102     00AF  3000               	movlw	0
  1103     00B0  00BB               	movwf	generateRandom@min+1
  1104     00B1  300A               	movlw	10
  1105     00B2  00BC               	movwf	generateRandom@max
  1106     00B3  3000               	movlw	0
  1107     00B4  00BD               	movwf	generateRandom@max+1
  1108     00B5  221E               	fcall	_generateRandom
  1109     00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1110     00B7  083A               	movf	?_generateRandom,w
  1111     00B8  00D0               	movwf	_speed+1
  1112                           
  1113                           ;main.c: 208:         } else if (motorTarget[1] <= 45) {
  1114     00B9  28FA               	goto	l121
  1115     00BA                     l1308:
  1116     00BA  084A               	movf	_motorTarget+3,w
  1117     00BB  3A80               	xorlw	128
  1118     00BC  00FF               	movwf	btemp+1
  1119     00BD  3080               	movlw	128
  1120     00BE  027F               	subwf	btemp+1,w
  1121     00BF  1D03               	skipz
  1122     00C0  28C3               	goto	u785
  1123     00C1  302E               	movlw	46
  1124     00C2  0249               	subwf	_motorTarget+2,w
  1125     00C3                     u785:
  1126     00C3  1803               	skipnc
  1127     00C4  28C6               	goto	u781
  1128     00C5  28C7               	goto	u780
  1129     00C6                     u781:
  1130     00C6  28C8               	goto	l1312
  1131     00C7                     u780:
  1132     00C7  289E               	goto	l1306
  1133     00C8                     l1312:
  1134     00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1135     00C9  084A               	movf	_motorTarget+3,w
  1136     00CA  3A80               	xorlw	128
  1137     00CB  00FF               	movwf	btemp+1
  1138     00CC  3080               	movlw	128
  1139     00CD  027F               	subwf	btemp+1,w
  1140     00CE  1D03               	skipz
  1141     00CF  28D2               	goto	u795
  1142     00D0  305A               	movlw	90
  1143     00D1  0249               	subwf	_motorTarget+2,w
  1144     00D2                     u795:
  1145     00D2  1C03               	skipc
  1146     00D3  28D5               	goto	u791
  1147     00D4  28D6               	goto	u790
  1148     00D5                     u791:
  1149     00D5  28D7               	goto	l1316
  1150     00D6                     u790:
  1151     00D6  289E               	goto	l1306
  1152     00D7                     l1316:
  1153     00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1154     00D8  0846               	movf	_motorAngle+3,w
  1155     00D9  3A80               	xorlw	128
  1156     00DA  00C2               	movwf	??_setTorretPosition
  1157     00DB  084A               	movf	_motorTarget+3,w
  1158     00DC  3A80               	xorlw	128
  1159     00DD  0242               	subwf	??_setTorretPosition,w
  1160     00DE  1D03               	skipz
  1161     00DF  28E2               	goto	u805
  1162     00E0  0849               	movf	_motorTarget+2,w
  1163     00E1  0245               	subwf	_motorAngle+2,w
  1164     00E2                     u805:
  1165     00E2  1803               	skipnc
  1166     00E3  28E5               	goto	u801
  1167     00E4  28E6               	goto	u800
  1168     00E5                     u801:
  1169     00E5  28EE               	goto	l1320
  1170     00E6                     u800:
  1171     00E6                     l1318:
  1172                           
  1173                           ;main.c: 215:             motorAngle[1]++;
  1174     00E6  3001               	movlw	1
  1175     00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1176     00E8  07C5               	addwf	_motorAngle+2,f
  1177     00E9  1803               	skipnc
  1178     00EA  0AC6               	incf	_motorAngle+3,f
  1179     00EB  3000               	movlw	0
  1180     00EC  07C6               	addwf	_motorAngle+3,f
  1181                           
  1182                           ;main.c: 216:         } else {
  1183     00ED  28FA               	goto	l121
  1184     00EE                     l1320:
  1185                           
  1186                           ;main.c: 217:             motorAngle[1]--;
  1187     00EE  30FF               	movlw	255
  1188     00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1189     00F0  07C5               	addwf	_motorAngle+2,f
  1190     00F1  1803               	skipnc
  1191     00F2  0AC6               	incf	_motorAngle+3,f
  1192     00F3  30FF               	movlw	255
  1193     00F4  07C6               	addwf	_motorAngle+3,f
  1194     00F5  28FA               	goto	l121
  1195     00F6                     l1322:
  1196                           
  1197                           ;main.c: 220:         speedCounter[1]++;
  1198     00F6  3001               	movlw	1
  1199     00F7  00C2               	movwf	??_setTorretPosition
  1200     00F8  0842               	movf	??_setTorretPosition,w
  1201     00F9  07CE               	addwf	_speedCounter+1,f
  1202     00FA                     l121:
  1203     00FA  0008               	return
  1204     00FB                     __end_of_setTorretPosition:
  1205                           
  1206                           	psect	text7
  1207     021E                     __ptext7:	
  1208 ;; *************** function _generateRandom *****************
  1209 ;; Defined at:
  1210 ;;		line 167 in file "main.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  min             2   26[BANK0 ] int 
  1213 ;;  max             2   28[BANK0 ] int 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  randomNumber    2   32[BANK0 ] int 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  2   26[BANK0 ] int 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2, status,0, pclath, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1
  1225 ;;      Params:         0       4       0
  1226 ;;      Locals:         0       2       0
  1227 ;;      Temps:          0       2       0
  1228 ;;      Totals:         0       8       0
  1229 ;;Total ram usage:        8 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 4
  1232 ;; This function calls:
  1233 ;;		___awmod
  1234 ;;		_rand
  1235 ;; This function is called by:
  1236 ;;		_setTorretPosition
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240     021E                     _generateRandom:	
  1241                           ;psect for function _generateRandom
  1242                           
  1243     021E                     l1232:	
  1244                           ;incstack = 0
  1245                           ; Regs used in _generateRandom: [wreg+status,2+status,0+pclath+cstack]
  1246                           
  1247     021E                     l1234:
  1248                           
  1249                           ;main.c: 170:     randomNumber = (rand() % (max - min + 1)) +
  1250     021E  1283               	bcf	3,5	;RP0=0, select bank0
  1251     021F  083A               	movf	generateRandom@min,w
  1252     0220  023C               	subwf	generateRandom@max,w
  1253     0221  00BE               	movwf	??_generateRandom
  1254     0222  083B               	movf	generateRandom@min+1,w
  1255     0223  1C03               	skipc
  1256     0224  0A3B               	incf	generateRandom@min+1,w
  1257     0225  023D               	subwf	generateRandom@max+1,w
  1258     0226  00BF               	movwf	??_generateRandom+1
  1259     0227  083E               	movf	??_generateRandom,w
  1260     0228  3E01               	addlw	1
  1261     0229  00B3               	movwf	___awmod@divisor
  1262     022A  083F               	movf	??_generateRandom+1,w
  1263     022B  1803               	skipnc
  1264     022C  3E01               	addlw	1
  1265     022D  3E00               	addlw	0
  1266     022E  00B4               	movwf	___awmod@divisor+1
  1267     022F  219C               	fcall	_rand
  1268     0230  1283               	bcf	3,5	;RP0=0, select bank0
  1269     0231  082D               	movf	?_rand+1,w
  1270     0232  00B6               	movwf	___awmod@dividend+1
  1271     0233  082C               	movf	?_rand,w
  1272     0234  00B5               	movwf	___awmod@dividend
  1273     0235  20FB               	fcall	___awmod
  1274     0236  1283               	bcf	3,5	;RP0=0, select bank0
  1275     0237  083A               	movf	generateRandom@min,w
  1276     0238  0733               	addwf	?___awmod,w
  1277     0239  00C0               	movwf	generateRandom@randomNumber
  1278     023A  083B               	movf	generateRandom@min+1,w
  1279     023B  1803               	skipnc
  1280     023C  0A3B               	incf	generateRandom@min+1,w
  1281     023D  0734               	addwf	?___awmod+1,w
  1282     023E  00C1               	movwf	generateRandom@randomNumber+1
  1283     023F                     l1236:
  1284                           
  1285                           ;main.c: 172:     return randomNumber;
  1286     023F  0841               	movf	generateRandom@randomNumber+1,w
  1287     0240  00BB               	movwf	?_generateRandom+1
  1288     0241  0840               	movf	generateRandom@randomNumber,w
  1289     0242  00BA               	movwf	?_generateRandom
  1290     0243                     l98:
  1291     0243  0008               	return
  1292     0244                     __end_of_generateRandom:
  1293                           
  1294                           	psect	text8
  1295     019C                     __ptext8:	
  1296 ;; *************** function _rand *****************
  1297 ;; Defined at:
  1298 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  2   12[BANK0 ] int 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0, pclath, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1
  1312 ;;      Params:         0       2       0
  1313 ;;      Locals:         0       0       0
  1314 ;;      Temps:          0       5       0
  1315 ;;      Totals:         0       7       0
  1316 ;;Total ram usage:        7 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; Hardware stack levels required when called: 3
  1319 ;; This function calls:
  1320 ;;		___lmul
  1321 ;; This function is called by:
  1322 ;;		_generateRandom
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326     019C                     _rand:	
  1327                           ;psect for function _rand
  1328                           
  1329     019C                     l1222:	
  1330                           ;incstack = 0
  1331                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1332                           
  1333     019C  1283               	bcf	3,5	;RP0=0, select bank0
  1334     019D  0854               	movf	_randx+3,w
  1335     019E  00A3               	movwf	___lmul@multiplier+3
  1336     019F  0853               	movf	_randx+2,w
  1337     01A0  00A2               	movwf	___lmul@multiplier+2
  1338     01A1  0852               	movf	_randx+1,w
  1339     01A2  00A1               	movwf	___lmul@multiplier+1
  1340     01A3  0851               	movf	_randx,w
  1341     01A4  00A0               	movwf	___lmul@multiplier
  1342     01A5  3041               	movlw	65
  1343     01A6  00A7               	movwf	___lmul@multiplicand+3
  1344     01A7  30C6               	movlw	198
  1345     01A8  00A6               	movwf	___lmul@multiplicand+2
  1346     01A9  304E               	movlw	78
  1347     01AA  00A5               	movwf	___lmul@multiplicand+1
  1348     01AB  306D               	movlw	109
  1349     01AC  00A4               	movwf	___lmul@multiplicand
  1350     01AD  2155               	fcall	___lmul
  1351     01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1352     01AF  0823               	movf	?___lmul+3,w
  1353     01B0  00D4               	movwf	_randx+3
  1354     01B1  0822               	movf	?___lmul+2,w
  1355     01B2  00D3               	movwf	_randx+2
  1356     01B3  0821               	movf	?___lmul+1,w
  1357     01B4  00D2               	movwf	_randx+1
  1358     01B5  0820               	movf	?___lmul,w
  1359     01B6  00D1               	movwf	_randx
  1360     01B7                     l1224:
  1361     01B7  3039               	movlw	57
  1362     01B8  07D1               	addwf	_randx,f
  1363     01B9  3030               	movlw	48
  1364     01BA  1803               	skipnc
  1365     01BB  3031               	movlw	49
  1366     01BC  07D2               	addwf	_randx+1,f
  1367     01BD  3000               	movlw	0
  1368     01BE  1803               	skipnc
  1369     01BF  3001               	movlw	1
  1370     01C0  07D3               	addwf	_randx+2,f
  1371     01C1  3000               	movlw	0
  1372     01C2  1803               	skipnc
  1373     01C3  3001               	movlw	1
  1374     01C4  07D4               	addwf	_randx+3,f
  1375     01C5                     l1226:
  1376     01C5  0851               	movf	_randx,w
  1377     01C6  00AE               	movwf	??_rand
  1378     01C7  0852               	movf	_randx+1,w
  1379     01C8  00AF               	movwf	??_rand+1
  1380     01C9  0853               	movf	_randx+2,w
  1381     01CA  00B0               	movwf	??_rand+2
  1382     01CB  0854               	movf	_randx+3,w
  1383     01CC  00B1               	movwf	??_rand+3
  1384     01CD  3010               	movlw	16
  1385     01CE  00B2               	movwf	??_rand+4
  1386     01CF                     u705:
  1387     01CF  0D31               	rlf	??_rand+3,w
  1388     01D0  0CB1               	rrf	??_rand+3,f
  1389     01D1  0CB0               	rrf	??_rand+2,f
  1390     01D2  0CAF               	rrf	??_rand+1,f
  1391     01D3  0CAE               	rrf	??_rand,f
  1392     01D4                     u700:
  1393     01D4  0BB2               	decfsz	??_rand+4,f
  1394     01D5  29CF               	goto	u705
  1395     01D6  30FF               	movlw	255
  1396     01D7  052E               	andwf	??_rand,w
  1397     01D8  00AC               	movwf	?_rand
  1398     01D9  307F               	movlw	127
  1399     01DA  052F               	andwf	??_rand+1,w
  1400     01DB  00AD               	movwf	?_rand+1
  1401     01DC                     l672:
  1402     01DC  0008               	return
  1403     01DD                     __end_of_rand:
  1404                           
  1405                           	psect	text9
  1406     0155                     __ptext9:	
  1407 ;; *************** function ___lmul *****************
  1408 ;; Defined at:
  1409 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1412 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  product         4    8[BANK0 ] unsigned long 
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  4    0[BANK0 ] unsigned long 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2, status,0
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMMON   BANK0   BANK1
  1424 ;;      Params:         0       8       0
  1425 ;;      Locals:         0       4       0
  1426 ;;      Temps:          1       0       0
  1427 ;;      Totals:         1      12       0
  1428 ;;Total ram usage:       13 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 2
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_rand
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438     0155                     ___lmul:	
  1439                           ;psect for function ___lmul
  1440                           
  1441     0155                     l1208:	
  1442                           ;incstack = 0
  1443                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1444                           
  1445     0155  3000               	movlw	0
  1446     0156  1283               	bcf	3,5	;RP0=0, select bank0
  1447     0157  00AB               	movwf	___lmul@product+3
  1448     0158  3000               	movlw	0
  1449     0159  00AA               	movwf	___lmul@product+2
  1450     015A  3000               	movlw	0
  1451     015B  00A9               	movwf	___lmul@product+1
  1452     015C  3000               	movlw	0
  1453     015D  00A8               	movwf	___lmul@product
  1454     015E                     l1210:
  1455     015E  1C20               	btfss	___lmul@multiplier,0
  1456     015F  2961               	goto	u651
  1457     0160  2962               	goto	u650
  1458     0161                     u651:
  1459     0161  2979               	goto	l1214
  1460     0162                     u650:
  1461     0162                     l1212:
  1462     0162  0824               	movf	___lmul@multiplicand,w
  1463     0163  07A8               	addwf	___lmul@product,f
  1464     0164  0825               	movf	___lmul@multiplicand+1,w
  1465     0165  1103               	clrz
  1466     0166  1803               	skipnc
  1467     0167  3E01               	addlw	1
  1468     0168  1903               	skipnz
  1469     0169  296B               	goto	u661
  1470     016A  07A9               	addwf	___lmul@product+1,f
  1471     016B                     u661:
  1472     016B  0826               	movf	___lmul@multiplicand+2,w
  1473     016C  1103               	clrz
  1474     016D  1803               	skipnc
  1475     016E  3E01               	addlw	1
  1476     016F  1903               	skipnz
  1477     0170  2972               	goto	u662
  1478     0171  07AA               	addwf	___lmul@product+2,f
  1479     0172                     u662:
  1480     0172  0827               	movf	___lmul@multiplicand+3,w
  1481     0173  1103               	clrz
  1482     0174  1803               	skipnc
  1483     0175  3E01               	addlw	1
  1484     0176  1903               	skipnz
  1485     0177  2979               	goto	u663
  1486     0178  07AB               	addwf	___lmul@product+3,f
  1487     0179                     u663:
  1488     0179                     l1214:
  1489     0179  3001               	movlw	1
  1490     017A  00F5               	movwf	??___lmul
  1491     017B                     u675:
  1492     017B  1003               	clrc
  1493     017C  0DA4               	rlf	___lmul@multiplicand,f
  1494     017D  0DA5               	rlf	___lmul@multiplicand+1,f
  1495     017E  0DA6               	rlf	___lmul@multiplicand+2,f
  1496     017F  0DA7               	rlf	___lmul@multiplicand+3,f
  1497     0180  0BF5               	decfsz	??___lmul,f
  1498     0181  297B               	goto	u675
  1499     0182                     l1216:
  1500     0182  3001               	movlw	1
  1501     0183                     u685:
  1502     0183  1003               	clrc
  1503     0184  0CA3               	rrf	___lmul@multiplier+3,f
  1504     0185  0CA2               	rrf	___lmul@multiplier+2,f
  1505     0186  0CA1               	rrf	___lmul@multiplier+1,f
  1506     0187  0CA0               	rrf	___lmul@multiplier,f
  1507     0188  3EFF               	addlw	-1
  1508     0189  1D03               	skipz
  1509     018A  2983               	goto	u685
  1510     018B  0823               	movf	___lmul@multiplier+3,w
  1511     018C  0422               	iorwf	___lmul@multiplier+2,w
  1512     018D  0421               	iorwf	___lmul@multiplier+1,w
  1513     018E  0420               	iorwf	___lmul@multiplier,w
  1514     018F  1D03               	skipz
  1515     0190  2992               	goto	u691
  1516     0191  2993               	goto	u690
  1517     0192                     u691:
  1518     0192  295E               	goto	l1210
  1519     0193                     u690:
  1520     0193                     l1218:
  1521     0193  082B               	movf	___lmul@product+3,w
  1522     0194  00A3               	movwf	?___lmul+3
  1523     0195  082A               	movf	___lmul@product+2,w
  1524     0196  00A2               	movwf	?___lmul+2
  1525     0197  0829               	movf	___lmul@product+1,w
  1526     0198  00A1               	movwf	?___lmul+1
  1527     0199  0828               	movf	___lmul@product,w
  1528     019A  00A0               	movwf	?___lmul
  1529     019B                     l230:
  1530     019B  0008               	return
  1531     019C                     __end_of___lmul:
  1532                           
  1533                           	psect	text10
  1534     00FB                     __ptext10:	
  1535 ;; *************** function ___awmod *****************
  1536 ;; Defined at:
  1537 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  divisor         2   19[BANK0 ] int 
  1540 ;;  dividend        2   21[BANK0 ] int 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  sign            1   25[BANK0 ] unsigned char 
  1543 ;;  counter         1   24[BANK0 ] unsigned char 
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  2   19[BANK0 ] int 
  1546 ;; Registers used:
  1547 ;;		wreg, status,2, status,0
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMMON   BANK0   BANK1
  1553 ;;      Params:         0       4       0
  1554 ;;      Locals:         0       2       0
  1555 ;;      Temps:          0       1       0
  1556 ;;      Totals:         0       7       0
  1557 ;;Total ram usage:        7 bytes
  1558 ;; Hardware stack levels used: 1
  1559 ;; Hardware stack levels required when called: 2
  1560 ;; This function calls:
  1561 ;;		Nothing
  1562 ;; This function is called by:
  1563 ;;		_generateRandom
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567     00FB                     ___awmod:	
  1568                           ;psect for function ___awmod
  1569                           
  1570     00FB                     l1000:	
  1571                           ;incstack = 0
  1572                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1573                           
  1574     00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1575     00FC  01B9               	clrf	___awmod@sign
  1576     00FD                     l1002:
  1577     00FD  1FB6               	btfss	___awmod@dividend+1,7
  1578     00FE  2900               	goto	u391
  1579     00FF  2901               	goto	u390
  1580     0100                     u391:
  1581     0100  2908               	goto	l1008
  1582     0101                     u390:
  1583     0101                     l1004:
  1584     0101  09B5               	comf	___awmod@dividend,f
  1585     0102  09B6               	comf	___awmod@dividend+1,f
  1586     0103  0AB5               	incf	___awmod@dividend,f
  1587     0104  1903               	skipnz
  1588     0105  0AB6               	incf	___awmod@dividend+1,f
  1589     0106                     l1006:
  1590     0106  01B9               	clrf	___awmod@sign
  1591     0107  0AB9               	incf	___awmod@sign,f
  1592     0108                     l1008:
  1593     0108  1FB4               	btfss	___awmod@divisor+1,7
  1594     0109  290B               	goto	u401
  1595     010A  290C               	goto	u400
  1596     010B                     u401:
  1597     010B  2911               	goto	l1012
  1598     010C                     u400:
  1599     010C                     l1010:
  1600     010C  09B3               	comf	___awmod@divisor,f
  1601     010D  09B4               	comf	___awmod@divisor+1,f
  1602     010E  0AB3               	incf	___awmod@divisor,f
  1603     010F  1903               	skipnz
  1604     0110  0AB4               	incf	___awmod@divisor+1,f
  1605     0111                     l1012:
  1606     0111  0833               	movf	___awmod@divisor,w
  1607     0112  0434               	iorwf	___awmod@divisor+1,w
  1608     0113  1903               	btfsc	3,2
  1609     0114  2916               	goto	u411
  1610     0115  2917               	goto	u410
  1611     0116                     u411:
  1612     0116  2946               	goto	l1030
  1613     0117                     u410:
  1614     0117                     l1014:
  1615     0117  01B8               	clrf	___awmod@counter
  1616     0118  0AB8               	incf	___awmod@counter,f
  1617     0119  2925               	goto	l1020
  1618     011A                     l1016:
  1619     011A  3001               	movlw	1
  1620     011B                     u425:
  1621     011B  1003               	clrc
  1622     011C  0DB3               	rlf	___awmod@divisor,f
  1623     011D  0DB4               	rlf	___awmod@divisor+1,f
  1624     011E  3EFF               	addlw	-1
  1625     011F  1D03               	skipz
  1626     0120  291B               	goto	u425
  1627     0121                     l1018:
  1628     0121  3001               	movlw	1
  1629     0122  00B7               	movwf	??___awmod
  1630     0123  0837               	movf	??___awmod,w
  1631     0124  07B8               	addwf	___awmod@counter,f
  1632     0125                     l1020:
  1633     0125  1FB4               	btfss	___awmod@divisor+1,7
  1634     0126  2928               	goto	u431
  1635     0127  2929               	goto	u430
  1636     0128                     u431:
  1637     0128  291A               	goto	l1016
  1638     0129                     u430:
  1639     0129                     l1022:
  1640     0129  0834               	movf	___awmod@divisor+1,w
  1641     012A  0236               	subwf	___awmod@dividend+1,w
  1642     012B  1D03               	skipz
  1643     012C  292F               	goto	u445
  1644     012D  0833               	movf	___awmod@divisor,w
  1645     012E  0235               	subwf	___awmod@dividend,w
  1646     012F                     u445:
  1647     012F  1C03               	skipc
  1648     0130  2932               	goto	u441
  1649     0131  2933               	goto	u440
  1650     0132                     u441:
  1651     0132  2939               	goto	l1026
  1652     0133                     u440:
  1653     0133                     l1024:
  1654     0133  0833               	movf	___awmod@divisor,w
  1655     0134  02B5               	subwf	___awmod@dividend,f
  1656     0135  0834               	movf	___awmod@divisor+1,w
  1657     0136  1C03               	skipc
  1658     0137  03B6               	decf	___awmod@dividend+1,f
  1659     0138  02B6               	subwf	___awmod@dividend+1,f
  1660     0139                     l1026:
  1661     0139  3001               	movlw	1
  1662     013A                     u455:
  1663     013A  1003               	clrc
  1664     013B  0CB4               	rrf	___awmod@divisor+1,f
  1665     013C  0CB3               	rrf	___awmod@divisor,f
  1666     013D  3EFF               	addlw	-1
  1667     013E  1D03               	skipz
  1668     013F  293A               	goto	u455
  1669     0140                     l1028:
  1670     0140  3001               	movlw	1
  1671     0141  02B8               	subwf	___awmod@counter,f
  1672     0142  1D03               	btfss	3,2
  1673     0143  2945               	goto	u461
  1674     0144  2946               	goto	u460
  1675     0145                     u461:
  1676     0145  2929               	goto	l1022
  1677     0146                     u460:
  1678     0146                     l1030:
  1679     0146  0839               	movf	___awmod@sign,w
  1680     0147  1903               	btfsc	3,2
  1681     0148  294A               	goto	u471
  1682     0149  294B               	goto	u470
  1683     014A                     u471:
  1684     014A  2950               	goto	l1034
  1685     014B                     u470:
  1686     014B                     l1032:
  1687     014B  09B5               	comf	___awmod@dividend,f
  1688     014C  09B6               	comf	___awmod@dividend+1,f
  1689     014D  0AB5               	incf	___awmod@dividend,f
  1690     014E  1903               	skipnz
  1691     014F  0AB6               	incf	___awmod@dividend+1,f
  1692     0150                     l1034:
  1693     0150  0836               	movf	___awmod@dividend+1,w
  1694     0151  00B4               	movwf	?___awmod+1
  1695     0152  0835               	movf	___awmod@dividend,w
  1696     0153  00B3               	movwf	?___awmod
  1697     0154                     l382:
  1698     0154  0008               	return
  1699     0155                     __end_of___awmod:
  1700                           
  1701                           	psect	text11
  1702     0244                     __ptext11:	
  1703 ;; *************** function _myISR *****************
  1704 ;; Defined at:
  1705 ;;		line 65 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1
  1719 ;;      Params:         0       0       0
  1720 ;;      Locals:         0       0       0
  1721 ;;      Temps:          3       0       0
  1722 ;;      Totals:         3       0       0
  1723 ;;Total ram usage:        3 bytes
  1724 ;; Hardware stack levels used: 1
  1725 ;; Hardware stack levels required when called: 1
  1726 ;; This function calls:
  1727 ;;		_timer1InterruptHandler
  1728 ;; This function is called by:
  1729 ;;		Interrupt level 1
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733     0244                     _myISR:	
  1734                           ;psect for function _myISR
  1735                           
  1736     0244                     i1l1180:
  1737                           
  1738                           ;main.c: 66:     if (INTCONbits.TMR0IF) {
  1739     0244  1D0B               	btfss	11,2	;volatile
  1740     0245  2A47               	goto	u61_21
  1741     0246  2A48               	goto	u61_20
  1742     0247                     u61_21:
  1743     0247  2A4E               	goto	i1l1188
  1744     0248                     u61_20:
  1745     0248                     i1l1182:
  1746                           
  1747                           ;main.c: 68:         TMR0 = 178;
  1748     0248  30B2               	movlw	178
  1749     0249  1283               	bcf	3,5	;RP0=0, select bank0
  1750     024A  0081               	movwf	1	;volatile
  1751     024B                     i1l1184:
  1752                           
  1753                           ;main.c: 69:         INTCONbits.TMR0IF = 0;
  1754     024B  110B               	bcf	11,2	;volatile
  1755     024C                     i1l1186:
  1756                           
  1757                           ;main.c: 70:         mustCheckServos = 1;
  1758     024C  01F8               	clrf	_mustCheckServos
  1759     024D  0AF8               	incf	_mustCheckServos,f
  1760     024E                     i1l1188:
  1761                           
  1762                           ;main.c: 73:     if (PIR1bits.TMR1IF) {
  1763     024E  1283               	bcf	3,5	;RP0=0, select bank0
  1764     024F  1C0C               	btfss	12,0	;volatile
  1765     0250  2A52               	goto	u62_21
  1766     0251  2A53               	goto	u62_20
  1767     0252                     u62_21:
  1768     0252  2A55               	goto	i1l1194
  1769     0253                     u62_20:
  1770     0253                     i1l1190:
  1771                           
  1772                           ;main.c: 74:         PIR1bits.TMR1IF = 0;
  1773     0253  100C               	bcf	12,0	;volatile
  1774     0254                     i1l1192:
  1775                           
  1776                           ;main.c: 75:         timer1InterruptHandler();
  1777     0254  21DD               	fcall	_timer1InterruptHandler
  1778     0255                     i1l1194:
  1779                           
  1780                           ;main.c: 78:     if (PIR1bits.TMR2IF) {
  1781     0255  1283               	bcf	3,5	;RP0=0, select bank0
  1782     0256  1C8C               	btfss	12,1	;volatile
  1783     0257  2A59               	goto	u63_21
  1784     0258  2A5A               	goto	u63_20
  1785     0259                     u63_21:
  1786     0259  2A5E               	goto	i1l76
  1787     025A                     u63_20:
  1788     025A                     i1l1196:
  1789                           
  1790                           ;main.c: 79:         PIR1bits.TMR2IF = 0;
  1791     025A  108C               	bcf	12,1	;volatile
  1792     025B                     i1l1198:
  1793                           
  1794                           ;main.c: 81:         GPIO = GPIO & 0b11001111;
  1795     025B  0805               	movf	5,w	;volatile
  1796     025C  39CF               	andlw	207
  1797     025D  0085               	movwf	5	;volatile
  1798     025E                     i1l76:
  1799     025E  0874               	movf	??_myISR+2,w
  1800     025F  008A               	movwf	10
  1801     0260  0873               	movf	??_myISR+1,w
  1802     0261  0084               	movwf	4
  1803     0262  0E72               	swapf	??_myISR,w
  1804     0263  0083               	movwf	3
  1805     0264  0EFE               	swapf	btemp,f
  1806     0265  0E7E               	swapf	btemp,w
  1807     0266  0009               	retfie
  1808     0267                     __end_of_myISR:
  1809                           
  1810                           	psect	intentry
  1811     0004                     __pintentry:	
  1812                           ;incstack = 0
  1813                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1814                           
  1815     0004                     interrupt_function:
  1816     007E                     saved_w	set	btemp
  1817     0004  00FE               	movwf	btemp
  1818     0005  0E03               	swapf	3,w
  1819     0006  00F2               	movwf	??_myISR
  1820     0007  0804               	movf	4,w
  1821     0008  00F3               	movwf	??_myISR+1
  1822     0009  080A               	movf	10,w
  1823     000A  00F4               	movwf	??_myISR+2
  1824     000B  2A44               	ljmp	_myISR
  1825                           
  1826                           	psect	text12
  1827     01DD                     __ptext12:	
  1828 ;; *************** function _timer1InterruptHandler *****************
  1829 ;; Defined at:
  1830 ;;		line 87 in file "main.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMMON   BANK0   BANK1
  1844 ;;      Params:         0       0       0
  1845 ;;      Locals:         0       0       0
  1846 ;;      Temps:          1       0       0
  1847 ;;      Totals:         1       0       0
  1848 ;;Total ram usage:        1 bytes
  1849 ;; Hardware stack levels used: 1
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		_myISR
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857     01DD                     _timer1InterruptHandler:	
  1858                           ;psect for function _timer1InterruptHandler
  1859                           
  1860     01DD                     i1l1060:	
  1861                           ;incstack = 0
  1862                           ; Regs used in _timer1InterruptHandler: [wreg-fsr0h+status,2+status,0]
  1863                           
  1864                           
  1865                           ;main.c: 88:     if (EstadoRCServo == 0) {
  1866     01DD  1283               	bcf	3,5	;RP0=0, select bank0
  1867     01DE  0855               	movf	_EstadoRCServo,w
  1868     01DF  1D03               	btfss	3,2
  1869     01E0  29E2               	goto	u48_21
  1870     01E1  29E3               	goto	u48_20
  1871     01E2                     u48_21:
  1872     01E2  2A01               	goto	i1l1076
  1873     01E3                     u48_20:
  1874     01E3                     i1l1062:
  1875                           
  1876                           ;main.c: 89:         EstadoRCServo = 1;
  1877     01E3  01D5               	clrf	_EstadoRCServo
  1878     01E4  0AD5               	incf	_EstadoRCServo,f
  1879                           
  1880                           ;main.c: 90:         TMR1 = 61561;
  1881     01E5  30F0               	movlw	240
  1882     01E6  008F               	movwf	15	;volatile
  1883     01E7  3079               	movlw	121
  1884     01E8  008E               	movwf	14	;volatile
  1885     01E9                     i1l1064:
  1886                           
  1887                           ;main.c: 91:         TMR2 = 0;
  1888     01E9  0191               	clrf	17	;volatile
  1889     01EA                     i1l1066:
  1890                           
  1891                           ;main.c: 92:         PR2 = motorAngle[ContadorMotor];
  1892     01EA  0876               	movf	_ContadorMotor,w
  1893     01EB  00F1               	movwf	??_timer1InterruptHandler
  1894     01EC  0771               	addwf	??_timer1InterruptHandler,w
  1895     01ED  3E43               	addlw	(low (_motorAngle| 0))& (0+255)
  1896     01EE  0084               	movwf	4
  1897     01EF  1383               	bcf	3,7	;select IRP bank0
  1898     01F0  0800               	movf	0,w
  1899     01F1  1683               	bsf	3,5	;RP0=1, select bank1
  1900     01F2  0092               	movwf	18	;volatile
  1901     01F3                     i1l1068:
  1902                           
  1903                           ;main.c: 93:         TMR2ON = 1;
  1904     01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1905     01F4  1512               	bsf	18,2	;volatile
  1906     01F5                     i1l1070:
  1907                           
  1908                           ;main.c: 94:         if (PR2 == 0) {
  1909     01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1910     01F6  0812               	movf	18,w	;volatile
  1911     01F7  1D03               	btfss	3,2
  1912     01F8  29FA               	goto	u49_21
  1913     01F9  29FB               	goto	u49_20
  1914     01FA                     u49_21:
  1915     01FA  2A1D               	goto	i1l83
  1916     01FB                     u49_20:
  1917     01FB                     i1l1072:
  1918                           
  1919                           ;main.c: 96:             TMR2ON = 0;
  1920     01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1921     01FC  1112               	bcf	18,2	;volatile
  1922     01FD                     i1l1074:
  1923                           
  1924                           ;main.c: 98:             GPIO = (GPIO & 0b11001111);
  1925     01FD  0805               	movf	5,w	;volatile
  1926     01FE  39CF               	andlw	207
  1927     01FF  0085               	movwf	5	;volatile
  1928     0200  2A1D               	goto	i1l83
  1929     0201                     i1l1076:
  1930                           
  1931                           ;main.c: 101:         EstadoRCServo = 0;
  1932     0201  01D5               	clrf	_EstadoRCServo
  1933     0202                     i1l1078:
  1934                           
  1935                           ;main.c: 102:         TMR1 = 64561;
  1936     0202  30FC               	movlw	252
  1937     0203  008F               	movwf	15	;volatile
  1938     0204  3031               	movlw	49
  1939     0205  008E               	movwf	14	;volatile
  1940     0206                     i1l1080:
  1941                           
  1942                           ;main.c: 103:         TMR2IF = 0;
  1943     0206  108C               	bcf	12,1	;volatile
  1944     0207                     i1l1082:
  1945                           
  1946                           ;main.c: 105:         TMR2ON = 0;
  1947     0207  1112               	bcf	18,2	;volatile
  1948     0208                     i1l1084:
  1949                           
  1950                           ;main.c: 106:         ContadorMotor++;
  1951     0208  3001               	movlw	1
  1952     0209  00F1               	movwf	??_timer1InterruptHandler
  1953     020A  0871               	movf	??_timer1InterruptHandler,w
  1954     020B  07F6               	addwf	_ContadorMotor,f
  1955     020C                     i1l1086:
  1956                           
  1957                           ;main.c: 107:         MaskMotor = (uint8_t)(MaskMotor << 1);
  1958     020C  0879               	movf	_MaskMotor,w
  1959     020D  00F1               	movwf	??_timer1InterruptHandler
  1960     020E  0771               	addwf	??_timer1InterruptHandler,w
  1961     020F  00F9               	movwf	_MaskMotor
  1962     0210                     i1l1088:
  1963                           
  1964                           ;main.c: 108:         if (ContadorMotor >= 2) {
  1965     0210  3002               	movlw	2
  1966     0211  0276               	subwf	_ContadorMotor,w
  1967     0212  1C03               	skipc
  1968     0213  2A15               	goto	u50_21
  1969     0214  2A16               	goto	u50_20
  1970     0215                     u50_21:
  1971     0215  2A19               	goto	i1l1094
  1972     0216                     u50_20:
  1973     0216                     i1l1090:
  1974                           
  1975                           ;main.c: 109:             ContadorMotor = 0;
  1976     0216  01F6               	clrf	_ContadorMotor
  1977     0217                     i1l1092:
  1978                           
  1979                           ;main.c: 110:             MaskMotor = 0b00010000;
  1980     0217  3010               	movlw	16
  1981     0218  00F9               	movwf	_MaskMotor
  1982     0219                     i1l1094:
  1983                           
  1984                           ;main.c: 113:         GPIO = (GPIO & 0b11001111) | MaskMotor;
  1985     0219  0805               	movf	5,w	;volatile
  1986     021A  39CF               	andlw	207
  1987     021B  0479               	iorwf	_MaskMotor,w
  1988     021C  0085               	movwf	5	;volatile
  1989     021D                     i1l83:
  1990     021D  0008               	return
  1991     021E                     __end_of_timer1InterruptHandler:
  1992     007E                     btemp	set	126	;btemp
  1993     007E                     wtemp0	set	126
  1994                           
  1995                           	psect	idloc
  1996                           
  1997                           ;Config register IDLOC0 @ 0x2000
  1998                           ;	unspecified, using default values
  1999     2000                     	org	8192
  2000     2000  3FFF               	dw	16383
  2001                           
  2002                           ;Config register IDLOC1 @ 0x2001
  2003                           ;	unspecified, using default values
  2004     2001                     	org	8193
  2005     2001  3FFF               	dw	16383
  2006                           
  2007                           ;Config register IDLOC2 @ 0x2002
  2008                           ;	unspecified, using default values
  2009     2002                     	org	8194
  2010     2002  3FFF               	dw	16383
  2011                           
  2012                           ;Config register IDLOC3 @ 0x2003
  2013                           ;	unspecified, using default values
  2014     2003                     	org	8195
  2015     2003  3FFF               	dw	16383
  2016                           
  2017                           	psect	config
  2018                           
  2019                           ;Config register CONFIG @ 0x2007
  2020                           ;	Oscillator Selection bits
  2021                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  2022                           ;	Watchdog Timer Enable bit
  2023                           ;	WDTE = OFF, WDT disabled
  2024                           ;	Power-up Timer Enable bit
  2025                           ;	PWRTE = ON, PWRT enabled
  2026                           ;	MCLR Pin Function Select bit
  2027                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  2028                           ;	Code Protection bit
  2029                           ;	CP = OFF, Program memory code protection is disabled
  2030                           ;	Data Code Protection bit
  2031                           ;	CPD = 0x1, unprogrammed default
  2032                           ;	Brown Out Detect
  2033                           ;	BOREN = ON, BOR enabled
  2034                           ;	Internal External Switchover bit
  2035                           ;	IESO = 0x1, unprogrammed default
  2036                           ;	Fail-Safe Clock Monitor Enabled bit
  2037                           ;	FCMEN = 0x1, unprogrammed default
  2038     2007                     	org	8199
  2039     2007  3FC4               	dw	16324

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         17
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      5       9
    BANK0            69     35      54
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _rand->___lmul

Critical Paths under _myISR in COMMON

    _myISR->_timer1InterruptHandler

Critical Paths under _main in BANK0

    _main->_setTorretPosition
    _setup->_srand
    _setTorretPosition->_generateRandom
    _generateRandom->___awmod
    _rand->___lmul
    ___awmod->_rand

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3175
                  _setTorretPosition
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                2     2      0     121
                                              2 BANK0      2     2      0
                            _initPWM
                        _setupTimer0
                        _setupTimer1
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _setupTimer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTorretPosition                                    1     1      0    3054
                                             34 BANK0      1     1      0
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _generateRandom                                       8     4      4    3054
                                             26 BANK0      8     4      4
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                             12 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              4 COMMON     1     1      0
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             19 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myISR                                                3     3      0       0
                                              1 COMMON     3     3      0
             _timer1InterruptHandler
 ---------------------------------------------------------------------------------
 (6) _timer1InterruptHandler                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setTorretPosition
     _generateRandom
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
   _setup
     _initPWM
     _setupTimer0
     _setupTimer1
     _srand

 _myISR (ROOT)
   _timer1InterruptHandler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               45     23      36       4       78.3%
BITBANK0            45      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      5       9       1       69.2%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3F       8        0.0%
ABS                  0      0      3F       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Feb 02 20:47:56 2024

           ??_setTorretPosition 0042                              l92 0295                              l86 02B3  
                            l95 0287                              l89 02A9                              l98 0243  
                            fsr 0004                             l121 00FA                             l230 019B  
                           l382 0154                             l800 02A0                             l802 02A2  
                           l804 02A4                             l806 02A8                             l672 01DC  
                           l669 02C3                             l790 02AA                             l792 02AC  
                           l794 02AD                             l796 02AF                             l798 02B2  
                           u400 010C                             u401 010B                             u410 0117  
                           u411 0116                             u430 0129                             _PR2 0092  
                           u431 0128                             u440 0133                             u441 0132  
                           u425 011B                             u460 0146                             u700 01D4  
                           u461 0145                             u445 012F                             u470 014B  
                           u390 0101                             u710 0026                             u471 014A  
                           u455 013A                             u391 0100                             u711 0025  
                           u800 00E6                             u720 0031                             u705 01CF  
                           u801 00E5                             u721 0030                             u650 0162  
                           u730 005A                             u810 029C                             u651 0161  
                           u731 0059                             u811 029B                             u740 0069  
                           u661 016B                             u805 00E2                             u741 0068  
                           u725 002D                             u662 0172                             u750 0079  
                           u663 0179                             u751 0078                             u735 0056  
                           u760 0093                             u761 0092                             u745 0065  
                           u690 0193                             u770 009E                             u691 0192  
                           u675 017B                             u771 009D                             u755 0075  
                           u780 00C7                             u685 0183                             u781 00C6  
                           u790 00D6                             u791 00D5                             u775 009A  
                           u785 00C3                             u795 00D2                             fsr0 0004  
                           indf 0000                    ___awmod@sign 0039                            l1000 00FB  
                          l1010 010C                            l1002 00FD                            l1020 0125  
                          l1012 0111                            l1004 0101                            l1022 0129  
                          l1014 0117                            l1030 0146                            l1006 0106  
                          l1032 014B                            l1024 0133                            l1016 011A  
                          l1008 0108                            l1040 028A                            l1034 0150  
                          l1026 0139                            l1018 0121                            l1210 015E  
                          l1042 028C                            l1028 0140                            l1212 0162  
                          l1300 008D                            l1044 028D                            l1214 0179  
                          l1222 019C                            l1302 0093                            l1046 0290  
                          l1038 0288                            l1230 02BC                            l1216 0182  
                          l1208 0155                            l1224 01B7                            l1232 021E  
                          l1320 00EE                            l1312 00C8                            l1304 0094  
                          l1048 0292                            l1240 0267                            l1218 0193  
                          l1226 01C5                            l1234 021E                            l1306 009E  
                          l1322 00F6                            l1250 0277                            l1242 0270  
                          l1330 029D                            l1236 023F                            l1316 00D7  
                          l1308 00BA                            l1260 027E                            l1252 0278  
                          l1244 0273                            l1324 0296                            l1318 00E6  
                          l1270 0283                            l1262 027F                            l1254 027A  
                          l1246 0274                            l1326 0297                            l1280 0027  
                          l1272 0284                            l1264 0280                            l1256 027C  
                          l1248 0276                            l1328 029C                            l1282 0031  
                          l1274 0286                            l1266 0281                            l1258 027D  
                          l1292 006A                            l1284 004D                            l1276 001F  
                          l1268 0282                            l1294 0079                            l1278 0026  
                          l1296 0081                            l1288 005B                            l1298 0089  
     __end_of_setTorretPosition 00FB                            _INDF 0000                            _GPIO 0005  
                 _EstadoRCServo 0055                            i1l83 021D                            i1l76 025E  
                          _TMR0 0001                            _TMR1 000E                            _TMR2 0011  
                          _main 0296                            _rand 019C                            btemp 007E  
                          start 000C                           ?_main 0071                           ?_rand 002C  
               __end_of___awmod 0155                           _ANSEL 009F                           _T1CON 0010  
                         _T2CON 0012                           u50_20 0216                           u50_21 0215  
                         u61_20 0248                           u61_21 0247                           u62_20 0253  
                         u62_21 0252                           u63_20 025A                           u63_21 0259  
                         u48_20 01E3                           u48_21 01E2                           u49_20 01FB  
                         u49_21 01FA             ___lmul@multiplicand 0024                 __end_of_initPWM 0296  
                         _myISR 0244                           _randx 0051                           _speed 004F  
                         _setup 0267                           _srand 02BC                           pclath 000A  
    generateRandom@randomNumber 0040                           status 0003                           wtemp0 007E  
               __initialization 000D                    __end_of_main 02A0                    __end_of_rand 01DD  
                        ??_main 0076                          ??_rand 002E                ??_generateRandom 003E  
      ??_timer1InterruptHandler 0071                          ?_myISR 0071                          ?_setup 0071  
                        ?_srand 0020                          i1l1060 01DD                          i1l1070 01F5  
                        i1l1062 01E3                          i1l1080 0206                          i1l1072 01FB  
                        i1l1064 01E9                          i1l1090 0216                          i1l1082 0207  
                        i1l1074 01FD                          i1l1066 01EA                          i1l1092 0217  
                        i1l1084 0208                          i1l1068 01F3                          i1l1076 0201  
                        i1l1180 0244                          i1l1094 0219                          i1l1086 020C  
                        i1l1078 0202                          i1l1190 0253                          i1l1182 0248  
                        i1l1088 0210                          i1l1192 0254                          i1l1184 024B  
                        i1l1194 0255                          i1l1186 024C                          i1l1196 025A  
                        i1l1188 024E                          i1l1198 025B                          _OSCCON 008F  
                        _TMR2IF 0061                          _TMR2ON 0092                          _TRISIO 0085  
                        ___lmul 0155                       ??___awmod 0037                 ___awmod@divisor 0033  
               ___awmod@counter 0038                       ??_initPWM 0075                          saved_w 007E  
                        srand@x 0020                    ?_setupTimer0 0071                    ?_setupTimer1 0071  
       __end_of__initialization 001D                  __pcstackCOMMON 0071                    __pidataBANK0 02C4  
                 __end_of_myISR 0267                   __end_of_setup 0288                   __end_of_srand 02C4  
                _OPTION_REGbits 0081                         ??_myISR 0072                         ??_setup 0022  
                       ??_srand 0075                      __pbssBANK0 0043                      __pnvCOMMON 0079  
                    __pmaintext 0296                         ?___lmul 0020                      __pintentry 0004  
                       _CCP1CON 0015                  ___lmul@product 0028          _timer1InterruptHandler 01DD  
               _mustCheckServos 0078                         ___awmod 00FB                         __ptext1 0267  
                       __ptext2 02BC                         __ptext3 02A0                         __ptext4 02AA  
                       __ptext5 0288                         __ptext6 001F                         __ptext7 021E  
                       __ptext8 019C                         __ptext9 0155                       _T1CONbits 0010  
                       _initPWM 0288                ___awmod@dividend 0035                         clrloop0 02B5  
          end_of_initialization 001D                      _motorAngle 0043                  __end_of___lmul 019C  
           start_initialization 000D                       _MaskMotor 0079                        ??___lmul 0075  
                   __pdataBANK0 0051                     __pbssCOMMON 0076                       ___latbits 0000  
                 __pcstackBANK0 0020                     _activeMotor 0077         ?_timer1InterruptHandler 0071  
                     __pnvBANK0 0055                        ?___awmod 0033                        ?_initPWM 0071  
__end_of_timer1InterruptHandler 021E               interrupt_function 0004                        _GPIObits 0005  
                     clear_ram0 02B4                        _PIE1bits 008C               generateRandom@max 003C  
             generateRandom@min 003A                        _PIR1bits 000C                   ??_setupTimer0 0075  
                 ??_setupTimer1 0075               ___lmul@multiplier 0020                  _generateRandom 021E  
        __end_of_generateRandom 0244                        __ptext10 00FB                        __ptext11 0244  
                      __ptext12 01DD                   _ContadorMotor 0076             __end_of_setupTimer0 02B4  
           __end_of_setupTimer1 02AA                  _overflow_count 004B                      _INTCONbits 000B  
               ?_generateRandom 003A                    _speedCounter 004D                        intlevel1 0000  
                   _motorTarget 0047                      _OPTION_REG 0081                     _setupTimer0 02AA  
                   _setupTimer1 02A0               _setTorretPosition 001F              ?_setTorretPosition 0071  
