

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Feb 02 21:10:47 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F683
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Generated 21/04/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC12F683 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     000A                     	;# 
    73     000B                     	;# 
    74     000C                     	;# 
    75     000E                     	;# 
    76     000E                     	;# 
    77     000F                     	;# 
    78     0010                     	;# 
    79     0011                     	;# 
    80     0012                     	;# 
    81     0013                     	;# 
    82     0013                     	;# 
    83     0014                     	;# 
    84     0015                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001E                     	;# 
    89     001F                     	;# 
    90     0081                     	;# 
    91     0085                     	;# 
    92     008C                     	;# 
    93     008E                     	;# 
    94     008F                     	;# 
    95     0090                     	;# 
    96     0092                     	;# 
    97     0095                     	;# 
    98     0095                     	;# 
    99     0096                     	;# 
   100     0096                     	;# 
   101     0099                     	;# 
   102     009A                     	;# 
   103     009A                     	;# 
   104     009B                     	;# 
   105     009C                     	;# 
   106     009D                     	;# 
   107     009E                     	;# 
   108     009F                     	;# 
   109     0000                     	;# 
   110     0001                     	;# 
   111     0002                     	;# 
   112     0003                     	;# 
   113     0004                     	;# 
   114     0005                     	;# 
   115     000A                     	;# 
   116     000B                     	;# 
   117     000C                     	;# 
   118     000E                     	;# 
   119     000E                     	;# 
   120     000F                     	;# 
   121     0010                     	;# 
   122     0011                     	;# 
   123     0012                     	;# 
   124     0013                     	;# 
   125     0013                     	;# 
   126     0014                     	;# 
   127     0015                     	;# 
   128     0018                     	;# 
   129     0019                     	;# 
   130     001A                     	;# 
   131     001E                     	;# 
   132     001F                     	;# 
   133     0081                     	;# 
   134     0085                     	;# 
   135     008C                     	;# 
   136     008E                     	;# 
   137     008F                     	;# 
   138     0090                     	;# 
   139     0092                     	;# 
   140     0095                     	;# 
   141     0095                     	;# 
   142     0096                     	;# 
   143     0096                     	;# 
   144     0099                     	;# 
   145     009A                     	;# 
   146     009A                     	;# 
   147     009B                     	;# 
   148     009C                     	;# 
   149     009D                     	;# 
   150     009E                     	;# 
   151     009F                     	;# 
   152                           
   153                           	psect	idataBANK0
   154     02C6                     __pidataBANK0:
   155                           
   156                           ;initializer for _randx
   157     02C6  3401               	retlw	1
   158     02C7  3400               	retlw	0
   159     02C8  3400               	retlw	0
   160     02C9  3400               	retlw	0
   161                           
   162                           	psect	nvCOMMON
   163     0079                     __pnvCOMMON:
   164     0079                     _MaskMotor:
   165     0079                     	ds	1
   166                           
   167                           	psect	nvBANK0
   168     0054                     __pnvBANK0:
   169     0054                     _EstadoRCServo:
   170     0054                     	ds	1
   171     000E                     _TMR1	set	14
   172     0005                     _GPIObits	set	5
   173     0000                     _INDF	set	0
   174     0012                     _T2CON	set	18
   175     0015                     _CCP1CON	set	21
   176     0010                     _T1CONbits	set	16
   177     0010                     _T1CON	set	16
   178     0011                     _TMR2	set	17
   179     0005                     _GPIO	set	5
   180     000C                     _PIR1bits	set	12
   181     0001                     _TMR0	set	1
   182     000B                     _INTCONbits	set	11
   183     002A                     _GP2	set	42
   184     0061                     _TMR2IF	set	97
   185     0092                     _TMR2ON	set	146
   186     008C                     _PIE1bits	set	140
   187     0085                     _TRISIO	set	133
   188     009F                     _ANSEL	set	159
   189     008F                     _OSCCON	set	143
   190     0081                     _OPTION_REGbits	set	129
   191     0081                     _OPTION_REG	set	129
   192     0092                     _PR2	set	146
   193                           
   194                           	psect	cinit
   195     000D                     start_initialization:	
   196                           ; #config settings
   197                           
   198     000D                     __initialization:
   199                           
   200                           ; Initialize objects allocated to BANK0
   201     000D  22C6               	fcall	__pidataBANK0	;fetch initializer
   202     000E  00D0               	movwf	__pdataBANK0& (0+127)
   203     000F  22C7               	fcall	__pidataBANK0+1	;fetch initializer
   204     0010  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   205     0011  22C8               	fcall	__pidataBANK0+2	;fetch initializer
   206     0012  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   207     0013  22C9               	fcall	__pidataBANK0+3	;fetch initializer
   208     0014  00D3               	movwf	(__pdataBANK0+3)& (0+127)
   209                           
   210                           ; Clear objects allocated to BANK0
   211     0015  1383               	bcf	3,7	;select IRP bank0
   212     0016  3042               	movlw	low __pbssBANK0
   213     0017  0084               	movwf	4
   214     0018  3050               	movlw	low (__pbssBANK0+14)
   215     0019  22B6               	fcall	clear_ram0
   216                           
   217                           ; Clear objects allocated to COMMON
   218     001A  01F6               	clrf	__pbssCOMMON& (0+127)
   219     001B  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   220     001C  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   221     001D                     end_of_initialization:	
   222                           ;End of C runtime variable initialization code
   223                           
   224     001D                     __end_of__initialization:
   225     001D  0183               	clrf	3
   226     001E  2A98               	ljmp	_main	;jump to C main() function
   227                           
   228                           	psect	bssCOMMON
   229     0076                     __pbssCOMMON:
   230     0076                     _ContadorMotor:
   231     0076                     	ds	1
   232     0077                     _activeMotor:
   233     0077                     	ds	1
   234     0078                     _mustCheckServos:
   235     0078                     	ds	1
   236                           
   237                           	psect	bssBANK0
   238     0042                     __pbssBANK0:
   239     0042                     _motorAngle:
   240     0042                     	ds	4
   241     0046                     _motorTarget:
   242     0046                     	ds	4
   243     004A                     _overflow_count:
   244     004A                     	ds	2
   245     004C                     _speedCounter:
   246     004C                     	ds	2
   247     004E                     _speed:
   248     004E                     	ds	2
   249                           
   250                           	psect	dataBANK0
   251     0050                     __pdataBANK0:
   252     0050                     _randx:
   253     0050                     	ds	4
   254                           
   255                           	psect	clrtext
   256     02B6                     clear_ram0:	
   257                           ;	Called with FSR containing the base address, and
   258                           ;	W with the last address+1
   259                           
   260     02B6  0064               	clrwdt	;clear the watchdog before getting into this loop
   261     02B7                     clrloop0:
   262     02B7  0180               	clrf	0	;clear RAM location pointed to by FSR
   263     02B8  0A84               	incf	4,f	;increment pointer
   264     02B9  0604               	xorwf	4,w	;XOR with final address
   265     02BA  1903               	btfsc	3,2	;have we reached the end yet?
   266     02BB  3400               	retlw	0	;all done for this memory range, return
   267     02BC  0604               	xorwf	4,w	;XOR again to restore value
   268     02BD  2AB7               	goto	clrloop0	;do the next byte
   269                           
   270                           	psect	cstackCOMMON
   271     0070                     __pcstackCOMMON:
   272     0070                     ?_timer1InterruptHandler:
   273     0070                     ??_timer1InterruptHandler:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     0070                     ?_myISR:	
   277                           ; 1 bytes @ 0x0
   278                           
   279     0070                     ?_setupTimer0:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     0070                     ?_setupTimer1:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     0070                     ?_initPWM:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     0070                     ?_setup:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     0070                     ?_setTorretPosition:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?_main:	
   295                           ; 1 bytes @ 0x0
   296                           
   297                           
   298                           ; 1 bytes @ 0x0
   299     0070                     	ds	1
   300     0071                     ??_myISR:
   301                           
   302                           ; 1 bytes @ 0x1
   303     0071                     	ds	3
   304     0074                     ?_srand:
   305     0074                     ??_setupTimer0:	
   306                           ; 1 bytes @ 0x4
   307                           
   308     0074                     ??_setupTimer1:	
   309                           ; 1 bytes @ 0x4
   310                           
   311     0074                     ??_initPWM:	
   312                           ; 1 bytes @ 0x4
   313                           
   314     0074                     ??___lmul:	
   315                           ; 1 bytes @ 0x4
   316                           
   317     0074                     srand@x:	
   318                           ; 1 bytes @ 0x4
   319                           
   320                           
   321                           ; 2 bytes @ 0x4
   322     0074                     	ds	1
   323     0075                     ??___awmod:
   324                           
   325                           ; 1 bytes @ 0x5
   326     0075                     	ds	1
   327     0076                     ??_srand:
   328     0076                     ??_main:	
   329                           ; 1 bytes @ 0x6
   330                           
   331                           
   332                           	psect	cstackBANK0
   333     0020                     __pcstackBANK0:	
   334                           ; 1 bytes @ 0x6
   335                           
   336     0020                     ??_setup:
   337     0020                     ?___lmul:	
   338                           ; 1 bytes @ 0x0
   339                           
   340     0020                     ___lmul@multiplier:	
   341                           ; 4 bytes @ 0x0
   342                           
   343                           
   344                           ; 4 bytes @ 0x0
   345     0020                     	ds	4
   346     0024                     ___lmul@multiplicand:
   347                           
   348                           ; 4 bytes @ 0x4
   349     0024                     	ds	4
   350     0028                     ___lmul@product:
   351                           
   352                           ; 4 bytes @ 0x8
   353     0028                     	ds	4
   354     002C                     ?_rand:
   355                           
   356                           ; 2 bytes @ 0xC
   357     002C                     	ds	2
   358     002E                     ??_rand:
   359                           
   360                           ; 1 bytes @ 0xE
   361     002E                     	ds	5
   362     0033                     ?___awmod:
   363     0033                     ___awmod@divisor:	
   364                           ; 2 bytes @ 0x13
   365                           
   366                           
   367                           ; 2 bytes @ 0x13
   368     0033                     	ds	2
   369     0035                     ___awmod@dividend:
   370                           
   371                           ; 2 bytes @ 0x15
   372     0035                     	ds	2
   373     0037                     ___awmod@counter:
   374                           
   375                           ; 1 bytes @ 0x17
   376     0037                     	ds	1
   377     0038                     ___awmod@sign:
   378                           
   379                           ; 1 bytes @ 0x18
   380     0038                     	ds	1
   381     0039                     ?_generateRandom:
   382     0039                     generateRandom@min:	
   383                           ; 2 bytes @ 0x19
   384                           
   385                           
   386                           ; 2 bytes @ 0x19
   387     0039                     	ds	2
   388     003B                     generateRandom@max:
   389                           
   390                           ; 2 bytes @ 0x1B
   391     003B                     	ds	2
   392     003D                     ??_generateRandom:
   393                           
   394                           ; 1 bytes @ 0x1D
   395     003D                     	ds	2
   396     003F                     generateRandom@randomNumber:
   397                           
   398                           ; 2 bytes @ 0x1F
   399     003F                     	ds	2
   400     0041                     ??_setTorretPosition:
   401                           
   402                           ; 1 bytes @ 0x21
   403     0041                     	ds	1
   404                           
   405                           	psect	maintext
   406     0298                     __pmaintext:	
   407 ;;
   408 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   409 ;;
   410 ;; *************** function _main *****************
   411 ;; Defined at:
   412 ;;		line 227 in file "main.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;		None
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : B00/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1
   426 ;;      Params:         0       0       0
   427 ;;      Locals:         0       0       0
   428 ;;      Temps:          0       0       0
   429 ;;      Totals:         0       0       0
   430 ;;Total ram usage:        0 bytes
   431 ;; Hardware stack levels required when called: 6
   432 ;; This function calls:
   433 ;;		_setTorretPosition
   434 ;;		_setup
   435 ;; This function is called by:
   436 ;;		Startup code after reset
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440     0298                     _main:	
   441                           ;psect for function _main
   442                           
   443     0298                     l1342:	
   444                           ;incstack = 0
   445                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   446                           
   447                           
   448                           ;main.c: 228:     setup();
   449     0298  2269               	fcall	_setup
   450     0299                     l1344:
   451                           
   452                           ;main.c: 231:       if (mustCheckServos == 1) {
   453     0299  0378               	decf	_mustCheckServos,w
   454     029A  1D03               	btfss	3,2
   455     029B  2A9D               	goto	u811
   456     029C  2A9E               	goto	u810
   457     029D                     u811:
   458     029D  2A99               	goto	l1344
   459     029E                     u810:
   460     029E                     l1346:
   461                           
   462                           ;main.c: 232:         mustCheckServos =0;
   463     029E  01F8               	clrf	_mustCheckServos
   464     029F                     l1348:
   465                           
   466                           ;main.c: 233:         setTorretPosition();
   467     029F  201F               	fcall	_setTorretPosition
   468     02A0  2A99               	goto	l1344
   469     02A1  280C               	ljmp	start
   470     02A2                     __end_of_main:
   471                           
   472                           	psect	text1
   473     0269                     __ptext1:	
   474 ;; *************** function _setup *****************
   475 ;; Defined at:
   476 ;;		line 142 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, pclath, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMMON   BANK0   BANK1
   490 ;;      Params:         0       0       0
   491 ;;      Locals:         0       0       0
   492 ;;      Temps:          0       2       0
   493 ;;      Totals:         0       2       0
   494 ;;Total ram usage:        2 bytes
   495 ;; Hardware stack levels used: 1
   496 ;; Hardware stack levels required when called: 3
   497 ;; This function calls:
   498 ;;		_initPWM
   499 ;;		_setupTimer0
   500 ;;		_setupTimer1
   501 ;;		_srand
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507     0269                     _setup:	
   508                           ;psect for function _setup
   509                           
   510     0269                     l1252:	
   511                           ;incstack = 0
   512                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   513                           
   514                           
   515                           ;main.c: 143:     srand(INDF);
   516     0269  1283               	bcf	3,5	;RP0=0, select bank0
   517     026A  0800               	movf	0,w	;volatile
   518     026B  00A0               	movwf	??_setup
   519     026C  01A1               	clrf	??_setup+1
   520     026D  0820               	movf	??_setup,w
   521     026E  00F4               	movwf	srand@x
   522     026F  0821               	movf	??_setup+1,w
   523     0270  00F5               	movwf	srand@x+1
   524     0271  22BE               	fcall	_srand
   525     0272                     l1254:
   526                           
   527                           ;main.c: 144:     OSCCON = 0x71;
   528     0272  3071               	movlw	113
   529     0273  1683               	bsf	3,5	;RP0=1, select bank1
   530     0274  008F               	movwf	15	;volatile
   531     0275                     l1256:
   532                           
   533                           ;main.c: 145:     ANSEL = 0;
   534     0275  019F               	clrf	31	;volatile
   535     0276                     l1258:
   536                           
   537                           ;main.c: 146:     TRISIO = 0b00000011;
   538     0276  3003               	movlw	3
   539     0277  0085               	movwf	5	;volatile
   540     0278                     l1260:
   541                           
   542                           ;main.c: 147:     initPWM();
   543     0278  228A               	fcall	_initPWM
   544     0279                     l1262:
   545                           
   546                           ;main.c: 148:     setupTimer1();
   547     0279  22A2               	fcall	_setupTimer1
   548     027A                     l1264:
   549                           
   550                           ;main.c: 149:     setupTimer0();
   551     027A  22AC               	fcall	_setupTimer0
   552                           
   553                           ;main.c: 150:     ContadorMotor = 0;
   554     027B  01F6               	clrf	_ContadorMotor
   555     027C                     l1266:
   556                           
   557                           ;main.c: 151:     GPIObits.GP2 = 1;
   558     027C  1283               	bcf	3,5	;RP0=0, select bank0
   559     027D  1505               	bsf	5,2	;volatile
   560     027E                     l1268:
   561                           
   562                           ;main.c: 152:     GPIObits.GP4 = 1;
   563     027E  1605               	bsf	5,4	;volatile
   564     027F                     l1270:
   565                           
   566                           ;main.c: 153:     GPIObits.GP5 = 1;
   567     027F  1685               	bsf	5,5	;volatile
   568     0280                     l1272:
   569                           
   570                           ;main.c: 156:     INTCONbits.GIE = 1;
   571     0280  178B               	bsf	11,7	;volatile
   572     0281                     l1274:
   573                           
   574                           ;main.c: 157:     INTCONbits.PEIE = 1;
   575     0281  170B               	bsf	11,6	;volatile
   576     0282                     l1276:
   577                           
   578                           ;main.c: 159:     INTCONbits.TMR0IF = 0;
   579     0282  110B               	bcf	11,2	;volatile
   580     0283                     l1278:
   581                           
   582                           ;main.c: 160:     PIR1bits.TMR1IF = 0;
   583     0283  100C               	bcf	12,0	;volatile
   584     0284                     l1280:
   585                           
   586                           ;main.c: 161:     PIR1bits.TMR2IF = 0;
   587     0284  108C               	bcf	12,1	;volatile
   588     0285                     l1282:
   589                           
   590                           ;main.c: 162:     INTCONbits.TMR0IE = 1;
   591     0285  168B               	bsf	11,5	;volatile
   592     0286                     l1284:
   593                           
   594                           ;main.c: 163:     PIE1bits.TMR2IE = 1;
   595     0286  1683               	bsf	3,5	;RP0=1, select bank1
   596     0287  148C               	bsf	12,1	;volatile
   597     0288                     l1286:
   598                           
   599                           ;main.c: 164:     PIE1bits.TMR1IE = 1;
   600     0288  140C               	bsf	12,0	;volatile
   601     0289                     l97:
   602     0289  0008               	return
   603     028A                     __end_of_setup:
   604                           
   605                           	psect	text2
   606     02BE                     __ptext2:	
   607 ;; *************** function _srand *****************
   608 ;; Defined at:
   609 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;  x               2    4[COMMON] unsigned int 
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMMON   BANK0   BANK1
   623 ;;      Params:         2       0       0
   624 ;;      Locals:         0       0       0
   625 ;;      Temps:          0       0       0
   626 ;;      Totals:         2       0       0
   627 ;;Total ram usage:        2 bytes
   628 ;; Hardware stack levels used: 1
   629 ;; Hardware stack levels required when called: 2
   630 ;; This function calls:
   631 ;;		Nothing
   632 ;; This function is called by:
   633 ;;		_setup
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637     02BE                     _srand:	
   638                           ;psect for function _srand
   639                           
   640     02BE                     l1058:	
   641                           ;incstack = 0
   642                           ; Regs used in _srand: [wreg]
   643                           
   644     02BE  0874               	movf	srand@x,w
   645     02BF  1283               	bcf	3,5	;RP0=0, select bank0
   646     02C0  00D0               	movwf	_randx
   647     02C1  0875               	movf	srand@x+1,w
   648     02C2  00D1               	movwf	_randx+1
   649     02C3  01D2               	clrf	_randx+2
   650     02C4  01D3               	clrf	_randx+3
   651     02C5                     l671:
   652     02C5  0008               	return
   653     02C6                     __end_of_srand:
   654                           
   655                           	psect	text3
   656     02A2                     __ptext3:	
   657 ;; *************** function _setupTimer1 *****************
   658 ;; Defined at:
   659 ;;		line 125 in file "main.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1
   673 ;;      Params:         0       0       0
   674 ;;      Locals:         0       0       0
   675 ;;      Temps:          0       0       0
   676 ;;      Totals:         0       0       0
   677 ;;Total ram usage:        0 bytes
   678 ;; Hardware stack levels used: 1
   679 ;; Hardware stack levels required when called: 2
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		_setup
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687     02A2                     _setupTimer1:	
   688                           ;psect for function _setupTimer1
   689                           
   690     02A2                     l802:	
   691                           ;incstack = 0
   692                           ; Regs used in _setupTimer1: [wreg+status,2+status,0]
   693                           
   694                           
   695                           ;main.c: 126:     T1CON = 0;
   696     02A2  1283               	bcf	3,5	;RP0=0, select bank0
   697     02A3  0190               	clrf	16	;volatile
   698     02A4                     l804:
   699                           
   700                           ;main.c: 127:     T1CONbits.T1CKPS = 0;
   701     02A4  30CF               	movlw	-49
   702     02A5  0590               	andwf	16,f	;volatile
   703     02A6                     l806:
   704                           
   705                           ;main.c: 128:     TMR1 = 61561;
   706     02A6  30F0               	movlw	240
   707     02A7  008F               	movwf	15	;volatile
   708     02A8  3079               	movlw	121
   709     02A9  008E               	movwf	14	;volatile
   710     02AA                     l808:
   711                           
   712                           ;main.c: 129:     T1CONbits.TMR1ON = 1;
   713     02AA  1410               	bsf	16,0	;volatile
   714     02AB                     l91:
   715     02AB  0008               	return
   716     02AC                     __end_of_setupTimer1:
   717                           
   718                           	psect	text4
   719     02AC                     __ptext4:	
   720 ;; *************** function _setupTimer0 *****************
   721 ;; Defined at:
   722 ;;		line 117 in file "main.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;		None
   725 ;; Auto vars:     Size  Location     Type
   726 ;;		None
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg, status,2, status,0
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMMON   BANK0   BANK1
   736 ;;      Params:         0       0       0
   737 ;;      Locals:         0       0       0
   738 ;;      Temps:          0       0       0
   739 ;;      Totals:         0       0       0
   740 ;;Total ram usage:        0 bytes
   741 ;; Hardware stack levels used: 1
   742 ;; Hardware stack levels required when called: 2
   743 ;; This function calls:
   744 ;;		Nothing
   745 ;; This function is called by:
   746 ;;		_setup
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750     02AC                     _setupTimer0:	
   751                           ;psect for function _setupTimer0
   752                           
   753     02AC                     l792:	
   754                           ;incstack = 0
   755                           ; Regs used in _setupTimer0: [wreg+status,2+status,0]
   756                           
   757                           
   758                           ;main.c: 118:     OPTION_REG = 0;
   759     02AC  1683               	bsf	3,5	;RP0=1, select bank1
   760     02AD  0181               	clrf	1	;volatile
   761     02AE                     l794:
   762                           
   763                           ;main.c: 119:     OPTION_REGbits.PSA = 0;
   764     02AE  1181               	bcf	1,3	;volatile
   765     02AF                     l796:
   766                           
   767                           ;main.c: 120:     OPTION_REGbits.PS = 7;
   768     02AF  3007               	movlw	7
   769     02B0  0481               	iorwf	1,f	;volatile
   770     02B1                     l798:
   771                           
   772                           ;main.c: 121:     TMR0 = 176;
   773     02B1  30B0               	movlw	176
   774     02B2  1283               	bcf	3,5	;RP0=0, select bank0
   775     02B3  0081               	movwf	1	;volatile
   776     02B4                     l800:
   777                           
   778                           ;main.c: 122:     INTCONbits.TMR0IE = 1;
   779     02B4  168B               	bsf	11,5	;volatile
   780     02B5                     l88:
   781     02B5  0008               	return
   782     02B6                     __end_of_setupTimer0:
   783                           
   784                           	psect	text5
   785     028A                     __ptext5:	
   786 ;; *************** function _initPWM *****************
   787 ;; Defined at:
   788 ;;		line 132 in file "main.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, status,2
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1
   802 ;;      Params:         0       0       0
   803 ;;      Locals:         0       0       0
   804 ;;      Temps:          0       0       0
   805 ;;      Totals:         0       0       0
   806 ;;Total ram usage:        0 bytes
   807 ;; Hardware stack levels used: 1
   808 ;; Hardware stack levels required when called: 2
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_setup
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816     028A                     _initPWM:	
   817                           ;psect for function _initPWM
   818                           
   819     028A                     l1046:	
   820                           ;incstack = 0
   821                           ; Regs used in _initPWM: [wreg+status,2]
   822                           
   823                           
   824                           ;main.c: 133:     CCP1CON = 0b00000000;
   825     028A  1283               	bcf	3,5	;RP0=0, select bank0
   826     028B  0195               	clrf	21	;volatile
   827     028C                     l1048:
   828                           
   829                           ;main.c: 134:     T2CON = 0b00000011;
   830     028C  3003               	movlw	3
   831     028D  0092               	movwf	18	;volatile
   832     028E                     l1050:
   833                           
   834                           ;main.c: 135:     TMR2ON = 1;
   835     028E  1512               	bsf	18,2	;volatile
   836     028F                     l1052:
   837                           
   838                           ;main.c: 136:     PR2 = 249;
   839     028F  30F9               	movlw	249
   840     0290  1683               	bsf	3,5	;RP0=1, select bank1
   841     0291  0092               	movwf	18	;volatile
   842     0292                     l1054:
   843                           
   844                           ;main.c: 138:     MaskMotor = 0b00010000;
   845     0292  3010               	movlw	16
   846     0293  00F9               	movwf	_MaskMotor
   847     0294                     l1056:
   848                           
   849                           ;main.c: 139:     EstadoRCServo = 1;
   850     0294  1283               	bcf	3,5	;RP0=0, select bank0
   851     0295  01D4               	clrf	_EstadoRCServo
   852     0296  0AD4               	incf	_EstadoRCServo,f
   853     0297                     l94:
   854     0297  0008               	return
   855     0298                     __end_of_initPWM:
   856                           
   857                           	psect	text6
   858     001F                     __ptext6:	
   859 ;; *************** function _setTorretPosition *****************
   860 ;; Defined at:
   861 ;;		line 175 in file "main.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;		None
   866 ;; Return value:  Size  Location     Type
   867 ;;                  1    wreg      void 
   868 ;; Registers used:
   869 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMMON   BANK0   BANK1
   875 ;;      Params:         0       0       0
   876 ;;      Locals:         0       0       0
   877 ;;      Temps:          0       1       0
   878 ;;      Totals:         0       1       0
   879 ;;Total ram usage:        1 bytes
   880 ;; Hardware stack levels used: 1
   881 ;; Hardware stack levels required when called: 5
   882 ;; This function calls:
   883 ;;		_generateRandom
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889     001F                     _setTorretPosition:	
   890                           ;psect for function _setTorretPosition
   891                           
   892     001F                     l1288:	
   893                           ;incstack = 0
   894                           ; Regs used in _setTorretPosition: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   895                           
   896                           
   897                           ;main.c: 178:     if (speedCounter[0] > speed[0]) {
   898     001F  1283               	bcf	3,5	;RP0=0, select bank0
   899     0020  084C               	movf	_speedCounter,w
   900     0021  024E               	subwf	_speed,w
   901     0022  1803               	skipnc
   902     0023  2825               	goto	u711
   903     0024  2826               	goto	u710
   904     0025                     u711:
   905     0025  288B               	goto	l1316
   906     0026                     u710:
   907     0026                     l1290:
   908                           
   909                           ;main.c: 179:         speedCounter[0] = 0;
   910     0026  01CC               	clrf	_speedCounter
   911     0027                     l1292:
   912                           
   913                           ;main.c: 180:         if (motorAngle[0] == motorTarget[0]) {
   914     0027  0847               	movf	_motorTarget+1,w
   915     0028  0643               	xorwf	_motorAngle+1,w
   916     0029  1D03               	skipz
   917     002A  282D               	goto	u725
   918     002B  0846               	movf	_motorTarget,w
   919     002C  0642               	xorwf	_motorAngle,w
   920     002D                     u725:
   921     002D  1D03               	skipz
   922     002E  2830               	goto	u721
   923     002F  2831               	goto	u720
   924     0030                     u721:
   925     0030  284F               	goto	l1298
   926     0031                     u720:
   927     0031                     l1294:
   928                           
   929                           ;main.c: 181:             motorTarget[0] = (int)generateRandom(-50, 50);
   930     0031  30CE               	movlw	206
   931     0032  1283               	bcf	3,5	;RP0=0, select bank0
   932     0033  00B9               	movwf	generateRandom@min
   933     0034  30FF               	movlw	255
   934     0035  00BA               	movwf	generateRandom@min+1
   935     0036  3032               	movlw	50
   936     0037  00BB               	movwf	generateRandom@max
   937     0038  3000               	movlw	0
   938     0039  00BC               	movwf	generateRandom@max+1
   939     003A  2220               	fcall	_generateRandom
   940     003B  1283               	bcf	3,5	;RP0=0, select bank0
   941     003C  083A               	movf	?_generateRandom+1,w
   942     003D  00C7               	movwf	_motorTarget+1
   943     003E  0839               	movf	?_generateRandom,w
   944     003F  00C6               	movwf	_motorTarget
   945                           
   946                           ;main.c: 182:             speed[0] = (uint8_t)generateRandom(5, 10);
   947     0040  3005               	movlw	5
   948     0041  00B9               	movwf	generateRandom@min
   949     0042  3000               	movlw	0
   950     0043  00BA               	movwf	generateRandom@min+1
   951     0044  300A               	movlw	10
   952     0045  00BB               	movwf	generateRandom@max
   953     0046  3000               	movlw	0
   954     0047  00BC               	movwf	generateRandom@max+1
   955     0048  2220               	fcall	_generateRandom
   956     0049  1283               	bcf	3,5	;RP0=0, select bank0
   957     004A  0839               	movf	?_generateRandom,w
   958     004B  00CE               	movwf	_speed
   959     004C                     l1296:
   960                           
   961                           ;main.c: 183:             GP2 ^= 1;
   962     004C  3004               	movlw	4
   963     004D  0685               	xorwf	5,f
   964                           
   965                           ;main.c: 184:         } else if (motorAngle[0] <= -50) {
   966     004E  288F               	goto	l1318
   967     004F                     l1298:
   968     004F  0843               	movf	_motorAngle+1,w
   969     0050  3A80               	xorlw	128
   970     0051  00FF               	movwf	btemp+1
   971     0052  307F               	movlw	127
   972     0053  027F               	subwf	btemp+1,w
   973     0054  1D03               	skipz
   974     0055  2858               	goto	u735
   975     0056  30CF               	movlw	207
   976     0057  0242               	subwf	_motorAngle,w
   977     0058                     u735:
   978     0058  1803               	skipnc
   979     0059  285B               	goto	u731
   980     005A  285C               	goto	u730
   981     005B                     u731:
   982     005B  285D               	goto	l1304
   983     005C                     u730:
   984     005C  2831               	goto	l1294
   985     005D                     l1304:
   986     005D  1283               	bcf	3,5	;RP0=0, select bank0
   987     005E  0843               	movf	_motorAngle+1,w
   988     005F  3A80               	xorlw	128
   989     0060  00FF               	movwf	btemp+1
   990     0061  3080               	movlw	128
   991     0062  027F               	subwf	btemp+1,w
   992     0063  1D03               	skipz
   993     0064  2867               	goto	u745
   994     0065  3032               	movlw	50
   995     0066  0242               	subwf	_motorAngle,w
   996     0067                     u745:
   997     0067  1C03               	skipc
   998     0068  286A               	goto	u741
   999     0069  286B               	goto	u740
  1000     006A                     u741:
  1001     006A  286C               	goto	l1310
  1002     006B                     u740:
  1003     006B  2831               	goto	l1294
  1004     006C                     l1310:
  1005     006C  1283               	bcf	3,5	;RP0=0, select bank0
  1006     006D  0843               	movf	_motorAngle+1,w
  1007     006E  3A80               	xorlw	128
  1008     006F  00C1               	movwf	??_setTorretPosition
  1009     0070  0847               	movf	_motorTarget+1,w
  1010     0071  3A80               	xorlw	128
  1011     0072  0241               	subwf	??_setTorretPosition,w
  1012     0073  1D03               	skipz
  1013     0074  2877               	goto	u755
  1014     0075  0846               	movf	_motorTarget,w
  1015     0076  0242               	subwf	_motorAngle,w
  1016     0077                     u755:
  1017     0077  1803               	skipnc
  1018     0078  287A               	goto	u751
  1019     0079  287B               	goto	u750
  1020     007A                     u751:
  1021     007A  2883               	goto	l1314
  1022     007B                     u750:
  1023     007B                     l1312:
  1024                           
  1025                           ;main.c: 193:             motorAngle[0]++;
  1026     007B  3001               	movlw	1
  1027     007C  1283               	bcf	3,5	;RP0=0, select bank0
  1028     007D  07C2               	addwf	_motorAngle,f
  1029     007E  1803               	skipnc
  1030     007F  0AC3               	incf	_motorAngle+1,f
  1031     0080  3000               	movlw	0
  1032     0081  07C3               	addwf	_motorAngle+1,f
  1033                           
  1034                           ;main.c: 194:         } else {
  1035     0082  288F               	goto	l1318
  1036     0083                     l1314:
  1037                           
  1038                           ;main.c: 195:             motorAngle[0]--;
  1039     0083  30FF               	movlw	255
  1040     0084  1283               	bcf	3,5	;RP0=0, select bank0
  1041     0085  07C2               	addwf	_motorAngle,f
  1042     0086  1803               	skipnc
  1043     0087  0AC3               	incf	_motorAngle+1,f
  1044     0088  30FF               	movlw	255
  1045     0089  07C3               	addwf	_motorAngle+1,f
  1046     008A  288F               	goto	l1318
  1047     008B                     l1316:
  1048                           
  1049                           ;main.c: 198:         speedCounter[0]++;
  1050     008B  3001               	movlw	1
  1051     008C  00C1               	movwf	??_setTorretPosition
  1052     008D  0841               	movf	??_setTorretPosition,w
  1053     008E  07CC               	addwf	_speedCounter,f
  1054     008F                     l1318:
  1055                           
  1056                           ;main.c: 205:     if (speedCounter[1] > speed[1]) {
  1057     008F  084D               	movf	_speedCounter+1,w
  1058     0090  024F               	subwf	_speed+1,w
  1059     0091  1803               	skipnc
  1060     0092  2894               	goto	u761
  1061     0093  2895               	goto	u760
  1062     0094                     u761:
  1063     0094  28F8               	goto	l1340
  1064     0095                     u760:
  1065     0095                     l1320:
  1066                           
  1067                           ;main.c: 206:         speedCounter[1] = 0;
  1068     0095  01CD               	clrf	_speedCounter+1
  1069     0096                     l1322:
  1070                           
  1071                           ;main.c: 208:         if (motorAngle[1] == motorTarget[1]) {
  1072     0096  0849               	movf	_motorTarget+3,w
  1073     0097  0645               	xorwf	_motorAngle+3,w
  1074     0098  1D03               	skipz
  1075     0099  289C               	goto	u775
  1076     009A  0848               	movf	_motorTarget+2,w
  1077     009B  0644               	xorwf	_motorAngle+2,w
  1078     009C                     u775:
  1079     009C  1D03               	skipz
  1080     009D  289F               	goto	u771
  1081     009E  28A0               	goto	u770
  1082     009F                     u771:
  1083     009F  28BC               	goto	l1326
  1084     00A0                     u770:
  1085     00A0                     l1324:
  1086                           
  1087                           ;main.c: 209:             motorTarget[1] = (int)generateRandom(45, 90);
  1088     00A0  302D               	movlw	45
  1089     00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1090     00A2  00B9               	movwf	generateRandom@min
  1091     00A3  3000               	movlw	0
  1092     00A4  00BA               	movwf	generateRandom@min+1
  1093     00A5  305A               	movlw	90
  1094     00A6  00BB               	movwf	generateRandom@max
  1095     00A7  3000               	movlw	0
  1096     00A8  00BC               	movwf	generateRandom@max+1
  1097     00A9  2220               	fcall	_generateRandom
  1098     00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1099     00AB  083A               	movf	?_generateRandom+1,w
  1100     00AC  00C9               	movwf	_motorTarget+3
  1101     00AD  0839               	movf	?_generateRandom,w
  1102     00AE  00C8               	movwf	_motorTarget+2
  1103                           
  1104                           ;main.c: 210:             speed[1] = (uint8_t)generateRandom(5, 10);
  1105     00AF  3005               	movlw	5
  1106     00B0  00B9               	movwf	generateRandom@min
  1107     00B1  3000               	movlw	0
  1108     00B2  00BA               	movwf	generateRandom@min+1
  1109     00B3  300A               	movlw	10
  1110     00B4  00BB               	movwf	generateRandom@max
  1111     00B5  3000               	movlw	0
  1112     00B6  00BC               	movwf	generateRandom@max+1
  1113     00B7  2220               	fcall	_generateRandom
  1114     00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1115     00B9  0839               	movf	?_generateRandom,w
  1116     00BA  00CF               	movwf	_speed+1
  1117                           
  1118                           ;main.c: 211:         } else if (motorTarget[1] <= 45) {
  1119     00BB  28FC               	goto	l123
  1120     00BC                     l1326:
  1121     00BC  0849               	movf	_motorTarget+3,w
  1122     00BD  3A80               	xorlw	128
  1123     00BE  00FF               	movwf	btemp+1
  1124     00BF  3080               	movlw	128
  1125     00C0  027F               	subwf	btemp+1,w
  1126     00C1  1D03               	skipz
  1127     00C2  28C5               	goto	u785
  1128     00C3  302E               	movlw	46
  1129     00C4  0248               	subwf	_motorTarget+2,w
  1130     00C5                     u785:
  1131     00C5  1803               	skipnc
  1132     00C6  28C8               	goto	u781
  1133     00C7  28C9               	goto	u780
  1134     00C8                     u781:
  1135     00C8  28CA               	goto	l1330
  1136     00C9                     u780:
  1137     00C9  28A0               	goto	l1324
  1138     00CA                     l1330:
  1139     00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1140     00CB  0849               	movf	_motorTarget+3,w
  1141     00CC  3A80               	xorlw	128
  1142     00CD  00FF               	movwf	btemp+1
  1143     00CE  3080               	movlw	128
  1144     00CF  027F               	subwf	btemp+1,w
  1145     00D0  1D03               	skipz
  1146     00D1  28D4               	goto	u795
  1147     00D2  305A               	movlw	90
  1148     00D3  0248               	subwf	_motorTarget+2,w
  1149     00D4                     u795:
  1150     00D4  1C03               	skipc
  1151     00D5  28D7               	goto	u791
  1152     00D6  28D8               	goto	u790
  1153     00D7                     u791:
  1154     00D7  28D9               	goto	l1334
  1155     00D8                     u790:
  1156     00D8  28A0               	goto	l1324
  1157     00D9                     l1334:
  1158     00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1159     00DA  0845               	movf	_motorAngle+3,w
  1160     00DB  3A80               	xorlw	128
  1161     00DC  00C1               	movwf	??_setTorretPosition
  1162     00DD  0849               	movf	_motorTarget+3,w
  1163     00DE  3A80               	xorlw	128
  1164     00DF  0241               	subwf	??_setTorretPosition,w
  1165     00E0  1D03               	skipz
  1166     00E1  28E4               	goto	u805
  1167     00E2  0848               	movf	_motorTarget+2,w
  1168     00E3  0244               	subwf	_motorAngle+2,w
  1169     00E4                     u805:
  1170     00E4  1803               	skipnc
  1171     00E5  28E7               	goto	u801
  1172     00E6  28E8               	goto	u800
  1173     00E7                     u801:
  1174     00E7  28F0               	goto	l1338
  1175     00E8                     u800:
  1176     00E8                     l1336:
  1177                           
  1178                           ;main.c: 218:             motorAngle[1]++;
  1179     00E8  3001               	movlw	1
  1180     00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1181     00EA  07C4               	addwf	_motorAngle+2,f
  1182     00EB  1803               	skipnc
  1183     00EC  0AC5               	incf	_motorAngle+3,f
  1184     00ED  3000               	movlw	0
  1185     00EE  07C5               	addwf	_motorAngle+3,f
  1186                           
  1187                           ;main.c: 219:         } else {
  1188     00EF  28FC               	goto	l123
  1189     00F0                     l1338:
  1190                           
  1191                           ;main.c: 220:             motorAngle[1]--;
  1192     00F0  30FF               	movlw	255
  1193     00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1194     00F2  07C4               	addwf	_motorAngle+2,f
  1195     00F3  1803               	skipnc
  1196     00F4  0AC5               	incf	_motorAngle+3,f
  1197     00F5  30FF               	movlw	255
  1198     00F6  07C5               	addwf	_motorAngle+3,f
  1199     00F7  28FC               	goto	l123
  1200     00F8                     l1340:
  1201                           
  1202                           ;main.c: 223:         speedCounter[1]++;
  1203     00F8  3001               	movlw	1
  1204     00F9  00C1               	movwf	??_setTorretPosition
  1205     00FA  0841               	movf	??_setTorretPosition,w
  1206     00FB  07CD               	addwf	_speedCounter+1,f
  1207     00FC                     l123:
  1208     00FC  0008               	return
  1209     00FD                     __end_of_setTorretPosition:
  1210                           
  1211                           	psect	text7
  1212     0220                     __ptext7:	
  1213 ;; *************** function _generateRandom *****************
  1214 ;; Defined at:
  1215 ;;		line 167 in file "main.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  min             2   25[BANK0 ] int 
  1218 ;;  max             2   27[BANK0 ] int 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  randomNumber    2   31[BANK0 ] int 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  2   25[BANK0 ] int 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2, status,0, pclath, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1
  1230 ;;      Params:         0       4       0
  1231 ;;      Locals:         0       2       0
  1232 ;;      Temps:          0       2       0
  1233 ;;      Totals:         0       8       0
  1234 ;;Total ram usage:        8 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; Hardware stack levels required when called: 4
  1237 ;; This function calls:
  1238 ;;		___awmod
  1239 ;;		_rand
  1240 ;; This function is called by:
  1241 ;;		_setTorretPosition
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245     0220                     _generateRandom:	
  1246                           ;psect for function _generateRandom
  1247                           
  1248     0220                     l1244:	
  1249                           ;incstack = 0
  1250                           ; Regs used in _generateRandom: [wreg+status,2+status,0+pclath+cstack]
  1251                           
  1252     0220                     l1246:
  1253                           
  1254                           ;main.c: 170:     randomNumber = (rand() % (max - min + 1)) +
  1255     0220  1283               	bcf	3,5	;RP0=0, select bank0
  1256     0221  0839               	movf	generateRandom@min,w
  1257     0222  023B               	subwf	generateRandom@max,w
  1258     0223  00BD               	movwf	??_generateRandom
  1259     0224  083A               	movf	generateRandom@min+1,w
  1260     0225  1C03               	skipc
  1261     0226  0A3A               	incf	generateRandom@min+1,w
  1262     0227  023C               	subwf	generateRandom@max+1,w
  1263     0228  00BE               	movwf	??_generateRandom+1
  1264     0229  083D               	movf	??_generateRandom,w
  1265     022A  3E01               	addlw	1
  1266     022B  00B3               	movwf	___awmod@divisor
  1267     022C  083E               	movf	??_generateRandom+1,w
  1268     022D  1803               	skipnc
  1269     022E  3E01               	addlw	1
  1270     022F  3E00               	addlw	0
  1271     0230  00B4               	movwf	___awmod@divisor+1
  1272     0231  219E               	fcall	_rand
  1273     0232  1283               	bcf	3,5	;RP0=0, select bank0
  1274     0233  082D               	movf	?_rand+1,w
  1275     0234  00B6               	movwf	___awmod@dividend+1
  1276     0235  082C               	movf	?_rand,w
  1277     0236  00B5               	movwf	___awmod@dividend
  1278     0237  20FD               	fcall	___awmod
  1279     0238  1283               	bcf	3,5	;RP0=0, select bank0
  1280     0239  0839               	movf	generateRandom@min,w
  1281     023A  0733               	addwf	?___awmod,w
  1282     023B  00BF               	movwf	generateRandom@randomNumber
  1283     023C  083A               	movf	generateRandom@min+1,w
  1284     023D  1803               	skipnc
  1285     023E  0A3A               	incf	generateRandom@min+1,w
  1286     023F  0734               	addwf	?___awmod+1,w
  1287     0240  00C0               	movwf	generateRandom@randomNumber+1
  1288     0241                     l1248:
  1289                           
  1290                           ;main.c: 172:     return randomNumber;
  1291     0241  0840               	movf	generateRandom@randomNumber+1,w
  1292     0242  00BA               	movwf	?_generateRandom+1
  1293     0243  083F               	movf	generateRandom@randomNumber,w
  1294     0244  00B9               	movwf	?_generateRandom
  1295     0245                     l100:
  1296     0245  0008               	return
  1297     0246                     __end_of_generateRandom:
  1298                           
  1299                           	psect	text8
  1300     019E                     __ptext8:	
  1301 ;; *************** function _rand *****************
  1302 ;; Defined at:
  1303 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;		None
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  2   12[BANK0 ] int 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0, pclath, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1
  1317 ;;      Params:         0       2       0
  1318 ;;      Locals:         0       0       0
  1319 ;;      Temps:          0       5       0
  1320 ;;      Totals:         0       7       0
  1321 ;;Total ram usage:        7 bytes
  1322 ;; Hardware stack levels used: 1
  1323 ;; Hardware stack levels required when called: 3
  1324 ;; This function calls:
  1325 ;;		___lmul
  1326 ;; This function is called by:
  1327 ;;		_generateRandom
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331     019E                     _rand:	
  1332                           ;psect for function _rand
  1333                           
  1334     019E                     l1236:	
  1335                           ;incstack = 0
  1336                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1337                           
  1338     019E  1283               	bcf	3,5	;RP0=0, select bank0
  1339     019F  0853               	movf	_randx+3,w
  1340     01A0  00A3               	movwf	___lmul@multiplier+3
  1341     01A1  0852               	movf	_randx+2,w
  1342     01A2  00A2               	movwf	___lmul@multiplier+2
  1343     01A3  0851               	movf	_randx+1,w
  1344     01A4  00A1               	movwf	___lmul@multiplier+1
  1345     01A5  0850               	movf	_randx,w
  1346     01A6  00A0               	movwf	___lmul@multiplier
  1347     01A7  3041               	movlw	65
  1348     01A8  00A7               	movwf	___lmul@multiplicand+3
  1349     01A9  30C6               	movlw	198
  1350     01AA  00A6               	movwf	___lmul@multiplicand+2
  1351     01AB  304E               	movlw	78
  1352     01AC  00A5               	movwf	___lmul@multiplicand+1
  1353     01AD  306D               	movlw	109
  1354     01AE  00A4               	movwf	___lmul@multiplicand
  1355     01AF  2157               	fcall	___lmul
  1356     01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1357     01B1  0823               	movf	?___lmul+3,w
  1358     01B2  00D3               	movwf	_randx+3
  1359     01B3  0822               	movf	?___lmul+2,w
  1360     01B4  00D2               	movwf	_randx+2
  1361     01B5  0821               	movf	?___lmul+1,w
  1362     01B6  00D1               	movwf	_randx+1
  1363     01B7  0820               	movf	?___lmul,w
  1364     01B8  00D0               	movwf	_randx
  1365     01B9                     l1238:
  1366     01B9  3039               	movlw	57
  1367     01BA  07D0               	addwf	_randx,f
  1368     01BB  3030               	movlw	48
  1369     01BC  1803               	skipnc
  1370     01BD  3031               	movlw	49
  1371     01BE  07D1               	addwf	_randx+1,f
  1372     01BF  3000               	movlw	0
  1373     01C0  1803               	skipnc
  1374     01C1  3001               	movlw	1
  1375     01C2  07D2               	addwf	_randx+2,f
  1376     01C3  3000               	movlw	0
  1377     01C4  1803               	skipnc
  1378     01C5  3001               	movlw	1
  1379     01C6  07D3               	addwf	_randx+3,f
  1380     01C7                     l1240:
  1381     01C7  0850               	movf	_randx,w
  1382     01C8  00AE               	movwf	??_rand
  1383     01C9  0851               	movf	_randx+1,w
  1384     01CA  00AF               	movwf	??_rand+1
  1385     01CB  0852               	movf	_randx+2,w
  1386     01CC  00B0               	movwf	??_rand+2
  1387     01CD  0853               	movf	_randx+3,w
  1388     01CE  00B1               	movwf	??_rand+3
  1389     01CF  3010               	movlw	16
  1390     01D0  00B2               	movwf	??_rand+4
  1391     01D1                     u705:
  1392     01D1  0D31               	rlf	??_rand+3,w
  1393     01D2  0CB1               	rrf	??_rand+3,f
  1394     01D3  0CB0               	rrf	??_rand+2,f
  1395     01D4  0CAF               	rrf	??_rand+1,f
  1396     01D5  0CAE               	rrf	??_rand,f
  1397     01D6                     u700:
  1398     01D6  0BB2               	decfsz	??_rand+4,f
  1399     01D7  29D1               	goto	u705
  1400     01D8  30FF               	movlw	255
  1401     01D9  052E               	andwf	??_rand,w
  1402     01DA  00AC               	movwf	?_rand
  1403     01DB  307F               	movlw	127
  1404     01DC  052F               	andwf	??_rand+1,w
  1405     01DD  00AD               	movwf	?_rand+1
  1406     01DE                     l674:
  1407     01DE  0008               	return
  1408     01DF                     __end_of_rand:
  1409                           
  1410                           	psect	text9
  1411     0157                     __ptext9:	
  1412 ;; *************** function ___lmul *****************
  1413 ;; Defined at:
  1414 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1417 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  product         4    8[BANK0 ] unsigned long 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  4    0[BANK0 ] unsigned long 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMMON   BANK0   BANK1
  1429 ;;      Params:         0       8       0
  1430 ;;      Locals:         0       4       0
  1431 ;;      Temps:          1       0       0
  1432 ;;      Totals:         1      12       0
  1433 ;;Total ram usage:       13 bytes
  1434 ;; Hardware stack levels used: 1
  1435 ;; Hardware stack levels required when called: 2
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_rand
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443     0157                     ___lmul:	
  1444                           ;psect for function ___lmul
  1445                           
  1446     0157                     l1222:	
  1447                           ;incstack = 0
  1448                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1449                           
  1450     0157  3000               	movlw	0
  1451     0158  1283               	bcf	3,5	;RP0=0, select bank0
  1452     0159  00AB               	movwf	___lmul@product+3
  1453     015A  3000               	movlw	0
  1454     015B  00AA               	movwf	___lmul@product+2
  1455     015C  3000               	movlw	0
  1456     015D  00A9               	movwf	___lmul@product+1
  1457     015E  3000               	movlw	0
  1458     015F  00A8               	movwf	___lmul@product
  1459     0160                     l1224:
  1460     0160  1C20               	btfss	___lmul@multiplier,0
  1461     0161  2963               	goto	u651
  1462     0162  2964               	goto	u650
  1463     0163                     u651:
  1464     0163  297B               	goto	l1228
  1465     0164                     u650:
  1466     0164                     l1226:
  1467     0164  0824               	movf	___lmul@multiplicand,w
  1468     0165  07A8               	addwf	___lmul@product,f
  1469     0166  0825               	movf	___lmul@multiplicand+1,w
  1470     0167  1103               	clrz
  1471     0168  1803               	skipnc
  1472     0169  3E01               	addlw	1
  1473     016A  1903               	skipnz
  1474     016B  296D               	goto	u661
  1475     016C  07A9               	addwf	___lmul@product+1,f
  1476     016D                     u661:
  1477     016D  0826               	movf	___lmul@multiplicand+2,w
  1478     016E  1103               	clrz
  1479     016F  1803               	skipnc
  1480     0170  3E01               	addlw	1
  1481     0171  1903               	skipnz
  1482     0172  2974               	goto	u662
  1483     0173  07AA               	addwf	___lmul@product+2,f
  1484     0174                     u662:
  1485     0174  0827               	movf	___lmul@multiplicand+3,w
  1486     0175  1103               	clrz
  1487     0176  1803               	skipnc
  1488     0177  3E01               	addlw	1
  1489     0178  1903               	skipnz
  1490     0179  297B               	goto	u663
  1491     017A  07AB               	addwf	___lmul@product+3,f
  1492     017B                     u663:
  1493     017B                     l1228:
  1494     017B  3001               	movlw	1
  1495     017C  00F4               	movwf	??___lmul
  1496     017D                     u675:
  1497     017D  1003               	clrc
  1498     017E  0DA4               	rlf	___lmul@multiplicand,f
  1499     017F  0DA5               	rlf	___lmul@multiplicand+1,f
  1500     0180  0DA6               	rlf	___lmul@multiplicand+2,f
  1501     0181  0DA7               	rlf	___lmul@multiplicand+3,f
  1502     0182  0BF4               	decfsz	??___lmul,f
  1503     0183  297D               	goto	u675
  1504     0184                     l1230:
  1505     0184  3001               	movlw	1
  1506     0185                     u685:
  1507     0185  1003               	clrc
  1508     0186  0CA3               	rrf	___lmul@multiplier+3,f
  1509     0187  0CA2               	rrf	___lmul@multiplier+2,f
  1510     0188  0CA1               	rrf	___lmul@multiplier+1,f
  1511     0189  0CA0               	rrf	___lmul@multiplier,f
  1512     018A  3EFF               	addlw	-1
  1513     018B  1D03               	skipz
  1514     018C  2985               	goto	u685
  1515     018D  0823               	movf	___lmul@multiplier+3,w
  1516     018E  0422               	iorwf	___lmul@multiplier+2,w
  1517     018F  0421               	iorwf	___lmul@multiplier+1,w
  1518     0190  0420               	iorwf	___lmul@multiplier,w
  1519     0191  1D03               	skipz
  1520     0192  2994               	goto	u691
  1521     0193  2995               	goto	u690
  1522     0194                     u691:
  1523     0194  2960               	goto	l1224
  1524     0195                     u690:
  1525     0195                     l1232:
  1526     0195  082B               	movf	___lmul@product+3,w
  1527     0196  00A3               	movwf	?___lmul+3
  1528     0197  082A               	movf	___lmul@product+2,w
  1529     0198  00A2               	movwf	?___lmul+2
  1530     0199  0829               	movf	___lmul@product+1,w
  1531     019A  00A1               	movwf	?___lmul+1
  1532     019B  0828               	movf	___lmul@product,w
  1533     019C  00A0               	movwf	?___lmul
  1534     019D                     l232:
  1535     019D  0008               	return
  1536     019E                     __end_of___lmul:
  1537                           
  1538                           	psect	text10
  1539     00FD                     __ptext10:	
  1540 ;; *************** function ___awmod *****************
  1541 ;; Defined at:
  1542 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  divisor         2   19[BANK0 ] int 
  1545 ;;  dividend        2   21[BANK0 ] int 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  sign            1   24[BANK0 ] unsigned char 
  1548 ;;  counter         1   23[BANK0 ] unsigned char 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  2   19[BANK0 ] int 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2, status,0
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1
  1558 ;;      Params:         0       4       0
  1559 ;;      Locals:         0       2       0
  1560 ;;      Temps:          1       0       0
  1561 ;;      Totals:         1       6       0
  1562 ;;Total ram usage:        7 bytes
  1563 ;; Hardware stack levels used: 1
  1564 ;; Hardware stack levels required when called: 2
  1565 ;; This function calls:
  1566 ;;		Nothing
  1567 ;; This function is called by:
  1568 ;;		_generateRandom
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572     00FD                     ___awmod:	
  1573                           ;psect for function ___awmod
  1574                           
  1575     00FD                     l1008:	
  1576                           ;incstack = 0
  1577                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1578                           
  1579     00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1580     00FE  01B8               	clrf	___awmod@sign
  1581     00FF                     l1010:
  1582     00FF  1FB6               	btfss	___awmod@dividend+1,7
  1583     0100  2902               	goto	u391
  1584     0101  2903               	goto	u390
  1585     0102                     u391:
  1586     0102  290A               	goto	l1016
  1587     0103                     u390:
  1588     0103                     l1012:
  1589     0103  09B5               	comf	___awmod@dividend,f
  1590     0104  09B6               	comf	___awmod@dividend+1,f
  1591     0105  0AB5               	incf	___awmod@dividend,f
  1592     0106  1903               	skipnz
  1593     0107  0AB6               	incf	___awmod@dividend+1,f
  1594     0108                     l1014:
  1595     0108  01B8               	clrf	___awmod@sign
  1596     0109  0AB8               	incf	___awmod@sign,f
  1597     010A                     l1016:
  1598     010A  1FB4               	btfss	___awmod@divisor+1,7
  1599     010B  290D               	goto	u401
  1600     010C  290E               	goto	u400
  1601     010D                     u401:
  1602     010D  2913               	goto	l1020
  1603     010E                     u400:
  1604     010E                     l1018:
  1605     010E  09B3               	comf	___awmod@divisor,f
  1606     010F  09B4               	comf	___awmod@divisor+1,f
  1607     0110  0AB3               	incf	___awmod@divisor,f
  1608     0111  1903               	skipnz
  1609     0112  0AB4               	incf	___awmod@divisor+1,f
  1610     0113                     l1020:
  1611     0113  0833               	movf	___awmod@divisor,w
  1612     0114  0434               	iorwf	___awmod@divisor+1,w
  1613     0115  1903               	btfsc	3,2
  1614     0116  2918               	goto	u411
  1615     0117  2919               	goto	u410
  1616     0118                     u411:
  1617     0118  2948               	goto	l1038
  1618     0119                     u410:
  1619     0119                     l1022:
  1620     0119  01B7               	clrf	___awmod@counter
  1621     011A  0AB7               	incf	___awmod@counter,f
  1622     011B  2927               	goto	l1028
  1623     011C                     l1024:
  1624     011C  3001               	movlw	1
  1625     011D                     u425:
  1626     011D  1003               	clrc
  1627     011E  0DB3               	rlf	___awmod@divisor,f
  1628     011F  0DB4               	rlf	___awmod@divisor+1,f
  1629     0120  3EFF               	addlw	-1
  1630     0121  1D03               	skipz
  1631     0122  291D               	goto	u425
  1632     0123                     l1026:
  1633     0123  3001               	movlw	1
  1634     0124  00F5               	movwf	??___awmod
  1635     0125  0875               	movf	??___awmod,w
  1636     0126  07B7               	addwf	___awmod@counter,f
  1637     0127                     l1028:
  1638     0127  1FB4               	btfss	___awmod@divisor+1,7
  1639     0128  292A               	goto	u431
  1640     0129  292B               	goto	u430
  1641     012A                     u431:
  1642     012A  291C               	goto	l1024
  1643     012B                     u430:
  1644     012B                     l1030:
  1645     012B  0834               	movf	___awmod@divisor+1,w
  1646     012C  0236               	subwf	___awmod@dividend+1,w
  1647     012D  1D03               	skipz
  1648     012E  2931               	goto	u445
  1649     012F  0833               	movf	___awmod@divisor,w
  1650     0130  0235               	subwf	___awmod@dividend,w
  1651     0131                     u445:
  1652     0131  1C03               	skipc
  1653     0132  2934               	goto	u441
  1654     0133  2935               	goto	u440
  1655     0134                     u441:
  1656     0134  293B               	goto	l1034
  1657     0135                     u440:
  1658     0135                     l1032:
  1659     0135  0833               	movf	___awmod@divisor,w
  1660     0136  02B5               	subwf	___awmod@dividend,f
  1661     0137  0834               	movf	___awmod@divisor+1,w
  1662     0138  1C03               	skipc
  1663     0139  03B6               	decf	___awmod@dividend+1,f
  1664     013A  02B6               	subwf	___awmod@dividend+1,f
  1665     013B                     l1034:
  1666     013B  3001               	movlw	1
  1667     013C                     u455:
  1668     013C  1003               	clrc
  1669     013D  0CB4               	rrf	___awmod@divisor+1,f
  1670     013E  0CB3               	rrf	___awmod@divisor,f
  1671     013F  3EFF               	addlw	-1
  1672     0140  1D03               	skipz
  1673     0141  293C               	goto	u455
  1674     0142                     l1036:
  1675     0142  3001               	movlw	1
  1676     0143  02B7               	subwf	___awmod@counter,f
  1677     0144  1D03               	btfss	3,2
  1678     0145  2947               	goto	u461
  1679     0146  2948               	goto	u460
  1680     0147                     u461:
  1681     0147  292B               	goto	l1030
  1682     0148                     u460:
  1683     0148                     l1038:
  1684     0148  0838               	movf	___awmod@sign,w
  1685     0149  1903               	btfsc	3,2
  1686     014A  294C               	goto	u471
  1687     014B  294D               	goto	u470
  1688     014C                     u471:
  1689     014C  2952               	goto	l1042
  1690     014D                     u470:
  1691     014D                     l1040:
  1692     014D  09B5               	comf	___awmod@dividend,f
  1693     014E  09B6               	comf	___awmod@dividend+1,f
  1694     014F  0AB5               	incf	___awmod@dividend,f
  1695     0150  1903               	skipnz
  1696     0151  0AB6               	incf	___awmod@dividend+1,f
  1697     0152                     l1042:
  1698     0152  0836               	movf	___awmod@dividend+1,w
  1699     0153  00B4               	movwf	?___awmod+1
  1700     0154  0835               	movf	___awmod@dividend,w
  1701     0155  00B3               	movwf	?___awmod
  1702     0156                     l384:
  1703     0156  0008               	return
  1704     0157                     __end_of___awmod:
  1705                           
  1706                           	psect	text11
  1707     0246                     __ptext11:	
  1708 ;; *************** function _myISR *****************
  1709 ;; Defined at:
  1710 ;;		line 65 in file "main.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1
  1724 ;;      Params:         0       0       0
  1725 ;;      Locals:         0       0       0
  1726 ;;      Temps:          3       0       0
  1727 ;;      Totals:         3       0       0
  1728 ;;Total ram usage:        3 bytes
  1729 ;; Hardware stack levels used: 1
  1730 ;; Hardware stack levels required when called: 1
  1731 ;; This function calls:
  1732 ;;		_timer1InterruptHandler
  1733 ;; This function is called by:
  1734 ;;		Interrupt level 1
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738     0246                     _myISR:	
  1739                           ;psect for function _myISR
  1740                           
  1741     0246                     i1l1194:
  1742                           
  1743                           ;main.c: 66:     if (INTCONbits.TMR0IF) {
  1744     0246  1D0B               	btfss	11,2	;volatile
  1745     0247  2A49               	goto	u61_21
  1746     0248  2A4A               	goto	u61_20
  1747     0249                     u61_21:
  1748     0249  2A50               	goto	i1l1202
  1749     024A                     u61_20:
  1750     024A                     i1l1196:
  1751                           
  1752                           ;main.c: 68:         TMR0 = 178;
  1753     024A  30B2               	movlw	178
  1754     024B  1283               	bcf	3,5	;RP0=0, select bank0
  1755     024C  0081               	movwf	1	;volatile
  1756     024D                     i1l1198:
  1757                           
  1758                           ;main.c: 69:         INTCONbits.TMR0IF = 0;
  1759     024D  110B               	bcf	11,2	;volatile
  1760     024E                     i1l1200:
  1761                           
  1762                           ;main.c: 70:         mustCheckServos = 1;
  1763     024E  01F8               	clrf	_mustCheckServos
  1764     024F  0AF8               	incf	_mustCheckServos,f
  1765     0250                     i1l1202:
  1766                           
  1767                           ;main.c: 73:     if (PIR1bits.TMR1IF) {
  1768     0250  1283               	bcf	3,5	;RP0=0, select bank0
  1769     0251  1C0C               	btfss	12,0	;volatile
  1770     0252  2A54               	goto	u62_21
  1771     0253  2A55               	goto	u62_20
  1772     0254                     u62_21:
  1773     0254  2A57               	goto	i1l1208
  1774     0255                     u62_20:
  1775     0255                     i1l1204:
  1776                           
  1777                           ;main.c: 74:         PIR1bits.TMR1IF = 0;
  1778     0255  100C               	bcf	12,0	;volatile
  1779     0256                     i1l1206:
  1780                           
  1781                           ;main.c: 75:         timer1InterruptHandler();
  1782     0256  21DF               	fcall	_timer1InterruptHandler
  1783     0257                     i1l1208:
  1784                           
  1785                           ;main.c: 78:     if (PIR1bits.TMR2IF) {
  1786     0257  1283               	bcf	3,5	;RP0=0, select bank0
  1787     0258  1C8C               	btfss	12,1	;volatile
  1788     0259  2A5B               	goto	u63_21
  1789     025A  2A5C               	goto	u63_20
  1790     025B                     u63_21:
  1791     025B  2A60               	goto	i1l78
  1792     025C                     u63_20:
  1793     025C                     i1l1210:
  1794                           
  1795                           ;main.c: 79:         PIR1bits.TMR2IF = 0;
  1796     025C  108C               	bcf	12,1	;volatile
  1797     025D                     i1l1212:
  1798                           
  1799                           ;main.c: 81:         GPIO = GPIO & 0b11001111;
  1800     025D  0805               	movf	5,w	;volatile
  1801     025E  39CF               	andlw	207
  1802     025F  0085               	movwf	5	;volatile
  1803     0260                     i1l78:
  1804     0260  0873               	movf	??_myISR+2,w
  1805     0261  008A               	movwf	10
  1806     0262  0872               	movf	??_myISR+1,w
  1807     0263  0084               	movwf	4
  1808     0264  0E71               	swapf	??_myISR,w
  1809     0265  0083               	movwf	3
  1810     0266  0EFE               	swapf	btemp,f
  1811     0267  0E7E               	swapf	btemp,w
  1812     0268  0009               	retfie
  1813     0269                     __end_of_myISR:
  1814                           
  1815                           	psect	intentry
  1816     0004                     __pintentry:	
  1817                           ;incstack = 0
  1818                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1819                           
  1820     0004                     interrupt_function:
  1821     007E                     saved_w	set	btemp
  1822     0004  00FE               	movwf	btemp
  1823     0005  0E03               	swapf	3,w
  1824     0006  00F1               	movwf	??_myISR
  1825     0007  0804               	movf	4,w
  1826     0008  00F2               	movwf	??_myISR+1
  1827     0009  080A               	movf	10,w
  1828     000A  00F3               	movwf	??_myISR+2
  1829     000B  2A46               	ljmp	_myISR
  1830                           
  1831                           	psect	text12
  1832     01DF                     __ptext12:	
  1833 ;; *************** function _timer1InterruptHandler *****************
  1834 ;; Defined at:
  1835 ;;		line 87 in file "main.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1
  1849 ;;      Params:         0       0       0
  1850 ;;      Locals:         0       0       0
  1851 ;;      Temps:          1       0       0
  1852 ;;      Totals:         1       0       0
  1853 ;;Total ram usage:        1 bytes
  1854 ;; Hardware stack levels used: 1
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_myISR
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862     01DF                     _timer1InterruptHandler:	
  1863                           ;psect for function _timer1InterruptHandler
  1864                           
  1865     01DF                     i1l1068:	
  1866                           ;incstack = 0
  1867                           ; Regs used in _timer1InterruptHandler: [wreg-fsr0h+status,2+status,0]
  1868                           
  1869                           
  1870                           ;main.c: 88:     if (EstadoRCServo == 0) {
  1871     01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1872     01E0  0854               	movf	_EstadoRCServo,w
  1873     01E1  1D03               	btfss	3,2
  1874     01E2  29E4               	goto	u48_21
  1875     01E3  29E5               	goto	u48_20
  1876     01E4                     u48_21:
  1877     01E4  2A03               	goto	i1l1084
  1878     01E5                     u48_20:
  1879     01E5                     i1l1070:
  1880                           
  1881                           ;main.c: 89:         EstadoRCServo = 1;
  1882     01E5  01D4               	clrf	_EstadoRCServo
  1883     01E6  0AD4               	incf	_EstadoRCServo,f
  1884                           
  1885                           ;main.c: 90:         TMR1 = 61561;
  1886     01E7  30F0               	movlw	240
  1887     01E8  008F               	movwf	15	;volatile
  1888     01E9  3079               	movlw	121
  1889     01EA  008E               	movwf	14	;volatile
  1890     01EB                     i1l1072:
  1891                           
  1892                           ;main.c: 91:         TMR2 = 0;
  1893     01EB  0191               	clrf	17	;volatile
  1894     01EC                     i1l1074:
  1895                           
  1896                           ;main.c: 92:         PR2 = motorAngle[ContadorMotor];
  1897     01EC  0876               	movf	_ContadorMotor,w
  1898     01ED  00F0               	movwf	??_timer1InterruptHandler
  1899     01EE  0770               	addwf	??_timer1InterruptHandler,w
  1900     01EF  3E42               	addlw	(low (_motorAngle| 0))& (0+255)
  1901     01F0  0084               	movwf	4
  1902     01F1  1383               	bcf	3,7	;select IRP bank0
  1903     01F2  0800               	movf	0,w
  1904     01F3  1683               	bsf	3,5	;RP0=1, select bank1
  1905     01F4  0092               	movwf	18	;volatile
  1906     01F5                     i1l1076:
  1907                           
  1908                           ;main.c: 93:         TMR2ON = 1;
  1909     01F5  1283               	bcf	3,5	;RP0=0, select bank0
  1910     01F6  1512               	bsf	18,2	;volatile
  1911     01F7                     i1l1078:
  1912                           
  1913                           ;main.c: 94:         if (PR2 == 0) {
  1914     01F7  1683               	bsf	3,5	;RP0=1, select bank1
  1915     01F8  0812               	movf	18,w	;volatile
  1916     01F9  1D03               	btfss	3,2
  1917     01FA  29FC               	goto	u49_21
  1918     01FB  29FD               	goto	u49_20
  1919     01FC                     u49_21:
  1920     01FC  2A1F               	goto	i1l85
  1921     01FD                     u49_20:
  1922     01FD                     i1l1080:
  1923                           
  1924                           ;main.c: 96:             TMR2ON = 0;
  1925     01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1926     01FE  1112               	bcf	18,2	;volatile
  1927     01FF                     i1l1082:
  1928                           
  1929                           ;main.c: 98:             GPIO = (GPIO & 0b11001111);
  1930     01FF  0805               	movf	5,w	;volatile
  1931     0200  39CF               	andlw	207
  1932     0201  0085               	movwf	5	;volatile
  1933     0202  2A1F               	goto	i1l85
  1934     0203                     i1l1084:
  1935                           
  1936                           ;main.c: 101:         EstadoRCServo = 0;
  1937     0203  01D4               	clrf	_EstadoRCServo
  1938     0204                     i1l1086:
  1939                           
  1940                           ;main.c: 102:         TMR1 = 64561;
  1941     0204  30FC               	movlw	252
  1942     0205  008F               	movwf	15	;volatile
  1943     0206  3031               	movlw	49
  1944     0207  008E               	movwf	14	;volatile
  1945     0208                     i1l1088:
  1946                           
  1947                           ;main.c: 103:         TMR2IF = 0;
  1948     0208  108C               	bcf	12,1	;volatile
  1949     0209                     i1l1090:
  1950                           
  1951                           ;main.c: 105:         TMR2ON = 0;
  1952     0209  1112               	bcf	18,2	;volatile
  1953     020A                     i1l1092:
  1954                           
  1955                           ;main.c: 106:         ContadorMotor++;
  1956     020A  3001               	movlw	1
  1957     020B  00F0               	movwf	??_timer1InterruptHandler
  1958     020C  0870               	movf	??_timer1InterruptHandler,w
  1959     020D  07F6               	addwf	_ContadorMotor,f
  1960     020E                     i1l1094:
  1961                           
  1962                           ;main.c: 107:         MaskMotor = (uint8_t)(MaskMotor << 1);
  1963     020E  0879               	movf	_MaskMotor,w
  1964     020F  00F0               	movwf	??_timer1InterruptHandler
  1965     0210  0770               	addwf	??_timer1InterruptHandler,w
  1966     0211  00F9               	movwf	_MaskMotor
  1967     0212                     i1l1096:
  1968                           
  1969                           ;main.c: 108:         if (ContadorMotor >= 2) {
  1970     0212  3002               	movlw	2
  1971     0213  0276               	subwf	_ContadorMotor,w
  1972     0214  1C03               	skipc
  1973     0215  2A17               	goto	u50_21
  1974     0216  2A18               	goto	u50_20
  1975     0217                     u50_21:
  1976     0217  2A1B               	goto	i1l1102
  1977     0218                     u50_20:
  1978     0218                     i1l1098:
  1979                           
  1980                           ;main.c: 109:             ContadorMotor = 0;
  1981     0218  01F6               	clrf	_ContadorMotor
  1982     0219                     i1l1100:
  1983                           
  1984                           ;main.c: 110:             MaskMotor = 0b00010000;
  1985     0219  3010               	movlw	16
  1986     021A  00F9               	movwf	_MaskMotor
  1987     021B                     i1l1102:
  1988                           
  1989                           ;main.c: 113:         GPIO = (GPIO & 0b11001111) | MaskMotor;
  1990     021B  0805               	movf	5,w	;volatile
  1991     021C  39CF               	andlw	207
  1992     021D  0479               	iorwf	_MaskMotor,w
  1993     021E  0085               	movwf	5	;volatile
  1994     021F                     i1l85:
  1995     021F  0008               	return
  1996     0220                     __end_of_timer1InterruptHandler:
  1997     007E                     btemp	set	126	;btemp
  1998     007E                     wtemp0	set	126
  1999                           
  2000                           	psect	idloc
  2001                           
  2002                           ;Config register IDLOC0 @ 0x2000
  2003                           ;	unspecified, using default values
  2004     2000                     	org	8192
  2005     2000  3FFF               	dw	16383
  2006                           
  2007                           ;Config register IDLOC1 @ 0x2001
  2008                           ;	unspecified, using default values
  2009     2001                     	org	8193
  2010     2001  3FFF               	dw	16383
  2011                           
  2012                           ;Config register IDLOC2 @ 0x2002
  2013                           ;	unspecified, using default values
  2014     2002                     	org	8194
  2015     2002  3FFF               	dw	16383
  2016                           
  2017                           ;Config register IDLOC3 @ 0x2003
  2018                           ;	unspecified, using default values
  2019     2003                     	org	8195
  2020     2003  3FFF               	dw	16383
  2021                           
  2022                           	psect	config
  2023                           
  2024                           ;Config register CONFIG @ 0x2007
  2025                           ;	Oscillator Selection bits
  2026                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  2027                           ;	Watchdog Timer Enable bit
  2028                           ;	WDTE = OFF, WDT disabled
  2029                           ;	Power-up Timer Enable bit
  2030                           ;	PWRTE = ON, PWRT enabled
  2031                           ;	MCLR Pin Function Select bit
  2032                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  2033                           ;	Code Protection bit
  2034                           ;	CP = OFF, Program memory code protection is disabled
  2035                           ;	Data Code Protection bit
  2036                           ;	CPD = 0x1, unprogrammed default
  2037                           ;	Brown Out Detect
  2038                           ;	BOREN = ON, BOR enabled
  2039                           ;	Internal External Switchover bit
  2040                           ;	IESO = 0x1, unprogrammed default
  2041                           ;	Fail-Safe Clock Monitor Enabled bit
  2042                           ;	FCMEN = 0x1, unprogrammed default
  2043     2007                     	org	8199
  2044     2007  3FC4               	dw	16324

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         17
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     34      53
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_srand
    _generateRandom->___awmod
    _rand->___lmul

Critical Paths under _myISR in COMMON

    _myISR->_timer1InterruptHandler

Critical Paths under _main in BANK0

    _main->_setTorretPosition
    _setTorretPosition->_generateRandom
    _generateRandom->___awmod
    _rand->___lmul
    ___awmod->_rand

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3152
                  _setTorretPosition
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                2     2      0      98
                                              0 BANK0      2     2      0
                            _initPWM
                        _setupTimer0
                        _setupTimer1
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setupTimer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTorretPosition                                    1     1      0    3054
                                             33 BANK0      1     1      0
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _generateRandom                                       8     4      4    3054
                                             25 BANK0      8     4      4
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                             12 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              4 COMMON     1     1      0
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              5 COMMON     1     1      0
                                             19 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myISR                                                3     3      0       0
                                              1 COMMON     3     3      0
             _timer1InterruptHandler
 ---------------------------------------------------------------------------------
 (6) _timer1InterruptHandler                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setTorretPosition
     _generateRandom
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
   _setup
     _initPWM
     _setupTimer0
     _setupTimer1
     _srand

 _myISR (ROOT)
   _timer1InterruptHandler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      35       4       66.2%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3F       8        0.0%
ABS                  0      0      3F       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Feb 02 21:10:47 2024

           ??_setTorretPosition 0041                              l91 02AB                              l94 0297  
                            l88 02B5                              l97 0289                              fsr 0004  
                           l100 0245                             l123 00FC                             l232 019D  
                           l384 0156                             l800 02B4                             l802 02A2  
                           l804 02A4                             l806 02A6                             l671 02C5  
                           l808 02AA                             l674 01DE                             l792 02AC  
                           l794 02AE                             l796 02AF                             l798 02B1  
                           _GP2 002A                             u400 010E                             u401 010D  
                           u410 0119                             u411 0118                             u430 012B  
                           _PR2 0092                             u431 012A                             u440 0135  
                           u441 0134                             u425 011D                             u460 0148  
                           u700 01D6                             u461 0147                             u445 0131  
                           u470 014D                             u390 0103                             u710 0026  
                           u471 014C                             u455 013C                             u391 0102  
                           u711 0025                             u800 00E8                             u720 0031  
                           u705 01D1                             u801 00E7                             u721 0030  
                           u650 0164                             u730 005C                             u810 029E  
                           u651 0163                             u731 005B                             u811 029D  
                           u740 006B                             u661 016D                             u805 00E4  
                           u741 006A                             u725 002D                             u662 0174  
                           u750 007B                             u663 017B                             u751 007A  
                           u735 0058                             u760 0095                             u761 0094  
                           u745 0067                             u690 0195                             u770 00A0  
                           u691 0194                             u675 017D                             u771 009F  
                           u755 0077                             u780 00C9                             u685 0185  
                           u781 00C8                             u790 00D8                             u791 00D7  
                           u775 009C                             u785 00C5                             u795 00D4  
                           fsr0 0004                             indf 0000                    ___awmod@sign 0038  
                          l1010 00FF                            l1020 0113                            l1012 0103  
                          l1030 012B                            l1022 0119                            l1014 0108  
                          l1040 014D                            l1032 0135                            l1024 011C  
                          l1016 010A                            l1008 00FD                            l1042 0152  
                          l1034 013B                            l1026 0123                            l1018 010E  
                          l1050 028E                            l1036 0142                            l1028 0127  
                          l1052 028F                            l1038 0148                            l1230 0184  
                          l1222 0157                            l1310 006C                            l1054 0292  
                          l1046 028A                            l1232 0195                            l1224 0160  
                          l1240 01C7                            l1320 0095                            l1312 007B  
                          l1304 005D                            l1056 0294                            l1048 028C  
                          l1226 0164                            l1330 00CA                            l1322 0096  
                          l1314 0083                            l1058 02BE                            l1228 017B  
                          l1236 019E                            l1244 0220                            l1324 00A0  
                          l1340 00F8                            l1316 008B                            l1260 0278  
                          l1252 0269                            l1238 01B9                            l1246 0220  
                          l1334 00D9                            l1326 00BC                            l1318 008F  
                          l1270 027F                            l1262 0279                            l1254 0272  
                          l1342 0298                            l1248 0241                            l1336 00E8  
                          l1280 0284                            l1272 0280                            l1264 027A  
                          l1256 0275                            l1344 0299                            l1338 00F0  
                          l1290 0026                            l1282 0285                            l1274 0281  
                          l1266 027C                            l1258 0276                            l1346 029E  
                          l1292 0027                            l1284 0286                            l1276 0282  
                          l1268 027E                            l1348 029F                            l1294 0031  
                          l1286 0288                            l1278 0283                            l1296 004C  
                          l1288 001F                            l1298 004F       __end_of_setTorretPosition 00FD  
                          _INDF 0000                            _GPIO 0005                   _EstadoRCServo 0054  
                          i1l85 021F                            i1l78 0260                            _TMR0 0001  
                          _TMR1 000E                            _TMR2 0011                            _main 0298  
                          _rand 019E                            btemp 007E                            start 000C  
                         ?_main 0070                           ?_rand 002C                 __end_of___awmod 0157  
                         _ANSEL 009F                           _T1CON 0010                           _T2CON 0012  
                         u50_20 0218                           u50_21 0217                           u61_20 024A  
                         u61_21 0249                           u62_20 0255                           u62_21 0254  
                         u63_20 025C                           u63_21 025B                           u48_20 01E5  
                         u48_21 01E4                           u49_20 01FD                           u49_21 01FC  
           ___lmul@multiplicand 0024                 __end_of_initPWM 0298                           _myISR 0246  
                         _randx 0050                           _speed 004E                           _setup 0269  
                         _srand 02BE                           pclath 000A      generateRandom@randomNumber 003F  
                         status 0003                           wtemp0 007E                 __initialization 000D  
                  __end_of_main 02A2                    __end_of_rand 01DF                          ??_main 0076  
                        ??_rand 002E                ??_generateRandom 003D        ??_timer1InterruptHandler 0070  
                        ?_myISR 0070                          ?_setup 0070                          ?_srand 0074  
                        i1l1100 0219                          i1l1102 021B                          i1l1200 024E  
                        i1l1210 025C                          i1l1202 0250                          i1l1212 025D  
                        i1l1204 0255                          i1l1070 01E5                          i1l1206 0256  
                        i1l1080 01FD                          i1l1072 01EB                          i1l1208 0257  
                        i1l1090 0209                          i1l1082 01FF                          i1l1074 01EC  
                        i1l1092 020A                          i1l1076 01F5                          i1l1084 0203  
                        i1l1068 01DF                          i1l1094 020E                          i1l1086 0204  
                        i1l1078 01F7                          i1l1096 0212                          i1l1088 0208  
                        i1l1098 0218                          i1l1194 0246                          i1l1196 024A  
                        i1l1198 024D                          _OSCCON 008F                          _TMR2IF 0061  
                        _TMR2ON 0092                          _TRISIO 0085                          ___lmul 0157  
                     ??___awmod 0075                 ___awmod@divisor 0033                 ___awmod@counter 0037  
                     ??_initPWM 0074                          saved_w 007E                          srand@x 0074  
                  ?_setupTimer0 0070                    ?_setupTimer1 0070         __end_of__initialization 001D  
                __pcstackCOMMON 0070                    __pidataBANK0 02C6                   __end_of_myISR 0269  
                 __end_of_setup 028A                   __end_of_srand 02C6                  _OPTION_REGbits 0081  
                       ??_myISR 0071                         ??_setup 0020                         ??_srand 0076  
                    __pbssBANK0 0042                      __pnvCOMMON 0079                      __pmaintext 0298  
                       ?___lmul 0020                      __pintentry 0004                         _CCP1CON 0015  
                ___lmul@product 0028          _timer1InterruptHandler 01DF                 _mustCheckServos 0078  
                       ___awmod 00FD                         __ptext1 0269                         __ptext2 02BE  
                       __ptext3 02A2                         __ptext4 02AC                         __ptext5 028A  
                       __ptext6 001F                         __ptext7 0220                         __ptext8 019E  
                       __ptext9 0157                       _T1CONbits 0010                         _initPWM 028A  
              ___awmod@dividend 0035                         clrloop0 02B7            end_of_initialization 001D  
                    _motorAngle 0042                  __end_of___lmul 019E             start_initialization 000D  
                     _MaskMotor 0079                        ??___lmul 0074                     __pdataBANK0 0050  
                   __pbssCOMMON 0076                       ___latbits 0000                   __pcstackBANK0 0020  
                   _activeMotor 0077         ?_timer1InterruptHandler 0070                       __pnvBANK0 0054  
                      ?___awmod 0033                        ?_initPWM 0070  __end_of_timer1InterruptHandler 0220  
             interrupt_function 0004                        _GPIObits 0005                       clear_ram0 02B6  
                      _PIE1bits 008C               generateRandom@max 003B               generateRandom@min 0039  
                      _PIR1bits 000C                   ??_setupTimer0 0074                   ??_setupTimer1 0074  
             ___lmul@multiplier 0020                  _generateRandom 0220          __end_of_generateRandom 0246  
                      __ptext10 00FD                        __ptext11 0246                        __ptext12 01DF  
                 _ContadorMotor 0076             __end_of_setupTimer0 02B6             __end_of_setupTimer1 02AC  
                _overflow_count 004A                      _INTCONbits 000B                 ?_generateRandom 0039  
                  _speedCounter 004C                        intlevel1 0000                     _motorTarget 0046  
                    _OPTION_REG 0081                     _setupTimer0 02AC                     _setupTimer1 02A2  
             _setTorretPosition 001F              ?_setTorretPosition 0070  
