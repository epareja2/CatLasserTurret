

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Feb 04 21:00:04 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F683
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Generated 21/04/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC12F683 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69     0000                     	;# 
    70     0001                     	;# 
    71     0002                     	;# 
    72     0003                     	;# 
    73     0004                     	;# 
    74     0005                     	;# 
    75     000A                     	;# 
    76     000B                     	;# 
    77     000C                     	;# 
    78     000E                     	;# 
    79     000E                     	;# 
    80     000F                     	;# 
    81     0010                     	;# 
    82     0011                     	;# 
    83     0012                     	;# 
    84     0013                     	;# 
    85     0013                     	;# 
    86     0014                     	;# 
    87     0015                     	;# 
    88     0018                     	;# 
    89     0019                     	;# 
    90     001A                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     008C                     	;# 
    96     008E                     	;# 
    97     008F                     	;# 
    98     0090                     	;# 
    99     0092                     	;# 
   100     0095                     	;# 
   101     0095                     	;# 
   102     0096                     	;# 
   103     0096                     	;# 
   104     0099                     	;# 
   105     009A                     	;# 
   106     009A                     	;# 
   107     009B                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     000A                     	;# 
   119     000B                     	;# 
   120     000C                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0013                     	;# 
   129     0014                     	;# 
   130     0015                     	;# 
   131     0018                     	;# 
   132     0019                     	;# 
   133     001A                     	;# 
   134     001E                     	;# 
   135     001F                     	;# 
   136     0081                     	;# 
   137     0085                     	;# 
   138     008C                     	;# 
   139     008E                     	;# 
   140     008F                     	;# 
   141     0090                     	;# 
   142     0092                     	;# 
   143     0095                     	;# 
   144     0095                     	;# 
   145     0096                     	;# 
   146     0096                     	;# 
   147     0099                     	;# 
   148     009A                     	;# 
   149     009A                     	;# 
   150     009B                     	;# 
   151     009C                     	;# 
   152     009D                     	;# 
   153     009E                     	;# 
   154     009F                     	;# 
   155                           
   156                           	psect	idataBANK0
   157     05C5                     __pidataBANK0:
   158                           
   159                           ;initializer for _randx
   160     05C5  3401               	retlw	1
   161     05C6  3400               	retlw	0
   162     05C7  3400               	retlw	0
   163     05C8  3400               	retlw	0
   164                           
   165                           	psect	nvCOMMON
   166     0079                     __pnvCOMMON:
   167     0079                     _MaskMotor:
   168     0079                     	ds	1
   169     000E                     _TMR1	set	14
   170     0005                     _GPIObits	set	5
   171     0012                     _T2CON	set	18
   172     0015                     _CCP1CON	set	21
   173     0010                     _T1CONbits	set	16
   174     0010                     _T1CON	set	16
   175     0011                     _TMR2	set	17
   176     0005                     _GPIO	set	5
   177     000C                     _PIR1bits	set	12
   178     0001                     _TMR0	set	1
   179     000B                     _INTCONbits	set	11
   180     0061                     _TMR2IF	set	97
   181     0092                     _TMR2ON	set	146
   182     002A                     _GP2	set	42
   183     008C                     _PIE1bits	set	140
   184     0085                     _TRISIO	set	133
   185     009F                     _ANSEL	set	159
   186     008F                     _OSCCON	set	143
   187     0081                     _OPTION_REGbits	set	129
   188     0081                     _OPTION_REG	set	129
   189     0092                     _PR2	set	146
   190                           
   191                           	psect	cinit
   192     000D                     start_initialization:	
   193                           ; #config settings
   194                           
   195     000D                     __initialization:
   196                           
   197                           ; Initialize objects allocated to BANK0
   198     000D  25C5               	fcall	__pidataBANK0	;fetch initializer
   199     000E  00EB               	movwf	__pdataBANK0& (0+127)
   200     000F  25C6               	fcall	__pidataBANK0+1	;fetch initializer
   201     0010  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   202     0011  25C7               	fcall	__pidataBANK0+2	;fetch initializer
   203     0012  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   204     0013  25C8               	fcall	__pidataBANK0+3	;fetch initializer
   205     0014  00EE               	movwf	(__pdataBANK0+3)& (0+127)
   206                           
   207                           ; Clear objects allocated to BANK0
   208     0015  1383               	bcf	3,7	;select IRP bank0
   209     0016  3055               	movlw	low __pbssBANK0
   210     0017  0084               	movwf	4
   211     0018  306B               	movlw	low (__pbssBANK0+22)
   212     0019  25B5               	fcall	clear_ram0
   213                           
   214                           ; Clear objects allocated to COMMON
   215     001A  3075               	movlw	low __pbssCOMMON
   216     001B  0084               	movwf	4
   217     001C  3079               	movlw	low (__pbssCOMMON+4)
   218     001D  25B5               	fcall	clear_ram0
   219     001E                     end_of_initialization:	
   220                           ;End of C runtime variable initialization code
   221                           
   222     001E                     __end_of__initialization:
   223     001E  0183               	clrf	3
   224     001F  2979               	ljmp	_main	;jump to C main() function
   225                           
   226                           	psect	bssCOMMON
   227     0075                     __pbssCOMMON:
   228     0075                     _ContadorMotor:
   229     0075                     	ds	1
   230     0076                     _EstadoRCServo:
   231     0076                     	ds	1
   232     0077                     _activeMotor:
   233     0077                     	ds	1
   234     0078                     _mustCheckServos:
   235     0078                     	ds	1
   236                           
   237                           	psect	bssBANK0
   238     0055                     __pbssBANK0:
   239     0055                     _motorAngle:
   240     0055                     	ds	4
   241     0059                     _motorIncrement:
   242     0059                     	ds	4
   243     005D                     _motorTarget:
   244     005D                     	ds	4
   245     0061                     _otroContador:
   246     0061                     	ds	2
   247     0063                     _overflow_count:
   248     0063                     	ds	2
   249     0065                     _speed:
   250     0065                     	ds	2
   251     0067                     _pwmActual:
   252     0067                     	ds	2
   253     0069                     _motorRawValueTarget:
   254     0069                     	ds	2
   255                           
   256                           	psect	dataBANK0
   257     006B                     __pdataBANK0:
   258     006B                     _randx:
   259     006B                     	ds	4
   260                           
   261                           	psect	clrtext
   262     05B5                     clear_ram0:	
   263                           ;	Called with FSR containing the base address, and
   264                           ;	W with the last address+1
   265                           
   266     05B5  0064               	clrwdt	;clear the watchdog before getting into this loop
   267     05B6                     clrloop0:
   268     05B6  0180               	clrf	0	;clear RAM location pointed to by FSR
   269     05B7  0A84               	incf	4,f	;increment pointer
   270     05B8  0604               	xorwf	4,w	;XOR with final address
   271     05B9  1903               	btfsc	3,2	;have we reached the end yet?
   272     05BA  3400               	retlw	0	;all done for this memory range, return
   273     05BB  0604               	xorwf	4,w	;XOR again to restore value
   274     05BC  2DB6               	goto	clrloop0	;do the next byte
   275                           
   276                           	psect	cstackCOMMON
   277     0070                     __pcstackCOMMON:
   278     0070                     ?_timer1InterruptHandler:
   279     0070                     ??_timer1InterruptHandler:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     0070                     ?_myISR:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     0070                     ?_setupTimer0:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     0070                     ?_setupTimer1:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     0070                     ?_initPWM:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?_setup:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     0070                     ?_setTorretPosition:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?_main:	
   301                           ; 1 bytes @ 0x0
   302                           
   303                           
   304                           ; 1 bytes @ 0x0
   305     0070                     	ds	2
   306     0072                     ??_myISR:
   307                           
   308                           ; 1 bytes @ 0x2
   309     0072                     	ds	3
   310                           
   311                           	psect	cstackBANK0
   312     0020                     __pcstackBANK0:
   313     0020                     ?_srand:
   314     0020                     ??_setupTimer0:	
   315                           ; 1 bytes @ 0x0
   316                           
   317     0020                     ??_setupTimer1:	
   318                           ; 1 bytes @ 0x0
   319                           
   320     0020                     ??_initPWM:	
   321                           ; 1 bytes @ 0x0
   322                           
   323     0020                     ?___wmul:	
   324                           ; 1 bytes @ 0x0
   325                           
   326     0020                     ?___lmul:	
   327                           ; 2 bytes @ 0x0
   328                           
   329     0020                     ___wmul@multiplier:	
   330                           ; 4 bytes @ 0x0
   331                           
   332     0020                     srand@x:	
   333                           ; 2 bytes @ 0x0
   334                           
   335     0020                     ___lmul@multiplier:	
   336                           ; 2 bytes @ 0x0
   337                           
   338                           
   339                           ; 4 bytes @ 0x0
   340     0020                     	ds	2
   341     0022                     ??_srand:
   342     0022                     ??_setup:	
   343                           ; 1 bytes @ 0x2
   344                           
   345     0022                     ___wmul@multiplicand:	
   346                           ; 1 bytes @ 0x2
   347                           
   348                           
   349                           ; 2 bytes @ 0x2
   350     0022                     	ds	2
   351     0024                     ??___wmul:
   352     0024                     ___wmul@product:	
   353                           ; 1 bytes @ 0x4
   354                           
   355     0024                     ___lmul@multiplicand:	
   356                           ; 2 bytes @ 0x4
   357                           
   358                           
   359                           ; 4 bytes @ 0x4
   360     0024                     	ds	2
   361     0026                     ?___awdiv:
   362     0026                     ___awdiv@divisor:	
   363                           ; 2 bytes @ 0x6
   364                           
   365                           
   366                           ; 2 bytes @ 0x6
   367     0026                     	ds	2
   368     0028                     ??___lmul:
   369     0028                     ___awdiv@dividend:	
   370                           ; 1 bytes @ 0x8
   371                           
   372                           
   373                           ; 2 bytes @ 0x8
   374     0028                     	ds	1
   375     0029                     ___lmul@product:
   376                           
   377                           ; 4 bytes @ 0x9
   378     0029                     	ds	1
   379     002A                     ??___awdiv:
   380                           
   381                           ; 1 bytes @ 0xA
   382     002A                     	ds	1
   383     002B                     ___awdiv@counter:
   384                           
   385                           ; 1 bytes @ 0xB
   386     002B                     	ds	1
   387     002C                     ___awdiv@sign:
   388                           
   389                           ; 1 bytes @ 0xC
   390     002C                     	ds	1
   391     002D                     ?_rand:
   392     002D                     ___awdiv@quotient:	
   393                           ; 2 bytes @ 0xD
   394                           
   395                           
   396                           ; 2 bytes @ 0xD
   397     002D                     	ds	2
   398     002F                     ??_rand:
   399     002F                     ?_convertAngle:	
   400                           ; 1 bytes @ 0xF
   401                           
   402     002F                     convertAngle@value:	
   403                           ; 1 bytes @ 0xF
   404                           
   405                           
   406                           ; 2 bytes @ 0xF
   407     002F                     	ds	2
   408     0031                     ??_convertAngle:
   409     0031                     convertAngle@temp:	
   410                           ; 1 bytes @ 0x11
   411                           
   412                           
   413                           ; 2 bytes @ 0x11
   414     0031                     	ds	3
   415     0034                     ?___awmod:
   416     0034                     ___awmod@divisor:	
   417                           ; 2 bytes @ 0x14
   418                           
   419                           
   420                           ; 2 bytes @ 0x14
   421     0034                     	ds	2
   422     0036                     ___awmod@dividend:
   423                           
   424                           ; 2 bytes @ 0x16
   425     0036                     	ds	2
   426     0038                     ??___awmod:
   427                           
   428                           ; 1 bytes @ 0x18
   429     0038                     	ds	1
   430     0039                     ___awmod@counter:
   431                           
   432                           ; 1 bytes @ 0x19
   433     0039                     	ds	1
   434     003A                     ___awmod@sign:
   435                           
   436                           ; 1 bytes @ 0x1A
   437     003A                     	ds	1
   438     003B                     ?_generateRandom:
   439     003B                     generateRandom@min:	
   440                           ; 2 bytes @ 0x1B
   441                           
   442                           
   443                           ; 2 bytes @ 0x1B
   444     003B                     	ds	2
   445     003D                     generateRandom@max:
   446                           
   447                           ; 2 bytes @ 0x1D
   448     003D                     	ds	2
   449     003F                     ??_generateRandom:
   450                           
   451                           ; 1 bytes @ 0x1F
   452     003F                     	ds	2
   453     0041                     generateRandom@randomNumber:
   454                           
   455                           ; 2 bytes @ 0x21
   456     0041                     	ds	2
   457     0043                     ?_calculateSpeedIncrement:
   458                           
   459                           ; 2 bytes @ 0x23
   460     0043                     	ds	2
   461     0045                     ??_calculateSpeedIncrement:
   462                           
   463                           ; 1 bytes @ 0x25
   464     0045                     	ds	7
   465     004C                     calculateSpeedIncrement@speed:
   466                           
   467                           ; 2 bytes @ 0x2C
   468     004C                     	ds	2
   469     004E                     calculateSpeedIncrement@increment:
   470                           
   471                           ; 2 bytes @ 0x2E
   472     004E                     	ds	2
   473     0050                     calculateSpeedIncrement@index:
   474                           
   475                           ; 1 bytes @ 0x30
   476     0050                     	ds	1
   477     0051                     ??_setTorretPosition:
   478                           
   479                           ; 1 bytes @ 0x31
   480     0051                     	ds	1
   481     0052                     ??_main:
   482                           
   483                           ; 1 bytes @ 0x32
   484     0052                     	ds	3
   485                           
   486                           	psect	maintext
   487     0179                     __pmaintext:	
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 330 in file "main.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : B00/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMMON   BANK0   BANK1
   507 ;;      Params:         0       0       0
   508 ;;      Locals:         0       0       0
   509 ;;      Temps:          0       3       0
   510 ;;      Totals:         0       3       0
   511 ;;Total ram usage:        3 bytes
   512 ;; Hardware stack levels required when called: 7
   513 ;; This function calls:
   514 ;;		_convertAngle
   515 ;;		_setTorretPosition
   516 ;;		_setup
   517 ;; This function is called by:
   518 ;;		Startup code after reset
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522     0179                     _main:	
   523                           ;psect for function _main
   524                           
   525     0179                     l2052:	
   526                           ;incstack = 0
   527                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   528                           
   529                           
   530                           ;main.c: 331:     setup();
   531     0179  2577               	fcall	_setup
   532     017A                     l2054:
   533                           
   534                           ;main.c: 332:     motorAngle[0] = 0;
   535     017A  1283               	bcf	3,5	;RP0=0, select bank0
   536     017B  01D5               	clrf	_motorAngle
   537     017C  01D6               	clrf	_motorAngle+1
   538     017D                     l2056:
   539                           
   540                           ;main.c: 333:     motorAngle[1] = 0;
   541     017D  01D7               	clrf	_motorAngle+2
   542     017E  01D8               	clrf	_motorAngle+3
   543     017F                     l2058:
   544                           
   545                           ;main.c: 334:     motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   546     017F  0856               	movf	_motorAngle+1,w
   547     0180  00B0               	movwf	convertAngle@value+1
   548     0181  0855               	movf	_motorAngle,w
   549     0182  00AF               	movwf	convertAngle@value
   550     0183  24A4               	fcall	_convertAngle
   551     0184  1283               	bcf	3,5	;RP0=0, select bank0
   552     0185  00E9               	movwf	_motorRawValueTarget
   553     0186                     l2060:
   554                           
   555                           ;main.c: 335:     motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   556     0186  0858               	movf	_motorAngle+3,w
   557     0187  00B0               	movwf	convertAngle@value+1
   558     0188  0857               	movf	_motorAngle+2,w
   559     0189  00AF               	movwf	convertAngle@value
   560     018A  24A4               	fcall	_convertAngle
   561     018B  1283               	bcf	3,5	;RP0=0, select bank0
   562     018C  00EA               	movwf	_motorRawValueTarget+1
   563     018D                     l2062:
   564                           
   565                           ;main.c: 336:     GP2 = 1;
   566     018D  1505               	bsf	5,2	;volatile
   567     018E                     l2064:
   568                           
   569                           ;main.c: 338:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   570     018E  3033               	movlw	51
   571     018F  1283               	bcf	3,5	;RP0=0, select bank0
   572     0190  00D4               	movwf	??_main+2
   573     0191  30BB               	movlw	187
   574     0192  00D3               	movwf	??_main+1
   575     0193  30DF               	movlw	223
   576     0194  00D2               	movwf	??_main
   577     0195                     u1547:
   578     0195  0BD2               	decfsz	??_main,f
   579     0196  2995               	goto	u1547
   580     0197  0BD3               	decfsz	??_main+1,f
   581     0198  2995               	goto	u1547
   582     0199  0BD4               	decfsz	??_main+2,f
   583     019A  2995               	goto	u1547
   584     019B  0000               	nop
   585     019C                     l2066:
   586                           
   587                           ;main.c: 339:     motorAngle[0] = -90;
   588     019C  30A6               	movlw	166
   589     019D  1283               	bcf	3,5	;RP0=0, select bank0
   590     019E  00D5               	movwf	_motorAngle
   591     019F  30FF               	movlw	255
   592     01A0  00D6               	movwf	_motorAngle+1
   593     01A1                     l2068:
   594                           
   595                           ;main.c: 340:     motorAngle[1] = -90;
   596     01A1  30A6               	movlw	166
   597     01A2  00D7               	movwf	_motorAngle+2
   598     01A3  30FF               	movlw	255
   599     01A4  00D8               	movwf	_motorAngle+3
   600     01A5                     l2070:
   601                           
   602                           ;main.c: 341:     motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   603     01A5  0856               	movf	_motorAngle+1,w
   604     01A6  00B0               	movwf	convertAngle@value+1
   605     01A7  0855               	movf	_motorAngle,w
   606     01A8  00AF               	movwf	convertAngle@value
   607     01A9  24A4               	fcall	_convertAngle
   608     01AA  1283               	bcf	3,5	;RP0=0, select bank0
   609     01AB  00E9               	movwf	_motorRawValueTarget
   610     01AC                     l2072:
   611                           
   612                           ;main.c: 342:     motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   613     01AC  0858               	movf	_motorAngle+3,w
   614     01AD  00B0               	movwf	convertAngle@value+1
   615     01AE  0857               	movf	_motorAngle+2,w
   616     01AF  00AF               	movwf	convertAngle@value
   617     01B0  24A4               	fcall	_convertAngle
   618     01B1  1283               	bcf	3,5	;RP0=0, select bank0
   619     01B2  00EA               	movwf	_motorRawValueTarget+1
   620     01B3                     l2074:
   621                           
   622                           ;main.c: 343:     GP2 ^= 1;
   623     01B3  3004               	movlw	4
   624     01B4  0685               	xorwf	5,f
   625     01B5                     l2076:
   626                           
   627                           ;main.c: 345:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   628     01B5  3033               	movlw	51
   629     01B6  1283               	bcf	3,5	;RP0=0, select bank0
   630     01B7  00D4               	movwf	??_main+2
   631     01B8  30BB               	movlw	187
   632     01B9  00D3               	movwf	??_main+1
   633     01BA  30DF               	movlw	223
   634     01BB  00D2               	movwf	??_main
   635     01BC                     u1557:
   636     01BC  0BD2               	decfsz	??_main,f
   637     01BD  29BC               	goto	u1557
   638     01BE  0BD3               	decfsz	??_main+1,f
   639     01BF  29BC               	goto	u1557
   640     01C0  0BD4               	decfsz	??_main+2,f
   641     01C1  29BC               	goto	u1557
   642     01C2  0000               	nop
   643     01C3                     l2078:
   644                           
   645                           ;main.c: 346:     motorAngle[0] = 90;
   646     01C3  305A               	movlw	90
   647     01C4  1283               	bcf	3,5	;RP0=0, select bank0
   648     01C5  00D5               	movwf	_motorAngle
   649     01C6  3000               	movlw	0
   650     01C7  00D6               	movwf	_motorAngle+1
   651     01C8                     l2080:
   652                           
   653                           ;main.c: 347:     motorAngle[1] = 90;
   654     01C8  305A               	movlw	90
   655     01C9  00D7               	movwf	_motorAngle+2
   656     01CA  3000               	movlw	0
   657     01CB  00D8               	movwf	_motorAngle+3
   658     01CC                     l2082:
   659                           
   660                           ;main.c: 348:     motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   661     01CC  0856               	movf	_motorAngle+1,w
   662     01CD  00B0               	movwf	convertAngle@value+1
   663     01CE  0855               	movf	_motorAngle,w
   664     01CF  00AF               	movwf	convertAngle@value
   665     01D0  24A4               	fcall	_convertAngle
   666     01D1  1283               	bcf	3,5	;RP0=0, select bank0
   667     01D2  00E9               	movwf	_motorRawValueTarget
   668     01D3                     l2084:
   669                           
   670                           ;main.c: 349:     motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   671     01D3  0858               	movf	_motorAngle+3,w
   672     01D4  00B0               	movwf	convertAngle@value+1
   673     01D5  0857               	movf	_motorAngle+2,w
   674     01D6  00AF               	movwf	convertAngle@value
   675     01D7  24A4               	fcall	_convertAngle
   676     01D8  1283               	bcf	3,5	;RP0=0, select bank0
   677     01D9  00EA               	movwf	_motorRawValueTarget+1
   678     01DA                     l2086:
   679                           
   680                           ;main.c: 350:     GP2 ^= 1;
   681     01DA  3004               	movlw	4
   682     01DB  0685               	xorwf	5,f
   683     01DC                     l2088:
   684                           
   685                           ;main.c: 352:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   686     01DC  3033               	movlw	51
   687     01DD  1283               	bcf	3,5	;RP0=0, select bank0
   688     01DE  00D4               	movwf	??_main+2
   689     01DF  30BB               	movlw	187
   690     01E0  00D3               	movwf	??_main+1
   691     01E1  30DF               	movlw	223
   692     01E2  00D2               	movwf	??_main
   693     01E3                     u1567:
   694     01E3  0BD2               	decfsz	??_main,f
   695     01E4  29E3               	goto	u1567
   696     01E5  0BD3               	decfsz	??_main+1,f
   697     01E6  29E3               	goto	u1567
   698     01E7  0BD4               	decfsz	??_main+2,f
   699     01E8  29E3               	goto	u1567
   700     01E9  0000               	nop
   701     01EA                     l2090:
   702                           
   703                           ;main.c: 354:     motorAngle[0] = -70;
   704     01EA  30BA               	movlw	186
   705     01EB  1283               	bcf	3,5	;RP0=0, select bank0
   706     01EC  00D5               	movwf	_motorAngle
   707     01ED  30FF               	movlw	255
   708     01EE  00D6               	movwf	_motorAngle+1
   709     01EF                     l2092:
   710                           
   711                           ;main.c: 355:     motorAngle[1] = -70;
   712     01EF  30BA               	movlw	186
   713     01F0  00D7               	movwf	_motorAngle+2
   714     01F1  30FF               	movlw	255
   715     01F2  00D8               	movwf	_motorAngle+3
   716     01F3                     l2094:
   717                           
   718                           ;main.c: 356:     motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   719     01F3  0856               	movf	_motorAngle+1,w
   720     01F4  00B0               	movwf	convertAngle@value+1
   721     01F5  0855               	movf	_motorAngle,w
   722     01F6  00AF               	movwf	convertAngle@value
   723     01F7  24A4               	fcall	_convertAngle
   724     01F8  1283               	bcf	3,5	;RP0=0, select bank0
   725     01F9  00E9               	movwf	_motorRawValueTarget
   726     01FA                     l2096:
   727                           
   728                           ;main.c: 357:     motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   729     01FA  0858               	movf	_motorAngle+3,w
   730     01FB  00B0               	movwf	convertAngle@value+1
   731     01FC  0857               	movf	_motorAngle+2,w
   732     01FD  00AF               	movwf	convertAngle@value
   733     01FE  24A4               	fcall	_convertAngle
   734     01FF  1283               	bcf	3,5	;RP0=0, select bank0
   735     0200  00EA               	movwf	_motorRawValueTarget+1
   736     0201                     l2098:
   737                           
   738                           ;main.c: 358:     GP2 ^= 1;
   739     0201  3004               	movlw	4
   740     0202  0685               	xorwf	5,f
   741     0203                     l2100:
   742                           
   743                           ;main.c: 360:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   744     0203  3033               	movlw	51
   745     0204  1283               	bcf	3,5	;RP0=0, select bank0
   746     0205  00D4               	movwf	??_main+2
   747     0206  30BB               	movlw	187
   748     0207  00D3               	movwf	??_main+1
   749     0208  30DF               	movlw	223
   750     0209  00D2               	movwf	??_main
   751     020A                     u1577:
   752     020A  0BD2               	decfsz	??_main,f
   753     020B  2A0A               	goto	u1577
   754     020C  0BD3               	decfsz	??_main+1,f
   755     020D  2A0A               	goto	u1577
   756     020E  0BD4               	decfsz	??_main+2,f
   757     020F  2A0A               	goto	u1577
   758     0210  0000               	nop
   759     0211                     l2102:
   760                           
   761                           ;main.c: 361:     motorAngle[0] = 70;
   762     0211  3046               	movlw	70
   763     0212  1283               	bcf	3,5	;RP0=0, select bank0
   764     0213  00D5               	movwf	_motorAngle
   765     0214  3000               	movlw	0
   766     0215  00D6               	movwf	_motorAngle+1
   767     0216                     l2104:
   768                           
   769                           ;main.c: 362:     motorAngle[1] = 70;
   770     0216  3046               	movlw	70
   771     0217  00D7               	movwf	_motorAngle+2
   772     0218  3000               	movlw	0
   773     0219  00D8               	movwf	_motorAngle+3
   774     021A                     l2106:
   775                           
   776                           ;main.c: 363:     motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   777     021A  0856               	movf	_motorAngle+1,w
   778     021B  00B0               	movwf	convertAngle@value+1
   779     021C  0855               	movf	_motorAngle,w
   780     021D  00AF               	movwf	convertAngle@value
   781     021E  24A4               	fcall	_convertAngle
   782     021F  1283               	bcf	3,5	;RP0=0, select bank0
   783     0220  00E9               	movwf	_motorRawValueTarget
   784     0221                     l2108:
   785                           
   786                           ;main.c: 364:     motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   787     0221  0858               	movf	_motorAngle+3,w
   788     0222  00B0               	movwf	convertAngle@value+1
   789     0223  0857               	movf	_motorAngle+2,w
   790     0224  00AF               	movwf	convertAngle@value
   791     0225  24A4               	fcall	_convertAngle
   792     0226  1283               	bcf	3,5	;RP0=0, select bank0
   793     0227  00EA               	movwf	_motorRawValueTarget+1
   794     0228                     l2110:
   795                           
   796                           ;main.c: 365:     GP2 ^= 1;
   797     0228  3004               	movlw	4
   798     0229  0685               	xorwf	5,f
   799     022A                     l2112:
   800                           
   801                           ;main.c: 367:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   802     022A  3033               	movlw	51
   803     022B  1283               	bcf	3,5	;RP0=0, select bank0
   804     022C  00D4               	movwf	??_main+2
   805     022D  30BB               	movlw	187
   806     022E  00D3               	movwf	??_main+1
   807     022F  30DF               	movlw	223
   808     0230  00D2               	movwf	??_main
   809     0231                     u1587:
   810     0231  0BD2               	decfsz	??_main,f
   811     0232  2A31               	goto	u1587
   812     0233  0BD3               	decfsz	??_main+1,f
   813     0234  2A31               	goto	u1587
   814     0235  0BD4               	decfsz	??_main+2,f
   815     0236  2A31               	goto	u1587
   816     0237  0000               	nop
   817     0238                     l2114:
   818                           
   819                           ;main.c: 368:     motorAngle[0] = 0;
   820     0238  1283               	bcf	3,5	;RP0=0, select bank0
   821     0239  01D5               	clrf	_motorAngle
   822     023A  01D6               	clrf	_motorAngle+1
   823     023B                     l2116:
   824                           
   825                           ;main.c: 369:     motorAngle[1] = 0;
   826     023B  01D7               	clrf	_motorAngle+2
   827     023C  01D8               	clrf	_motorAngle+3
   828     023D                     l2118:
   829                           
   830                           ;main.c: 370:     motorRawValueTarget[0] = convertAngle(motorAngle[0]);
   831     023D  0856               	movf	_motorAngle+1,w
   832     023E  00B0               	movwf	convertAngle@value+1
   833     023F  0855               	movf	_motorAngle,w
   834     0240  00AF               	movwf	convertAngle@value
   835     0241  24A4               	fcall	_convertAngle
   836     0242  1283               	bcf	3,5	;RP0=0, select bank0
   837     0243  00E9               	movwf	_motorRawValueTarget
   838     0244                     l2120:
   839                           
   840                           ;main.c: 371:     motorRawValueTarget[1] = convertAngle(motorAngle[1]);
   841     0244  0858               	movf	_motorAngle+3,w
   842     0245  00B0               	movwf	convertAngle@value+1
   843     0246  0857               	movf	_motorAngle+2,w
   844     0247  00AF               	movwf	convertAngle@value
   845     0248  24A4               	fcall	_convertAngle
   846     0249  1283               	bcf	3,5	;RP0=0, select bank0
   847     024A  00EA               	movwf	_motorRawValueTarget+1
   848     024B                     l2122:
   849                           
   850                           ;main.c: 372:     GP2 ^= 1;
   851     024B  3004               	movlw	4
   852     024C  0685               	xorwf	5,f
   853     024D                     l2124:
   854                           
   855                           ;main.c: 374:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   856     024D  3033               	movlw	51
   857     024E  1283               	bcf	3,5	;RP0=0, select bank0
   858     024F  00D4               	movwf	??_main+2
   859     0250  30BB               	movlw	187
   860     0251  00D3               	movwf	??_main+1
   861     0252  30DF               	movlw	223
   862     0253  00D2               	movwf	??_main
   863     0254                     u1597:
   864     0254  0BD2               	decfsz	??_main,f
   865     0255  2A54               	goto	u1597
   866     0256  0BD3               	decfsz	??_main+1,f
   867     0257  2A54               	goto	u1597
   868     0258  0BD4               	decfsz	??_main+2,f
   869     0259  2A54               	goto	u1597
   870     025A  0000               	nop
   871     025B                     l2126:
   872                           
   873                           ;main.c: 375:     GP2 = 1;
   874     025B  1283               	bcf	3,5	;RP0=0, select bank0
   875     025C  1505               	bsf	5,2	;volatile
   876     025D                     l2128:
   877                           
   878                           ;main.c: 378:         if (mustCheckServos == 1) {
   879     025D  0378               	decf	_mustCheckServos,w
   880     025E  1D03               	btfss	3,2
   881     025F  2A61               	goto	u1531
   882     0260  2A62               	goto	u1530
   883     0261                     u1531:
   884     0261  2A5D               	goto	l2128
   885     0262                     u1530:
   886     0262                     l2130:
   887                           
   888                           ;main.c: 379:             mustCheckServos = 0;
   889     0262  01F8               	clrf	_mustCheckServos
   890     0263                     l2132:
   891                           
   892                           ;main.c: 380:             setTorretPosition();
   893     0263  2020               	fcall	_setTorretPosition
   894     0264  2A5D               	goto	l2128
   895     0265  280C               	ljmp	start
   896     0266                     __end_of_main:
   897                           
   898                           	psect	text1
   899     0577                     __ptext1:	
   900 ;; *************** function _setup *****************
   901 ;; Defined at:
   902 ;;		line 221 in file "main.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0, pclath, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1
   916 ;;      Params:         0       0       0
   917 ;;      Locals:         0       0       0
   918 ;;      Temps:          0       0       0
   919 ;;      Totals:         0       0       0
   920 ;;Total ram usage:        0 bytes
   921 ;; Hardware stack levels used: 1
   922 ;; Hardware stack levels required when called: 3
   923 ;; This function calls:
   924 ;;		_initPWM
   925 ;;		_setupTimer0
   926 ;;		_setupTimer1
   927 ;;		_srand
   928 ;; This function is called by:
   929 ;;		_main
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933     0577                     _setup:	
   934                           ;psect for function _setup
   935                           
   936     0577                     l1948:	
   937                           ;incstack = 0
   938                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   939                           
   940                           
   941                           ;main.c: 222:     srand(TMR1);
   942     0577  1283               	bcf	3,5	;RP0=0, select bank0
   943     0578  080F               	movf	15,w	;volatile
   944     0579  00A1               	movwf	srand@x+1
   945     057A  080E               	movf	14,w	;volatile
   946     057B  00A0               	movwf	srand@x
   947     057C  25BD               	fcall	_srand
   948     057D                     l1950:
   949                           
   950                           ;main.c: 223:     OSCCON = 0x71;
   951     057D  3071               	movlw	113
   952     057E  1683               	bsf	3,5	;RP0=1, select bank1
   953     057F  008F               	movwf	15	;volatile
   954     0580                     l1952:
   955                           
   956                           ;main.c: 224:     ANSEL = 0;
   957     0580  019F               	clrf	31	;volatile
   958     0581                     l1954:
   959                           
   960                           ;main.c: 225:     TRISIO = 0b00000011;
   961     0581  3003               	movlw	3
   962     0582  0085               	movwf	5	;volatile
   963     0583                     l1956:
   964                           
   965                           ;main.c: 226:     initPWM();
   966     0583  2595               	fcall	_initPWM
   967     0584                     l1958:
   968                           
   969                           ;main.c: 227:     setupTimer1();
   970     0584  25A1               	fcall	_setupTimer1
   971     0585                     l1960:
   972                           
   973                           ;main.c: 228:     setupTimer0();
   974     0585  25AB               	fcall	_setupTimer0
   975                           
   976                           ;main.c: 229:     ContadorMotor = 0;
   977     0586  01F5               	clrf	_ContadorMotor
   978     0587                     l1962:
   979                           
   980                           ;main.c: 230:     GPIObits.GP2 = 0;
   981     0587  1283               	bcf	3,5	;RP0=0, select bank0
   982     0588  1105               	bcf	5,2	;volatile
   983     0589                     l1964:
   984                           
   985                           ;main.c: 231:     GPIObits.GP4 = 0;
   986     0589  1205               	bcf	5,4	;volatile
   987     058A                     l1966:
   988                           
   989                           ;main.c: 232:     GPIObits.GP5 = 0;
   990     058A  1285               	bcf	5,5	;volatile
   991     058B                     l1968:
   992                           
   993                           ;main.c: 235:     INTCONbits.GIE = 1;
   994     058B  178B               	bsf	11,7	;volatile
   995     058C                     l1970:
   996                           
   997                           ;main.c: 236:     INTCONbits.PEIE = 1;
   998     058C  170B               	bsf	11,6	;volatile
   999     058D                     l1972:
  1000                           
  1001                           ;main.c: 238:     INTCONbits.TMR0IF = 0;
  1002     058D  110B               	bcf	11,2	;volatile
  1003     058E                     l1974:
  1004                           
  1005                           ;main.c: 239:     PIR1bits.TMR1IF = 0;
  1006     058E  100C               	bcf	12,0	;volatile
  1007     058F                     l1976:
  1008                           
  1009                           ;main.c: 240:     PIR1bits.TMR2IF = 0;
  1010     058F  108C               	bcf	12,1	;volatile
  1011     0590                     l1978:
  1012                           
  1013                           ;main.c: 241:     INTCONbits.TMR0IE = 1;
  1014     0590  168B               	bsf	11,5	;volatile
  1015     0591                     l1980:
  1016                           
  1017                           ;main.c: 242:     PIE1bits.TMR2IE = 1;
  1018     0591  1683               	bsf	3,5	;RP0=1, select bank1
  1019     0592  148C               	bsf	12,1	;volatile
  1020     0593                     l1982:
  1021                           
  1022                           ;main.c: 243:     PIE1bits.TMR1IE = 1;
  1023     0593  140C               	bsf	12,0	;volatile
  1024     0594                     l120:
  1025     0594  0008               	return
  1026     0595                     __end_of_setup:
  1027                           
  1028                           	psect	text2
  1029     05BD                     __ptext2:	
  1030 ;; *************** function _srand *****************
  1031 ;; Defined at:
  1032 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  x               2    0[BANK0 ] unsigned int 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;		None
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMMON   BANK0   BANK1
  1046 ;;      Params:         0       2       0
  1047 ;;      Locals:         0       0       0
  1048 ;;      Temps:          0       0       0
  1049 ;;      Totals:         0       2       0
  1050 ;;Total ram usage:        2 bytes
  1051 ;; Hardware stack levels used: 1
  1052 ;; Hardware stack levels required when called: 2
  1053 ;; This function calls:
  1054 ;;		Nothing
  1055 ;; This function is called by:
  1056 ;;		_setup
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060     05BD                     _srand:	
  1061                           ;psect for function _srand
  1062                           
  1063     05BD                     l1912:	
  1064                           ;incstack = 0
  1065                           ; Regs used in _srand: [wreg]
  1066                           
  1067     05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1068     05BE  0820               	movf	srand@x,w
  1069     05BF  00EB               	movwf	_randx
  1070     05C0  0821               	movf	srand@x+1,w
  1071     05C1  00EC               	movwf	_randx+1
  1072     05C2  01ED               	clrf	_randx+2
  1073     05C3  01EE               	clrf	_randx+3
  1074     05C4                     l707:
  1075     05C4  0008               	return
  1076     05C5                     __end_of_srand:
  1077                           
  1078                           	psect	text3
  1079     05A1                     __ptext3:	
  1080 ;; *************** function _setupTimer1 *****************
  1081 ;; Defined at:
  1082 ;;		line 200 in file "main.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMMON   BANK0   BANK1
  1096 ;;      Params:         0       0       0
  1097 ;;      Locals:         0       0       0
  1098 ;;      Temps:          0       0       0
  1099 ;;      Totals:         0       0       0
  1100 ;;Total ram usage:        0 bytes
  1101 ;; Hardware stack levels used: 1
  1102 ;; Hardware stack levels required when called: 2
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_setup
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110     05A1                     _setupTimer1:	
  1111                           ;psect for function _setupTimer1
  1112                           
  1113     05A1                     l1892:	
  1114                           ;incstack = 0
  1115                           ; Regs used in _setupTimer1: [wreg+status,2+status,0]
  1116                           
  1117                           
  1118                           ;main.c: 201:     T1CON = 0;
  1119     05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1120     05A2  0190               	clrf	16	;volatile
  1121     05A3                     l1894:
  1122                           
  1123                           ;main.c: 202:     T1CONbits.T1CKPS = 0;
  1124     05A3  30CF               	movlw	-49
  1125     05A4  0590               	andwf	16,f	;volatile
  1126     05A5                     l1896:
  1127                           
  1128                           ;main.c: 203:     TMR1 = 61561;
  1129     05A5  30F0               	movlw	240
  1130     05A6  008F               	movwf	15	;volatile
  1131     05A7  3079               	movlw	121
  1132     05A8  008E               	movwf	14	;volatile
  1133     05A9                     l1898:
  1134                           
  1135                           ;main.c: 204:     T1CONbits.TMR1ON = 1;
  1136     05A9  1410               	bsf	16,0	;volatile
  1137     05AA                     l114:
  1138     05AA  0008               	return
  1139     05AB                     __end_of_setupTimer1:
  1140                           
  1141                           	psect	text4
  1142     05AB                     __ptext4:	
  1143 ;; *************** function _setupTimer0 *****************
  1144 ;; Defined at:
  1145 ;;		line 192 in file "main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;		None
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMMON   BANK0   BANK1
  1159 ;;      Params:         0       0       0
  1160 ;;      Locals:         0       0       0
  1161 ;;      Temps:          0       0       0
  1162 ;;      Totals:         0       0       0
  1163 ;;Total ram usage:        0 bytes
  1164 ;; Hardware stack levels used: 1
  1165 ;; Hardware stack levels required when called: 2
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_setup
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173     05AB                     _setupTimer0:	
  1174                           ;psect for function _setupTimer0
  1175                           
  1176     05AB                     l1882:	
  1177                           ;incstack = 0
  1178                           ; Regs used in _setupTimer0: [wreg+status,2+status,0]
  1179                           
  1180                           
  1181                           ;main.c: 193:     OPTION_REG = 0;
  1182     05AB  1683               	bsf	3,5	;RP0=1, select bank1
  1183     05AC  0181               	clrf	1	;volatile
  1184     05AD                     l1884:
  1185                           
  1186                           ;main.c: 194:     OPTION_REGbits.PSA = 0;
  1187     05AD  1181               	bcf	1,3	;volatile
  1188     05AE                     l1886:
  1189                           
  1190                           ;main.c: 195:     OPTION_REGbits.PS = 7;
  1191     05AE  3007               	movlw	7
  1192     05AF  0481               	iorwf	1,f	;volatile
  1193     05B0                     l1888:
  1194                           
  1195                           ;main.c: 196:     TMR0 = 176;
  1196     05B0  30B0               	movlw	176
  1197     05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1198     05B2  0081               	movwf	1	;volatile
  1199     05B3                     l1890:
  1200                           
  1201                           ;main.c: 197:     INTCONbits.TMR0IE = 1;
  1202     05B3  168B               	bsf	11,5	;volatile
  1203     05B4                     l111:
  1204     05B4  0008               	return
  1205     05B5                     __end_of_setupTimer0:
  1206                           
  1207                           	psect	text5
  1208     0595                     __ptext5:	
  1209 ;; *************** function _initPWM *****************
  1210 ;; Defined at:
  1211 ;;		line 207 in file "main.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1
  1225 ;;      Params:         0       0       0
  1226 ;;      Locals:         0       0       0
  1227 ;;      Temps:          0       0       0
  1228 ;;      Totals:         0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 2
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_setup
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239     0595                     _initPWM:	
  1240                           ;psect for function _initPWM
  1241                           
  1242     0595                     l1900:	
  1243                           ;incstack = 0
  1244                           ; Regs used in _initPWM: [wreg+status,2]
  1245                           
  1246                           
  1247                           ;main.c: 208:     CCP1CON = 0b00000000;
  1248     0595  1283               	bcf	3,5	;RP0=0, select bank0
  1249     0596  0195               	clrf	21	;volatile
  1250     0597                     l1902:
  1251                           
  1252                           ;main.c: 209:     T2CON = 0b00000011;
  1253     0597  3003               	movlw	3
  1254     0598  0092               	movwf	18	;volatile
  1255     0599                     l1904:
  1256                           
  1257                           ;main.c: 214:     PR2 = 249;
  1258     0599  30F9               	movlw	249
  1259     059A  1683               	bsf	3,5	;RP0=1, select bank1
  1260     059B  0092               	movwf	18	;volatile
  1261     059C                     l1906:
  1262                           
  1263                           ;main.c: 216:     MaskMotor = 0b00010000;
  1264     059C  3010               	movlw	16
  1265     059D  00F9               	movwf	_MaskMotor
  1266     059E                     l1908:
  1267                           
  1268                           ;main.c: 217:     EstadoRCServo = 0;
  1269     059E  01F6               	clrf	_EstadoRCServo
  1270     059F                     l1910:
  1271                           
  1272                           ;main.c: 218:     ContadorMotor = 0;
  1273     059F  01F5               	clrf	_ContadorMotor
  1274     05A0                     l117:
  1275     05A0  0008               	return
  1276     05A1                     __end_of_initPWM:
  1277                           
  1278                           	psect	text6
  1279     0020                     __ptext6:	
  1280 ;; *************** function _setTorretPosition *****************
  1281 ;; Defined at:
  1282 ;;		line 284 in file "main.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;		None
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;		None
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMMON   BANK0   BANK1
  1296 ;;      Params:         0       0       0
  1297 ;;      Locals:         0       0       0
  1298 ;;      Temps:          0       1       0
  1299 ;;      Totals:         0       1       0
  1300 ;;Total ram usage:        1 bytes
  1301 ;; Hardware stack levels used: 1
  1302 ;; Hardware stack levels required when called: 6
  1303 ;; This function calls:
  1304 ;;		_calculateSpeedIncrement
  1305 ;;		_convertAngle
  1306 ;;		_generateRandom
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312     0020                     _setTorretPosition:	
  1313                           ;psect for function _setTorretPosition
  1314                           
  1315     0020                     l1984:	
  1316                           ;incstack = 0
  1317                           ; Regs used in _setTorretPosition: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1318                           
  1319                           
  1320                           ;main.c: 287:     __nop();
  1321     0020  0000               	nop
  1322                           
  1323                           ;main.c: 288:     if ((motorIncrement[0] >= 0 && (motorAngle[0] >= motorTarget[0])) ||
  1324     0021  1283               	bcf	3,5	;RP0=0, select bank0
  1325     0022  1BDA               	btfsc	_motorIncrement+1,7
  1326     0023  2825               	goto	u1411
  1327     0024  2826               	goto	u1410
  1328     0025                     u1411:
  1329     0025  2834               	goto	l143
  1330     0026                     u1410:
  1331     0026                     l1986:
  1332     0026  0856               	movf	_motorAngle+1,w
  1333     0027  3A80               	xorlw	128
  1334     0028  00D1               	movwf	??_setTorretPosition
  1335     0029  085E               	movf	_motorTarget+1,w
  1336     002A  3A80               	xorlw	128
  1337     002B  0251               	subwf	??_setTorretPosition,w
  1338     002C  1D03               	skipz
  1339     002D  2830               	goto	u1425
  1340     002E  085D               	movf	_motorTarget,w
  1341     002F  0255               	subwf	_motorAngle,w
  1342     0030                     u1425:
  1343     0030  1803               	skipnc
  1344     0031  2833               	goto	u1421
  1345     0032  2834               	goto	u1420
  1346     0033                     u1421:
  1347     0033  2847               	goto	l1990
  1348     0034                     u1420:
  1349     0034                     l143:
  1350     0034  1283               	bcf	3,5	;RP0=0, select bank0
  1351     0035  1FDA               	btfss	_motorIncrement+1,7
  1352     0036  2838               	goto	u1431
  1353     0037  2839               	goto	u1430
  1354     0038                     u1431:
  1355     0038  285E               	goto	l1994
  1356     0039                     u1430:
  1357     0039                     l1988:
  1358     0039  085E               	movf	_motorTarget+1,w
  1359     003A  3A80               	xorlw	128
  1360     003B  00D1               	movwf	??_setTorretPosition
  1361     003C  0856               	movf	_motorAngle+1,w
  1362     003D  3A80               	xorlw	128
  1363     003E  0251               	subwf	??_setTorretPosition,w
  1364     003F  1D03               	skipz
  1365     0040  2843               	goto	u1445
  1366     0041  0855               	movf	_motorAngle,w
  1367     0042  025D               	subwf	_motorTarget,w
  1368     0043                     u1445:
  1369     0043  1C03               	skipc
  1370     0044  2846               	goto	u1441
  1371     0045  2847               	goto	u1440
  1372     0046                     u1441:
  1373     0046  285E               	goto	l1994
  1374     0047                     u1440:
  1375     0047                     l1990:
  1376                           
  1377                           ;main.c: 289:         ((motorIncrement[0] < 0 && (motorAngle[0] <= motorTarget[0])))) {;
      +                          main.c: 290:         motorTarget[0] = (int)generateRandom(-70, 70);
  1378     0047  30BA               	movlw	186
  1379     0048  1283               	bcf	3,5	;RP0=0, select bank0
  1380     0049  00BB               	movwf	generateRandom@min
  1381     004A  30FF               	movlw	255
  1382     004B  00BC               	movwf	generateRandom@min+1
  1383     004C  3046               	movlw	70
  1384     004D  00BD               	movwf	generateRandom@max
  1385     004E  3000               	movlw	0
  1386     004F  00BE               	movwf	generateRandom@max+1
  1387     0050  2551               	fcall	_generateRandom
  1388     0051  1283               	bcf	3,5	;RP0=0, select bank0
  1389     0052  083C               	movf	?_generateRandom+1,w
  1390     0053  00DE               	movwf	_motorTarget+1
  1391     0054  083B               	movf	?_generateRandom,w
  1392     0055  00DD               	movwf	_motorTarget
  1393     0056                     l1992:
  1394                           
  1395                           ;main.c: 291:         motorIncrement[0] = calculateSpeedIncrement(0);
  1396     0056  3000               	movlw	0
  1397     0057  2266               	fcall	_calculateSpeedIncrement
  1398     0058  1283               	bcf	3,5	;RP0=0, select bank0
  1399     0059  0844               	movf	?_calculateSpeedIncrement+1,w
  1400     005A  00DA               	movwf	_motorIncrement+1
  1401     005B  0843               	movf	?_calculateSpeedIncrement,w
  1402     005C  00D9               	movwf	_motorIncrement
  1403                           
  1404                           ;main.c: 292:     } else if (motorAngle[0] < -70) {
  1405     005D  28CE               	goto	l2018
  1406     005E                     l1994:
  1407     005E  1283               	bcf	3,5	;RP0=0, select bank0
  1408     005F  0856               	movf	_motorAngle+1,w
  1409     0060  3A80               	xorlw	128
  1410     0061  00FF               	movwf	btemp+1
  1411     0062  307F               	movlw	127
  1412     0063  027F               	subwf	btemp+1,w
  1413     0064  1D03               	skipz
  1414     0065  2868               	goto	u1455
  1415     0066  30BA               	movlw	186
  1416     0067  0255               	subwf	_motorAngle,w
  1417     0068                     u1455:
  1418     0068  1803               	skipnc
  1419     0069  286B               	goto	u1451
  1420     006A  286C               	goto	u1450
  1421     006B                     u1451:
  1422     006B  288E               	goto	l2004
  1423     006C                     u1450:
  1424     006C                     l1996:
  1425                           
  1426                           ;main.c: 293:         motorTarget[0] = (int)generateRandom(-70, 70);
  1427     006C  30BA               	movlw	186
  1428     006D  1283               	bcf	3,5	;RP0=0, select bank0
  1429     006E  00BB               	movwf	generateRandom@min
  1430     006F  30FF               	movlw	255
  1431     0070  00BC               	movwf	generateRandom@min+1
  1432     0071  3046               	movlw	70
  1433     0072  00BD               	movwf	generateRandom@max
  1434     0073  3000               	movlw	0
  1435     0074  00BE               	movwf	generateRandom@max+1
  1436     0075  2551               	fcall	_generateRandom
  1437     0076  1283               	bcf	3,5	;RP0=0, select bank0
  1438     0077  083C               	movf	?_generateRandom+1,w
  1439     0078  00DE               	movwf	_motorTarget+1
  1440     0079  083B               	movf	?_generateRandom,w
  1441     007A  00DD               	movwf	_motorTarget
  1442     007B                     l1998:
  1443                           
  1444                           ;main.c: 294:         motorAngle[0] = -70;
  1445     007B  30BA               	movlw	186
  1446     007C  00D5               	movwf	_motorAngle
  1447     007D  30FF               	movlw	255
  1448     007E  00D6               	movwf	_motorAngle+1
  1449     007F                     l2000:
  1450                           
  1451                           ;main.c: 295:         motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1452     007F  0856               	movf	_motorAngle+1,w
  1453     0080  00B0               	movwf	convertAngle@value+1
  1454     0081  0855               	movf	_motorAngle,w
  1455     0082  00AF               	movwf	convertAngle@value
  1456     0083  24A4               	fcall	_convertAngle
  1457     0084  1283               	bcf	3,5	;RP0=0, select bank0
  1458     0085  00E9               	movwf	_motorRawValueTarget
  1459     0086                     l2002:
  1460                           
  1461                           ;main.c: 296:         motorIncrement[0] = calculateSpeedIncrement(0);
  1462     0086  3000               	movlw	0
  1463     0087  2266               	fcall	_calculateSpeedIncrement
  1464     0088  1283               	bcf	3,5	;RP0=0, select bank0
  1465     0089  0844               	movf	?_calculateSpeedIncrement+1,w
  1466     008A  00DA               	movwf	_motorIncrement+1
  1467     008B  0843               	movf	?_calculateSpeedIncrement,w
  1468     008C  00D9               	movwf	_motorIncrement
  1469                           
  1470                           ;main.c: 297:     } else if (motorAngle[0] > 70) {
  1471     008D  28CE               	goto	l2018
  1472     008E                     l2004:
  1473     008E  1283               	bcf	3,5	;RP0=0, select bank0
  1474     008F  0856               	movf	_motorAngle+1,w
  1475     0090  3A80               	xorlw	128
  1476     0091  00FF               	movwf	btemp+1
  1477     0092  3080               	movlw	128
  1478     0093  027F               	subwf	btemp+1,w
  1479     0094  1D03               	skipz
  1480     0095  2898               	goto	u1465
  1481     0096  3047               	movlw	71
  1482     0097  0255               	subwf	_motorAngle,w
  1483     0098                     u1465:
  1484     0098  1C03               	skipc
  1485     0099  289B               	goto	u1461
  1486     009A  289C               	goto	u1460
  1487     009B                     u1461:
  1488     009B  28BE               	goto	l2014
  1489     009C                     u1460:
  1490     009C                     l2006:
  1491                           
  1492                           ;main.c: 298:         motorTarget[0] = (int)generateRandom(-70, 70);
  1493     009C  30BA               	movlw	186
  1494     009D  1283               	bcf	3,5	;RP0=0, select bank0
  1495     009E  00BB               	movwf	generateRandom@min
  1496     009F  30FF               	movlw	255
  1497     00A0  00BC               	movwf	generateRandom@min+1
  1498     00A1  3046               	movlw	70
  1499     00A2  00BD               	movwf	generateRandom@max
  1500     00A3  3000               	movlw	0
  1501     00A4  00BE               	movwf	generateRandom@max+1
  1502     00A5  2551               	fcall	_generateRandom
  1503     00A6  1283               	bcf	3,5	;RP0=0, select bank0
  1504     00A7  083C               	movf	?_generateRandom+1,w
  1505     00A8  00DE               	movwf	_motorTarget+1
  1506     00A9  083B               	movf	?_generateRandom,w
  1507     00AA  00DD               	movwf	_motorTarget
  1508     00AB                     l2008:
  1509                           
  1510                           ;main.c: 299:         motorAngle[0] = 70;
  1511     00AB  3046               	movlw	70
  1512     00AC  00D5               	movwf	_motorAngle
  1513     00AD  3000               	movlw	0
  1514     00AE  00D6               	movwf	_motorAngle+1
  1515     00AF                     l2010:
  1516                           
  1517                           ;main.c: 300:         motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1518     00AF  0856               	movf	_motorAngle+1,w
  1519     00B0  00B0               	movwf	convertAngle@value+1
  1520     00B1  0855               	movf	_motorAngle,w
  1521     00B2  00AF               	movwf	convertAngle@value
  1522     00B3  24A4               	fcall	_convertAngle
  1523     00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1524     00B5  00E9               	movwf	_motorRawValueTarget
  1525     00B6                     l2012:
  1526                           
  1527                           ;main.c: 301:         motorIncrement[0] = calculateSpeedIncrement(0);
  1528     00B6  3000               	movlw	0
  1529     00B7  2266               	fcall	_calculateSpeedIncrement
  1530     00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1531     00B9  0844               	movf	?_calculateSpeedIncrement+1,w
  1532     00BA  00DA               	movwf	_motorIncrement+1
  1533     00BB  0843               	movf	?_calculateSpeedIncrement,w
  1534     00BC  00D9               	movwf	_motorIncrement
  1535                           
  1536                           ;main.c: 302:     } else {
  1537     00BD  28CE               	goto	l2018
  1538     00BE                     l2014:
  1539                           
  1540                           ;main.c: 303:         motorAngle[0] = motorAngle[0] + motorIncrement[0];
  1541     00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1542     00BF  0859               	movf	_motorIncrement,w
  1543     00C0  0755               	addwf	_motorAngle,w
  1544     00C1  00D5               	movwf	_motorAngle
  1545     00C2  085A               	movf	_motorIncrement+1,w
  1546     00C3  1803               	skipnc
  1547     00C4  0A5A               	incf	_motorIncrement+1,w
  1548     00C5  0756               	addwf	_motorAngle+1,w
  1549     00C6  00D6               	movwf	_motorAngle+1
  1550     00C7                     l2016:
  1551                           
  1552                           ;main.c: 304:         motorRawValueTarget[0] = convertAngle(motorAngle[0]);
  1553     00C7  0856               	movf	_motorAngle+1,w
  1554     00C8  00B0               	movwf	convertAngle@value+1
  1555     00C9  0855               	movf	_motorAngle,w
  1556     00CA  00AF               	movwf	convertAngle@value
  1557     00CB  24A4               	fcall	_convertAngle
  1558     00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1559     00CD  00E9               	movwf	_motorRawValueTarget
  1560     00CE                     l2018:
  1561                           
  1562                           ;main.c: 311:     if ((motorIncrement[1] >= 0 && (motorAngle[1] >= motorTarget[1])) ||
  1563     00CE  1BDC               	btfsc	_motorIncrement+3,7
  1564     00CF  28D1               	goto	u1471
  1565     00D0  28D2               	goto	u1470
  1566     00D1                     u1471:
  1567     00D1  28E0               	goto	l2022
  1568     00D2                     u1470:
  1569     00D2                     l2020:
  1570     00D2  0858               	movf	_motorAngle+3,w
  1571     00D3  3A80               	xorlw	128
  1572     00D4  00D1               	movwf	??_setTorretPosition
  1573     00D5  0860               	movf	_motorTarget+3,w
  1574     00D6  3A80               	xorlw	128
  1575     00D7  0251               	subwf	??_setTorretPosition,w
  1576     00D8  1D03               	skipz
  1577     00D9  28DC               	goto	u1485
  1578     00DA  085F               	movf	_motorTarget+2,w
  1579     00DB  0257               	subwf	_motorAngle+2,w
  1580     00DC                     u1485:
  1581     00DC  1803               	skipnc
  1582     00DD  28DF               	goto	u1481
  1583     00DE  28E0               	goto	u1480
  1584     00DF                     u1481:
  1585     00DF  28F8               	goto	l2026
  1586     00E0                     u1480:
  1587     00E0                     l2022:
  1588     00E0  3002               	movlw	2
  1589     00E1  3E59               	addlw	(low (_motorIncrement| 0))& (0+255)
  1590     00E2  0084               	movwf	4
  1591     00E3  0A84               	incf	4,f
  1592     00E4  1383               	bcf	3,7	;select IRP bank0
  1593     00E5  1F80               	btfss	0,7
  1594     00E6  28E8               	goto	u1491
  1595     00E7  28E9               	goto	u1490
  1596     00E8                     u1491:
  1597     00E8  290F               	goto	l2030
  1598     00E9                     u1490:
  1599     00E9                     l2024:
  1600     00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1601     00EA  0860               	movf	_motorTarget+3,w
  1602     00EB  3A80               	xorlw	128
  1603     00EC  00D1               	movwf	??_setTorretPosition
  1604     00ED  0858               	movf	_motorAngle+3,w
  1605     00EE  3A80               	xorlw	128
  1606     00EF  0251               	subwf	??_setTorretPosition,w
  1607     00F0  1D03               	skipz
  1608     00F1  28F4               	goto	u1505
  1609     00F2  0857               	movf	_motorAngle+2,w
  1610     00F3  025F               	subwf	_motorTarget+2,w
  1611     00F4                     u1505:
  1612     00F4  1C03               	skipc
  1613     00F5  28F7               	goto	u1501
  1614     00F6  28F8               	goto	u1500
  1615     00F7                     u1501:
  1616     00F7  290F               	goto	l2030
  1617     00F8                     u1500:
  1618     00F8                     l2026:
  1619                           
  1620                           ;main.c: 312:         ((motorIncrement[1] < 0 && (motorAngle[1] <= motorTarget[1])))) {;
      +                          main.c: 313:         motorTarget[1] = (int)generateRandom(-70, 70);
  1621     00F8  30BA               	movlw	186
  1622     00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1623     00FA  00BB               	movwf	generateRandom@min
  1624     00FB  30FF               	movlw	255
  1625     00FC  00BC               	movwf	generateRandom@min+1
  1626     00FD  3046               	movlw	70
  1627     00FE  00BD               	movwf	generateRandom@max
  1628     00FF  3000               	movlw	0
  1629     0100  00BE               	movwf	generateRandom@max+1
  1630     0101  2551               	fcall	_generateRandom
  1631     0102  1283               	bcf	3,5	;RP0=0, select bank0
  1632     0103  083C               	movf	?_generateRandom+1,w
  1633     0104  00E0               	movwf	_motorTarget+3
  1634     0105  083B               	movf	?_generateRandom,w
  1635     0106  00DF               	movwf	_motorTarget+2
  1636     0107                     l2028:
  1637                           
  1638                           ;main.c: 314:         motorIncrement[1] = calculateSpeedIncrement(1);
  1639     0107  3001               	movlw	1
  1640     0108  2266               	fcall	_calculateSpeedIncrement
  1641     0109  1283               	bcf	3,5	;RP0=0, select bank0
  1642     010A  0844               	movf	?_calculateSpeedIncrement+1,w
  1643     010B  00DC               	movwf	_motorIncrement+3
  1644     010C  0843               	movf	?_calculateSpeedIncrement,w
  1645     010D  00DB               	movwf	_motorIncrement+2
  1646                           
  1647                           ;main.c: 315:     } else if (motorAngle[1] < -70) {
  1648     010E  2978               	goto	l159
  1649     010F                     l2030:
  1650     010F  1283               	bcf	3,5	;RP0=0, select bank0
  1651     0110  0858               	movf	_motorAngle+3,w
  1652     0111  3A80               	xorlw	128
  1653     0112  00FF               	movwf	btemp+1
  1654     0113  307F               	movlw	127
  1655     0114  027F               	subwf	btemp+1,w
  1656     0115  1D03               	skipz
  1657     0116  2919               	goto	u1515
  1658     0117  30BA               	movlw	186
  1659     0118  0257               	subwf	_motorAngle+2,w
  1660     0119                     u1515:
  1661     0119  1803               	skipnc
  1662     011A  291C               	goto	u1511
  1663     011B  291D               	goto	u1510
  1664     011C                     u1511:
  1665     011C  293F               	goto	l2040
  1666     011D                     u1510:
  1667     011D                     l2032:
  1668                           
  1669                           ;main.c: 316:         motorTarget[1] = (int)generateRandom(-70, 70);
  1670     011D  30BA               	movlw	186
  1671     011E  1283               	bcf	3,5	;RP0=0, select bank0
  1672     011F  00BB               	movwf	generateRandom@min
  1673     0120  30FF               	movlw	255
  1674     0121  00BC               	movwf	generateRandom@min+1
  1675     0122  3046               	movlw	70
  1676     0123  00BD               	movwf	generateRandom@max
  1677     0124  3000               	movlw	0
  1678     0125  00BE               	movwf	generateRandom@max+1
  1679     0126  2551               	fcall	_generateRandom
  1680     0127  1283               	bcf	3,5	;RP0=0, select bank0
  1681     0128  083C               	movf	?_generateRandom+1,w
  1682     0129  00E0               	movwf	_motorTarget+3
  1683     012A  083B               	movf	?_generateRandom,w
  1684     012B  00DF               	movwf	_motorTarget+2
  1685     012C                     l2034:
  1686                           
  1687                           ;main.c: 317:         motorAngle[1] = -70;
  1688     012C  30BA               	movlw	186
  1689     012D  00D7               	movwf	_motorAngle+2
  1690     012E  30FF               	movlw	255
  1691     012F  00D8               	movwf	_motorAngle+3
  1692     0130                     l2036:
  1693                           
  1694                           ;main.c: 318:         motorRawValueTarget[1] = convertAngle(motorAngle[1]);
  1695     0130  0858               	movf	_motorAngle+3,w
  1696     0131  00B0               	movwf	convertAngle@value+1
  1697     0132  0857               	movf	_motorAngle+2,w
  1698     0133  00AF               	movwf	convertAngle@value
  1699     0134  24A4               	fcall	_convertAngle
  1700     0135  1283               	bcf	3,5	;RP0=0, select bank0
  1701     0136  00EA               	movwf	_motorRawValueTarget+1
  1702     0137                     l2038:
  1703                           
  1704                           ;main.c: 319:         motorIncrement[1] = calculateSpeedIncrement(1);
  1705     0137  3001               	movlw	1
  1706     0138  2266               	fcall	_calculateSpeedIncrement
  1707     0139  1283               	bcf	3,5	;RP0=0, select bank0
  1708     013A  0844               	movf	?_calculateSpeedIncrement+1,w
  1709     013B  00DC               	movwf	_motorIncrement+3
  1710     013C  0843               	movf	?_calculateSpeedIncrement,w
  1711     013D  00DB               	movwf	_motorIncrement+2
  1712                           
  1713                           ;main.c: 320:     } else if (motorAngle[1] > 70) {
  1714     013E  2978               	goto	l159
  1715     013F                     l2040:
  1716     013F  1283               	bcf	3,5	;RP0=0, select bank0
  1717     0140  0858               	movf	_motorAngle+3,w
  1718     0141  3A80               	xorlw	128
  1719     0142  00FF               	movwf	btemp+1
  1720     0143  3080               	movlw	128
  1721     0144  027F               	subwf	btemp+1,w
  1722     0145  1D03               	skipz
  1723     0146  2949               	goto	u1525
  1724     0147  3047               	movlw	71
  1725     0148  0257               	subwf	_motorAngle+2,w
  1726     0149                     u1525:
  1727     0149  1C03               	skipc
  1728     014A  294C               	goto	u1521
  1729     014B  294D               	goto	u1520
  1730     014C                     u1521:
  1731     014C  2968               	goto	l2048
  1732     014D                     u1520:
  1733     014D                     l2042:
  1734                           
  1735                           ;main.c: 321:         motorTarget[1] = (int)generateRandom(-70, 70);
  1736     014D  30BA               	movlw	186
  1737     014E  1283               	bcf	3,5	;RP0=0, select bank0
  1738     014F  00BB               	movwf	generateRandom@min
  1739     0150  30FF               	movlw	255
  1740     0151  00BC               	movwf	generateRandom@min+1
  1741     0152  3046               	movlw	70
  1742     0153  00BD               	movwf	generateRandom@max
  1743     0154  3000               	movlw	0
  1744     0155  00BE               	movwf	generateRandom@max+1
  1745     0156  2551               	fcall	_generateRandom
  1746     0157  1283               	bcf	3,5	;RP0=0, select bank0
  1747     0158  083C               	movf	?_generateRandom+1,w
  1748     0159  00E0               	movwf	_motorTarget+3
  1749     015A  083B               	movf	?_generateRandom,w
  1750     015B  00DF               	movwf	_motorTarget+2
  1751     015C                     l2044:
  1752                           
  1753                           ;main.c: 322:         motorAngle[1] = 70;
  1754     015C  3046               	movlw	70
  1755     015D  00D7               	movwf	_motorAngle+2
  1756     015E  3000               	movlw	0
  1757     015F  00D8               	movwf	_motorAngle+3
  1758     0160                     l2046:
  1759                           
  1760                           ;main.c: 323:         motorIncrement[1] = calculateSpeedIncrement(1);
  1761     0160  3001               	movlw	1
  1762     0161  2266               	fcall	_calculateSpeedIncrement
  1763     0162  1283               	bcf	3,5	;RP0=0, select bank0
  1764     0163  0844               	movf	?_calculateSpeedIncrement+1,w
  1765     0164  00DC               	movwf	_motorIncrement+3
  1766     0165  0843               	movf	?_calculateSpeedIncrement,w
  1767     0166  00DB               	movwf	_motorIncrement+2
  1768                           
  1769                           ;main.c: 324:     } else {
  1770     0167  2978               	goto	l159
  1771     0168                     l2048:
  1772                           
  1773                           ;main.c: 325:         motorAngle[1] = motorAngle[1] + motorIncrement[1];
  1774     0168  1283               	bcf	3,5	;RP0=0, select bank0
  1775     0169  085B               	movf	_motorIncrement+2,w
  1776     016A  0757               	addwf	_motorAngle+2,w
  1777     016B  00D7               	movwf	_motorAngle+2
  1778     016C  085C               	movf	_motorIncrement+3,w
  1779     016D  1803               	skipnc
  1780     016E  0A5C               	incf	_motorIncrement+3,w
  1781     016F  0758               	addwf	_motorAngle+3,w
  1782     0170  00D8               	movwf	_motorAngle+3
  1783     0171                     l2050:
  1784                           
  1785                           ;main.c: 326:         motorRawValueTarget[1] = convertAngle(motorAngle[1]);
  1786     0171  0858               	movf	_motorAngle+3,w
  1787     0172  00B0               	movwf	convertAngle@value+1
  1788     0173  0857               	movf	_motorAngle+2,w
  1789     0174  00AF               	movwf	convertAngle@value
  1790     0175  24A4               	fcall	_convertAngle
  1791     0176  1283               	bcf	3,5	;RP0=0, select bank0
  1792     0177  00EA               	movwf	_motorRawValueTarget+1
  1793     0178                     l159:
  1794     0178  0008               	return
  1795     0179                     __end_of_setTorretPosition:
  1796                           
  1797                           	psect	text7
  1798     04A4                     __ptext7:	
  1799 ;; *************** function _convertAngle *****************
  1800 ;; Defined at:
  1801 ;;		line 254 in file "main.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  value           2   15[BANK0 ] int 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  temp            2   17[BANK0 ] int 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      unsigned char 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1
  1815 ;;      Params:         0       2       0
  1816 ;;      Locals:         0       2       0
  1817 ;;      Temps:          0       0       0
  1818 ;;      Totals:         0       4       0
  1819 ;;Total ram usage:        4 bytes
  1820 ;; Hardware stack levels used: 1
  1821 ;; Hardware stack levels required when called: 3
  1822 ;; This function calls:
  1823 ;;		___awdiv
  1824 ;;		___wmul
  1825 ;; This function is called by:
  1826 ;;		_setTorretPosition
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831     04A4                     _convertAngle:	
  1832                           ;psect for function _convertAngle
  1833                           
  1834     04A4                     l1914:	
  1835                           ;incstack = 0
  1836                           ; Regs used in _convertAngle: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1837                           
  1838                           
  1839                           ;main.c: 255:     int temp;;main.c: 256:     if (value < -90) {
  1840     04A4  1283               	bcf	3,5	;RP0=0, select bank0
  1841     04A5  0830               	movf	convertAngle@value+1,w
  1842     04A6  3A80               	xorlw	128
  1843     04A7  00FF               	movwf	btemp+1
  1844     04A8  307F               	movlw	127
  1845     04A9  027F               	subwf	btemp+1,w
  1846     04AA  1D03               	skipz
  1847     04AB  2CAE               	goto	u1365
  1848     04AC  30A6               	movlw	166
  1849     04AD  022F               	subwf	convertAngle@value,w
  1850     04AE                     u1365:
  1851     04AE  1803               	skipnc
  1852     04AF  2CB1               	goto	u1361
  1853     04B0  2CB2               	goto	u1360
  1854     04B1                     u1361:
  1855     04B1  2CB8               	goto	l1918
  1856     04B2                     u1360:
  1857     04B2                     l1916:
  1858                           
  1859                           ;main.c: 257:         value = -90;
  1860     04B2  30A6               	movlw	166
  1861     04B3  1283               	bcf	3,5	;RP0=0, select bank0
  1862     04B4  00AF               	movwf	convertAngle@value
  1863     04B5  30FF               	movlw	255
  1864     04B6  00B0               	movwf	convertAngle@value+1
  1865                           
  1866                           ;main.c: 258:     } else if (value > 90) {
  1867     04B7  2CCB               	goto	l1922
  1868     04B8                     l1918:
  1869     04B8  1283               	bcf	3,5	;RP0=0, select bank0
  1870     04B9  0830               	movf	convertAngle@value+1,w
  1871     04BA  3A80               	xorlw	128
  1872     04BB  00FF               	movwf	btemp+1
  1873     04BC  3080               	movlw	128
  1874     04BD  027F               	subwf	btemp+1,w
  1875     04BE  1D03               	skipz
  1876     04BF  2CC2               	goto	u1375
  1877     04C0  305B               	movlw	91
  1878     04C1  022F               	subwf	convertAngle@value,w
  1879     04C2                     u1375:
  1880     04C2  1C03               	skipc
  1881     04C3  2CC5               	goto	u1371
  1882     04C4  2CC6               	goto	u1370
  1883     04C5                     u1371:
  1884     04C5  2CCB               	goto	l1922
  1885     04C6                     u1370:
  1886     04C6                     l1920:
  1887                           
  1888                           ;main.c: 259:         value = 90;
  1889     04C6  305A               	movlw	90
  1890     04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1891     04C8  00AF               	movwf	convertAngle@value
  1892     04C9  3000               	movlw	0
  1893     04CA  00B0               	movwf	convertAngle@value+1
  1894     04CB                     l1922:
  1895                           
  1896                           ;main.c: 261:     temp = (value * 255) / (90 - -90) + (127);
  1897     04CB  30B4               	movlw	180
  1898     04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1899     04CD  00A6               	movwf	___awdiv@divisor
  1900     04CE  3000               	movlw	0
  1901     04CF  00A7               	movwf	___awdiv@divisor+1
  1902     04D0  0830               	movf	convertAngle@value+1,w
  1903     04D1  00A1               	movwf	___wmul@multiplier+1
  1904     04D2  082F               	movf	convertAngle@value,w
  1905     04D3  00A0               	movwf	___wmul@multiplier
  1906     04D4  30FF               	movlw	255
  1907     04D5  00A2               	movwf	___wmul@multiplicand
  1908     04D6  3000               	movlw	0
  1909     04D7  00A3               	movwf	___wmul@multiplicand+1
  1910     04D8  252B               	fcall	___wmul
  1911     04D9  1283               	bcf	3,5	;RP0=0, select bank0
  1912     04DA  0821               	movf	?___wmul+1,w
  1913     04DB  00A9               	movwf	___awdiv@dividend+1
  1914     04DC  0820               	movf	?___wmul,w
  1915     04DD  00A8               	movwf	___awdiv@dividend
  1916     04DE  2353               	fcall	___awdiv
  1917     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  1918     04E0  0826               	movf	?___awdiv,w
  1919     04E1  3E7F               	addlw	127
  1920     04E2  00B1               	movwf	convertAngle@temp
  1921     04E3  0827               	movf	?___awdiv+1,w
  1922     04E4  1803               	skipnc
  1923     04E5  3E01               	addlw	1
  1924     04E6  3E00               	addlw	0
  1925     04E7  00B2               	movwf	convertAngle@temp+1
  1926     04E8                     l1924:
  1927                           
  1928                           ;main.c: 262:     return temp;
  1929     04E8  0831               	movf	convertAngle@temp,w
  1930     04E9                     l129:
  1931     04E9  0008               	return
  1932     04EA                     __end_of_convertAngle:
  1933                           
  1934                           	psect	text8
  1935     052B                     __ptext8:	
  1936 ;; *************** function ___wmul *****************
  1937 ;; Defined at:
  1938 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1941 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  product         2    4[BANK0 ] unsigned int 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  2    0[BANK0 ] unsigned int 
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMMON   BANK0   BANK1
  1953 ;;      Params:         0       4       0
  1954 ;;      Locals:         0       2       0
  1955 ;;      Temps:          0       0       0
  1956 ;;      Totals:         0       6       0
  1957 ;;Total ram usage:        6 bytes
  1958 ;; Hardware stack levels used: 1
  1959 ;; Hardware stack levels required when called: 2
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_convertAngle
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967     052B                     ___wmul:	
  1968                           ;psect for function ___wmul
  1969                           
  1970     052B                     l1868:	
  1971                           ;incstack = 0
  1972                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1973                           
  1974     052B  1283               	bcf	3,5	;RP0=0, select bank0
  1975     052C  01A4               	clrf	___wmul@product
  1976     052D  01A5               	clrf	___wmul@product+1
  1977     052E                     l1870:
  1978     052E  1C20               	btfss	___wmul@multiplier,0
  1979     052F  2D31               	goto	u1321
  1980     0530  2D32               	goto	u1320
  1981     0531                     u1321:
  1982     0531  2D38               	goto	l254
  1983     0532                     u1320:
  1984     0532                     l1872:
  1985     0532  0822               	movf	___wmul@multiplicand,w
  1986     0533  07A4               	addwf	___wmul@product,f
  1987     0534  1803               	skipnc
  1988     0535  0AA5               	incf	___wmul@product+1,f
  1989     0536  0823               	movf	___wmul@multiplicand+1,w
  1990     0537  07A5               	addwf	___wmul@product+1,f
  1991     0538                     l254:
  1992     0538  3001               	movlw	1
  1993     0539                     u1335:
  1994     0539  1003               	clrc
  1995     053A  0DA2               	rlf	___wmul@multiplicand,f
  1996     053B  0DA3               	rlf	___wmul@multiplicand+1,f
  1997     053C  3EFF               	addlw	-1
  1998     053D  1D03               	skipz
  1999     053E  2D39               	goto	u1335
  2000     053F                     l1874:
  2001     053F  3001               	movlw	1
  2002     0540                     u1345:
  2003     0540  1003               	clrc
  2004     0541  0CA1               	rrf	___wmul@multiplier+1,f
  2005     0542  0CA0               	rrf	___wmul@multiplier,f
  2006     0543  3EFF               	addlw	-1
  2007     0544  1D03               	skipz
  2008     0545  2D40               	goto	u1345
  2009     0546                     l1876:
  2010     0546  0820               	movf	___wmul@multiplier,w
  2011     0547  0421               	iorwf	___wmul@multiplier+1,w
  2012     0548  1D03               	btfss	3,2
  2013     0549  2D4B               	goto	u1351
  2014     054A  2D4C               	goto	u1350
  2015     054B                     u1351:
  2016     054B  2D2E               	goto	l1870
  2017     054C                     u1350:
  2018     054C                     l1878:
  2019     054C  0825               	movf	___wmul@product+1,w
  2020     054D  00A1               	movwf	?___wmul+1
  2021     054E  0824               	movf	___wmul@product,w
  2022     054F  00A0               	movwf	?___wmul
  2023     0550                     l256:
  2024     0550  0008               	return
  2025     0551                     __end_of___wmul:
  2026                           
  2027                           	psect	text9
  2028     0266                     __ptext9:	
  2029 ;; *************** function _calculateSpeedIncrement *****************
  2030 ;; Defined at:
  2031 ;;		line 265 in file "main.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  index           1    wreg     unsigned char 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  index           1   48[BANK0 ] unsigned char 
  2036 ;;  increment       2   46[BANK0 ] int 
  2037 ;;  speed           2   44[BANK0 ] int 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  2   35[BANK0 ] int 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMMON   BANK0   BANK1
  2047 ;;      Params:         0       2       0
  2048 ;;      Locals:         0       5       0
  2049 ;;      Temps:          0       7       0
  2050 ;;      Totals:         0      14       0
  2051 ;;Total ram usage:       14 bytes
  2052 ;; Hardware stack levels used: 1
  2053 ;; Hardware stack levels required when called: 5
  2054 ;; This function calls:
  2055 ;;		___awdiv
  2056 ;;		_generateRandom
  2057 ;; This function is called by:
  2058 ;;		_setTorretPosition
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061                           
  2062     0266                     _calculateSpeedIncrement:	
  2063                           ;psect for function _calculateSpeedIncrement
  2064                           
  2065                           
  2066                           ;incstack = 0
  2067                           ; Regs used in _calculateSpeedIncrement: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2068                           ;calculateSpeedIncrement@index stored from wreg
  2069     0266  1283               	bcf	3,5	;RP0=0, select bank0
  2070     0267  00D0               	movwf	calculateSpeedIncrement@index
  2071     0268                     l1928:
  2072                           
  2073                           ;main.c: 266:     int increment;;main.c: 267:     int speed;;main.c: 269:     if (index 
      +                          > (2 - 1)) {
  2074     0268  3002               	movlw	2
  2075     0269  0250               	subwf	calculateSpeedIncrement@index,w
  2076     026A  1C03               	skipc
  2077     026B  2A6D               	goto	u1381
  2078     026C  2A6E               	goto	u1380
  2079     026D                     u1381:
  2080     026D  2A71               	goto	l1934
  2081     026E                     u1380:
  2082     026E                     l1930:
  2083                           
  2084                           ;main.c: 270:         return 0;
  2085     026E  01C3               	clrf	?_calculateSpeedIncrement
  2086     026F  01C4               	clrf	?_calculateSpeedIncrement+1
  2087     0270  2AE1               	goto	l133
  2088     0271                     l1934:
  2089                           
  2090                           ;main.c: 272:     speed = (uint8_t)generateRandom(10, 30);
  2091     0271  300A               	movlw	10
  2092     0272  00BB               	movwf	generateRandom@min
  2093     0273  3000               	movlw	0
  2094     0274  00BC               	movwf	generateRandom@min+1
  2095     0275  301E               	movlw	30
  2096     0276  00BD               	movwf	generateRandom@max
  2097     0277  3000               	movlw	0
  2098     0278  00BE               	movwf	generateRandom@max+1
  2099     0279  2551               	fcall	_generateRandom
  2100     027A  1283               	bcf	3,5	;RP0=0, select bank0
  2101     027B  083B               	movf	?_generateRandom,w
  2102     027C  00C5               	movwf	??_calculateSpeedIncrement
  2103     027D  01C6               	clrf	??_calculateSpeedIncrement+1
  2104     027E  0845               	movf	??_calculateSpeedIncrement,w
  2105     027F  00CC               	movwf	calculateSpeedIncrement@speed
  2106     0280  0846               	movf	??_calculateSpeedIncrement+1,w
  2107     0281  00CD               	movwf	calculateSpeedIncrement@speed+1
  2108     0282                     l1936:
  2109                           
  2110                           ;main.c: 273:     increment = (motorTarget[index] - motorAngle[index]) / speed;
  2111     0282  084D               	movf	calculateSpeedIncrement@speed+1,w
  2112     0283  00A7               	movwf	___awdiv@divisor+1
  2113     0284  084C               	movf	calculateSpeedIncrement@speed,w
  2114     0285  00A6               	movwf	___awdiv@divisor
  2115     0286  0850               	movf	calculateSpeedIncrement@index,w
  2116     0287  00C5               	movwf	??_calculateSpeedIncrement
  2117     0288  0745               	addwf	??_calculateSpeedIncrement,w
  2118     0289  3E55               	addlw	(low (_motorAngle| 0))& (0+255)
  2119     028A  0084               	movwf	4
  2120     028B  1383               	bcf	3,7	;select IRP bank0
  2121     028C  0800               	movf	0,w
  2122     028D  00C6               	movwf	??_calculateSpeedIncrement+1
  2123     028E  0A84               	incf	4,f
  2124     028F  0800               	movf	0,w
  2125     0290  00C7               	movwf	??_calculateSpeedIncrement+2
  2126     0291  0850               	movf	calculateSpeedIncrement@index,w
  2127     0292  00C8               	movwf	??_calculateSpeedIncrement+3
  2128     0293  0748               	addwf	??_calculateSpeedIncrement+3,w
  2129     0294  3E5D               	addlw	(low (_motorTarget| 0))& (0+255)
  2130     0295  0084               	movwf	4
  2131     0296  0800               	movf	0,w
  2132     0297  00C9               	movwf	??_calculateSpeedIncrement+4
  2133     0298  0A84               	incf	4,f
  2134     0299  0800               	movf	0,w
  2135     029A  00CA               	movwf	??_calculateSpeedIncrement+5
  2136     029B  0846               	movf	??_calculateSpeedIncrement+1,w
  2137     029C  0249               	subwf	??_calculateSpeedIncrement+4,w
  2138     029D  00A8               	movwf	___awdiv@dividend
  2139     029E  0847               	movf	??_calculateSpeedIncrement+2,w
  2140     029F  1C03               	skipc
  2141     02A0  0A47               	incf	??_calculateSpeedIncrement+2,w
  2142     02A1  024A               	subwf	??_calculateSpeedIncrement+5,w
  2143     02A2  00A9               	movwf	___awdiv@dividend+1
  2144     02A3  2353               	fcall	___awdiv
  2145     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2146     02A5  0827               	movf	?___awdiv+1,w
  2147     02A6  00CF               	movwf	calculateSpeedIncrement@increment+1
  2148     02A7  0826               	movf	?___awdiv,w
  2149     02A8  00CE               	movwf	calculateSpeedIncrement@increment
  2150     02A9                     l1938:
  2151                           
  2152                           ;main.c: 274:     if (increment == 0) {
  2153     02A9  084E               	movf	calculateSpeedIncrement@increment,w
  2154     02AA  044F               	iorwf	calculateSpeedIncrement@increment+1,w
  2155     02AB  1D03               	btfss	3,2
  2156     02AC  2AAE               	goto	u1391
  2157     02AD  2AAF               	goto	u1390
  2158     02AE                     u1391:
  2159     02AE  2ADD               	goto	l134
  2160     02AF                     u1390:
  2161     02AF                     l1940:
  2162                           
  2163                           ;main.c: 275:         if (motorTarget[index] > motorAngle[index]) {
  2164     02AF  0850               	movf	calculateSpeedIncrement@index,w
  2165     02B0  00C5               	movwf	??_calculateSpeedIncrement
  2166     02B1  0745               	addwf	??_calculateSpeedIncrement,w
  2167     02B2  3E5D               	addlw	(low (_motorTarget| 0))& (0+255)
  2168     02B3  0084               	movwf	4
  2169     02B4  1383               	bcf	3,7	;select IRP bank0
  2170     02B5  0800               	movf	0,w
  2171     02B6  00C6               	movwf	??_calculateSpeedIncrement+1
  2172     02B7  0A84               	incf	4,f
  2173     02B8  0800               	movf	0,w
  2174     02B9  00C7               	movwf	??_calculateSpeedIncrement+2
  2175     02BA  0850               	movf	calculateSpeedIncrement@index,w
  2176     02BB  00C8               	movwf	??_calculateSpeedIncrement+3
  2177     02BC  0748               	addwf	??_calculateSpeedIncrement+3,w
  2178     02BD  3E55               	addlw	(low (_motorAngle| 0))& (0+255)
  2179     02BE  0084               	movwf	4
  2180     02BF  0800               	movf	0,w
  2181     02C0  00C9               	movwf	??_calculateSpeedIncrement+4
  2182     02C1  0A84               	incf	4,f
  2183     02C2  0800               	movf	0,w
  2184     02C3  00CA               	movwf	??_calculateSpeedIncrement+5
  2185     02C4  084A               	movf	??_calculateSpeedIncrement+5,w
  2186     02C5  3A80               	xorlw	128
  2187     02C6  00CB               	movwf	??_calculateSpeedIncrement+6
  2188     02C7  0847               	movf	??_calculateSpeedIncrement+2,w
  2189     02C8  3A80               	xorlw	128
  2190     02C9  024B               	subwf	??_calculateSpeedIncrement+6,w
  2191     02CA  1D03               	skipz
  2192     02CB  2ACE               	goto	u1405
  2193     02CC  0846               	movf	??_calculateSpeedIncrement+1,w
  2194     02CD  0249               	subwf	??_calculateSpeedIncrement+4,w
  2195     02CE                     u1405:
  2196     02CE  1803               	skipnc
  2197     02CF  2AD1               	goto	u1401
  2198     02D0  2AD2               	goto	u1400
  2199     02D1                     u1401:
  2200     02D1  2AD8               	goto	l1944
  2201     02D2                     u1400:
  2202     02D2                     l1942:
  2203                           
  2204                           ;main.c: 276:             increment = 1;
  2205     02D2  3001               	movlw	1
  2206     02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2207     02D4  00CE               	movwf	calculateSpeedIncrement@increment
  2208     02D5  3000               	movlw	0
  2209     02D6  00CF               	movwf	calculateSpeedIncrement@increment+1
  2210                           
  2211                           ;main.c: 277:         } else {
  2212     02D7  2ADD               	goto	l134
  2213     02D8                     l1944:
  2214                           
  2215                           ;main.c: 278:             increment = -1;
  2216     02D8  30FF               	movlw	255
  2217     02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2218     02DA  00CE               	movwf	calculateSpeedIncrement@increment
  2219     02DB  30FF               	movlw	255
  2220     02DC  00CF               	movwf	calculateSpeedIncrement@increment+1
  2221     02DD                     l134:	
  2222                           ;main.c: 280:     }
  2223                           
  2224                           
  2225                           ;main.c: 281:     return increment;
  2226     02DD  084F               	movf	calculateSpeedIncrement@increment+1,w
  2227     02DE  00C4               	movwf	?_calculateSpeedIncrement+1
  2228     02DF  084E               	movf	calculateSpeedIncrement@increment,w
  2229     02E0  00C3               	movwf	?_calculateSpeedIncrement
  2230     02E1                     l133:
  2231     02E1  0008               	return
  2232     02E2                     __end_of_calculateSpeedIncrement:
  2233                           
  2234                           	psect	text10
  2235     0551                     __ptext10:	
  2236 ;; *************** function _generateRandom *****************
  2237 ;; Defined at:
  2238 ;;		line 246 in file "main.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  min             2   27[BANK0 ] int 
  2241 ;;  max             2   29[BANK0 ] int 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  randomNumber    2   33[BANK0 ] int 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  2   27[BANK0 ] int 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2, status,0, pclath, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1
  2253 ;;      Params:         0       4       0
  2254 ;;      Locals:         0       2       0
  2255 ;;      Temps:          0       2       0
  2256 ;;      Totals:         0       8       0
  2257 ;;Total ram usage:        8 bytes
  2258 ;; Hardware stack levels used: 1
  2259 ;; Hardware stack levels required when called: 4
  2260 ;; This function calls:
  2261 ;;		___awmod
  2262 ;;		_rand
  2263 ;; This function is called by:
  2264 ;;		_calculateSpeedIncrement
  2265 ;;		_setTorretPosition
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269     0551                     _generateRandom:	
  2270                           ;psect for function _generateRandom
  2271                           
  2272     0551                     l1860:	
  2273                           ;incstack = 0
  2274                           ; Regs used in _generateRandom: [wreg+status,2+status,0+pclath+cstack]
  2275                           
  2276     0551                     l1862:
  2277                           
  2278                           ;main.c: 249:     randomNumber = (rand() % (max - min + 1)) +
  2279     0551  1283               	bcf	3,5	;RP0=0, select bank0
  2280     0552  083B               	movf	generateRandom@min,w
  2281     0553  023D               	subwf	generateRandom@max,w
  2282     0554  00BF               	movwf	??_generateRandom
  2283     0555  083C               	movf	generateRandom@min+1,w
  2284     0556  1C03               	skipc
  2285     0557  0A3C               	incf	generateRandom@min+1,w
  2286     0558  023E               	subwf	generateRandom@max+1,w
  2287     0559  00C0               	movwf	??_generateRandom+1
  2288     055A  083F               	movf	??_generateRandom,w
  2289     055B  3E01               	addlw	1
  2290     055C  00B4               	movwf	___awmod@divisor
  2291     055D  0840               	movf	??_generateRandom+1,w
  2292     055E  1803               	skipnc
  2293     055F  3E01               	addlw	1
  2294     0560  3E00               	addlw	0
  2295     0561  00B5               	movwf	___awmod@divisor+1
  2296     0562  24EA               	fcall	_rand
  2297     0563  1283               	bcf	3,5	;RP0=0, select bank0
  2298     0564  082E               	movf	?_rand+1,w
  2299     0565  00B7               	movwf	___awmod@dividend+1
  2300     0566  082D               	movf	?_rand,w
  2301     0567  00B6               	movwf	___awmod@dividend
  2302     0568  23BB               	fcall	___awmod
  2303     0569  1283               	bcf	3,5	;RP0=0, select bank0
  2304     056A  083B               	movf	generateRandom@min,w
  2305     056B  0734               	addwf	?___awmod,w
  2306     056C  00C1               	movwf	generateRandom@randomNumber
  2307     056D  083C               	movf	generateRandom@min+1,w
  2308     056E  1803               	skipnc
  2309     056F  0A3C               	incf	generateRandom@min+1,w
  2310     0570  0735               	addwf	?___awmod+1,w
  2311     0571  00C2               	movwf	generateRandom@randomNumber+1
  2312     0572                     l1864:
  2313                           
  2314                           ;main.c: 251:     return randomNumber;
  2315     0572  0842               	movf	generateRandom@randomNumber+1,w
  2316     0573  00BC               	movwf	?_generateRandom+1
  2317     0574  0841               	movf	generateRandom@randomNumber,w
  2318     0575  00BB               	movwf	?_generateRandom
  2319     0576                     l123:
  2320     0576  0008               	return
  2321     0577                     __end_of_generateRandom:
  2322                           
  2323                           	psect	text11
  2324     04EA                     __ptext11:	
  2325 ;; *************** function _rand *****************
  2326 ;; Defined at:
  2327 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;		None
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;		None
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  2   13[BANK0 ] int 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, status,0, pclath, cstack
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMMON   BANK0   BANK1
  2341 ;;      Params:         0       2       0
  2342 ;;      Locals:         0       0       0
  2343 ;;      Temps:          0       5       0
  2344 ;;      Totals:         0       7       0
  2345 ;;Total ram usage:        7 bytes
  2346 ;; Hardware stack levels used: 1
  2347 ;; Hardware stack levels required when called: 3
  2348 ;; This function calls:
  2349 ;;		___lmul
  2350 ;; This function is called by:
  2351 ;;		_generateRandom
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355     04EA                     _rand:	
  2356                           ;psect for function _rand
  2357                           
  2358     04EA                     l1814:	
  2359                           ;incstack = 0
  2360                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2361                           
  2362     04EA  1283               	bcf	3,5	;RP0=0, select bank0
  2363     04EB  086E               	movf	_randx+3,w
  2364     04EC  00A3               	movwf	___lmul@multiplier+3
  2365     04ED  086D               	movf	_randx+2,w
  2366     04EE  00A2               	movwf	___lmul@multiplier+2
  2367     04EF  086C               	movf	_randx+1,w
  2368     04F0  00A1               	movwf	___lmul@multiplier+1
  2369     04F1  086B               	movf	_randx,w
  2370     04F2  00A0               	movwf	___lmul@multiplier
  2371     04F3  3041               	movlw	65
  2372     04F4  00A7               	movwf	___lmul@multiplicand+3
  2373     04F5  30C6               	movlw	198
  2374     04F6  00A6               	movwf	___lmul@multiplicand+2
  2375     04F7  304E               	movlw	78
  2376     04F8  00A5               	movwf	___lmul@multiplicand+1
  2377     04F9  306D               	movlw	109
  2378     04FA  00A4               	movwf	___lmul@multiplicand
  2379     04FB  245D               	fcall	___lmul
  2380     04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2381     04FD  0823               	movf	?___lmul+3,w
  2382     04FE  00EE               	movwf	_randx+3
  2383     04FF  0822               	movf	?___lmul+2,w
  2384     0500  00ED               	movwf	_randx+2
  2385     0501  0821               	movf	?___lmul+1,w
  2386     0502  00EC               	movwf	_randx+1
  2387     0503  0820               	movf	?___lmul,w
  2388     0504  00EB               	movwf	_randx
  2389     0505                     l1816:
  2390     0505  3039               	movlw	57
  2391     0506  07EB               	addwf	_randx,f
  2392     0507  3030               	movlw	48
  2393     0508  1803               	skipnc
  2394     0509  3031               	movlw	49
  2395     050A  07EC               	addwf	_randx+1,f
  2396     050B  3000               	movlw	0
  2397     050C  1803               	skipnc
  2398     050D  3001               	movlw	1
  2399     050E  07ED               	addwf	_randx+2,f
  2400     050F  3000               	movlw	0
  2401     0510  1803               	skipnc
  2402     0511  3001               	movlw	1
  2403     0512  07EE               	addwf	_randx+3,f
  2404     0513                     l1818:
  2405     0513  086B               	movf	_randx,w
  2406     0514  00AF               	movwf	??_rand
  2407     0515  086C               	movf	_randx+1,w
  2408     0516  00B0               	movwf	??_rand+1
  2409     0517  086D               	movf	_randx+2,w
  2410     0518  00B1               	movwf	??_rand+2
  2411     0519  086E               	movf	_randx+3,w
  2412     051A  00B2               	movwf	??_rand+3
  2413     051B  3010               	movlw	16
  2414     051C  00B3               	movwf	??_rand+4
  2415     051D                     u1225:
  2416     051D  0D32               	rlf	??_rand+3,w
  2417     051E  0CB2               	rrf	??_rand+3,f
  2418     051F  0CB1               	rrf	??_rand+2,f
  2419     0520  0CB0               	rrf	??_rand+1,f
  2420     0521  0CAF               	rrf	??_rand,f
  2421     0522                     u1220:
  2422     0522  0BB3               	decfsz	??_rand+4,f
  2423     0523  2D1D               	goto	u1225
  2424     0524  30FF               	movlw	255
  2425     0525  052F               	andwf	??_rand,w
  2426     0526  00AD               	movwf	?_rand
  2427     0527  307F               	movlw	127
  2428     0528  0530               	andwf	??_rand+1,w
  2429     0529  00AE               	movwf	?_rand+1
  2430     052A                     l710:
  2431     052A  0008               	return
  2432     052B                     __end_of_rand:
  2433                           
  2434                           	psect	text12
  2435     045D                     __ptext12:	
  2436 ;; *************** function ___lmul *****************
  2437 ;; Defined at:
  2438 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2441 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  product         4    9[BANK0 ] unsigned long 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  4    0[BANK0 ] unsigned long 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1
  2453 ;;      Params:         0       8       0
  2454 ;;      Locals:         0       4       0
  2455 ;;      Temps:          0       1       0
  2456 ;;      Totals:         0      13       0
  2457 ;;Total ram usage:       13 bytes
  2458 ;; Hardware stack levels used: 1
  2459 ;; Hardware stack levels required when called: 2
  2460 ;; This function calls:
  2461 ;;		Nothing
  2462 ;; This function is called by:
  2463 ;;		_rand
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467     045D                     ___lmul:	
  2468                           ;psect for function ___lmul
  2469                           
  2470     045D                     l1800:	
  2471                           ;incstack = 0
  2472                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2473                           
  2474     045D  3000               	movlw	0
  2475     045E  1283               	bcf	3,5	;RP0=0, select bank0
  2476     045F  00AC               	movwf	___lmul@product+3
  2477     0460  3000               	movlw	0
  2478     0461  00AB               	movwf	___lmul@product+2
  2479     0462  3000               	movlw	0
  2480     0463  00AA               	movwf	___lmul@product+1
  2481     0464  3000               	movlw	0
  2482     0465  00A9               	movwf	___lmul@product
  2483     0466                     l1802:
  2484     0466  1C20               	btfss	___lmul@multiplier,0
  2485     0467  2C69               	goto	u1171
  2486     0468  2C6A               	goto	u1170
  2487     0469                     u1171:
  2488     0469  2C81               	goto	l1806
  2489     046A                     u1170:
  2490     046A                     l1804:
  2491     046A  0824               	movf	___lmul@multiplicand,w
  2492     046B  07A9               	addwf	___lmul@product,f
  2493     046C  0825               	movf	___lmul@multiplicand+1,w
  2494     046D  1103               	clrz
  2495     046E  1803               	skipnc
  2496     046F  3E01               	addlw	1
  2497     0470  1903               	skipnz
  2498     0471  2C73               	goto	u1181
  2499     0472  07AA               	addwf	___lmul@product+1,f
  2500     0473                     u1181:
  2501     0473  0826               	movf	___lmul@multiplicand+2,w
  2502     0474  1103               	clrz
  2503     0475  1803               	skipnc
  2504     0476  3E01               	addlw	1
  2505     0477  1903               	skipnz
  2506     0478  2C7A               	goto	u1182
  2507     0479  07AB               	addwf	___lmul@product+2,f
  2508     047A                     u1182:
  2509     047A  0827               	movf	___lmul@multiplicand+3,w
  2510     047B  1103               	clrz
  2511     047C  1803               	skipnc
  2512     047D  3E01               	addlw	1
  2513     047E  1903               	skipnz
  2514     047F  2C81               	goto	u1183
  2515     0480  07AC               	addwf	___lmul@product+3,f
  2516     0481                     u1183:
  2517     0481                     l1806:
  2518     0481  3001               	movlw	1
  2519     0482  00A8               	movwf	??___lmul
  2520     0483                     u1195:
  2521     0483  1003               	clrc
  2522     0484  0DA4               	rlf	___lmul@multiplicand,f
  2523     0485  0DA5               	rlf	___lmul@multiplicand+1,f
  2524     0486  0DA6               	rlf	___lmul@multiplicand+2,f
  2525     0487  0DA7               	rlf	___lmul@multiplicand+3,f
  2526     0488  0BA8               	decfsz	??___lmul,f
  2527     0489  2C83               	goto	u1195
  2528     048A                     l1808:
  2529     048A  3001               	movlw	1
  2530     048B                     u1205:
  2531     048B  1003               	clrc
  2532     048C  0CA3               	rrf	___lmul@multiplier+3,f
  2533     048D  0CA2               	rrf	___lmul@multiplier+2,f
  2534     048E  0CA1               	rrf	___lmul@multiplier+1,f
  2535     048F  0CA0               	rrf	___lmul@multiplier,f
  2536     0490  3EFF               	addlw	-1
  2537     0491  1D03               	skipz
  2538     0492  2C8B               	goto	u1205
  2539     0493  0823               	movf	___lmul@multiplier+3,w
  2540     0494  0422               	iorwf	___lmul@multiplier+2,w
  2541     0495  0421               	iorwf	___lmul@multiplier+1,w
  2542     0496  0420               	iorwf	___lmul@multiplier,w
  2543     0497  1D03               	skipz
  2544     0498  2C9A               	goto	u1211
  2545     0499  2C9B               	goto	u1210
  2546     049A                     u1211:
  2547     049A  2C66               	goto	l1802
  2548     049B                     u1210:
  2549     049B                     l1810:
  2550     049B  082C               	movf	___lmul@product+3,w
  2551     049C  00A3               	movwf	?___lmul+3
  2552     049D  082B               	movf	___lmul@product+2,w
  2553     049E  00A2               	movwf	?___lmul+2
  2554     049F  082A               	movf	___lmul@product+1,w
  2555     04A0  00A1               	movwf	?___lmul+1
  2556     04A1  0829               	movf	___lmul@product,w
  2557     04A2  00A0               	movwf	?___lmul
  2558     04A3                     l268:
  2559     04A3  0008               	return
  2560     04A4                     __end_of___lmul:
  2561                           
  2562                           	psect	text13
  2563     03BB                     __ptext13:	
  2564 ;; *************** function ___awmod *****************
  2565 ;; Defined at:
  2566 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;  divisor         2   20[BANK0 ] int 
  2569 ;;  dividend        2   22[BANK0 ] int 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  sign            1   26[BANK0 ] unsigned char 
  2572 ;;  counter         1   25[BANK0 ] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  2   20[BANK0 ] int 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMMON   BANK0   BANK1
  2582 ;;      Params:         0       4       0
  2583 ;;      Locals:         0       2       0
  2584 ;;      Temps:          0       1       0
  2585 ;;      Totals:         0       7       0
  2586 ;;Total ram usage:        7 bytes
  2587 ;; Hardware stack levels used: 1
  2588 ;; Hardware stack levels required when called: 2
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_generateRandom
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596     03BB                     ___awmod:	
  2597                           ;psect for function ___awmod
  2598                           
  2599     03BB                     l1822:	
  2600                           ;incstack = 0
  2601                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2602                           
  2603     03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2604     03BC  01BA               	clrf	___awmod@sign
  2605     03BD                     l1824:
  2606     03BD  1FB7               	btfss	___awmod@dividend+1,7
  2607     03BE  2BC0               	goto	u1231
  2608     03BF  2BC1               	goto	u1230
  2609     03C0                     u1231:
  2610     03C0  2BC8               	goto	l1830
  2611     03C1                     u1230:
  2612     03C1                     l1826:
  2613     03C1  09B6               	comf	___awmod@dividend,f
  2614     03C2  09B7               	comf	___awmod@dividend+1,f
  2615     03C3  0AB6               	incf	___awmod@dividend,f
  2616     03C4  1903               	skipnz
  2617     03C5  0AB7               	incf	___awmod@dividend+1,f
  2618     03C6                     l1828:
  2619     03C6  01BA               	clrf	___awmod@sign
  2620     03C7  0ABA               	incf	___awmod@sign,f
  2621     03C8                     l1830:
  2622     03C8  1FB5               	btfss	___awmod@divisor+1,7
  2623     03C9  2BCB               	goto	u1241
  2624     03CA  2BCC               	goto	u1240
  2625     03CB                     u1241:
  2626     03CB  2BD1               	goto	l1834
  2627     03CC                     u1240:
  2628     03CC                     l1832:
  2629     03CC  09B4               	comf	___awmod@divisor,f
  2630     03CD  09B5               	comf	___awmod@divisor+1,f
  2631     03CE  0AB4               	incf	___awmod@divisor,f
  2632     03CF  1903               	skipnz
  2633     03D0  0AB5               	incf	___awmod@divisor+1,f
  2634     03D1                     l1834:
  2635     03D1  0834               	movf	___awmod@divisor,w
  2636     03D2  0435               	iorwf	___awmod@divisor+1,w
  2637     03D3  1903               	btfsc	3,2
  2638     03D4  2BD6               	goto	u1251
  2639     03D5  2BD7               	goto	u1250
  2640     03D6                     u1251:
  2641     03D6  2C06               	goto	l1852
  2642     03D7                     u1250:
  2643     03D7                     l1836:
  2644     03D7  01B9               	clrf	___awmod@counter
  2645     03D8  0AB9               	incf	___awmod@counter,f
  2646     03D9  2BE5               	goto	l1842
  2647     03DA                     l1838:
  2648     03DA  3001               	movlw	1
  2649     03DB                     u1265:
  2650     03DB  1003               	clrc
  2651     03DC  0DB4               	rlf	___awmod@divisor,f
  2652     03DD  0DB5               	rlf	___awmod@divisor+1,f
  2653     03DE  3EFF               	addlw	-1
  2654     03DF  1D03               	skipz
  2655     03E0  2BDB               	goto	u1265
  2656     03E1                     l1840:
  2657     03E1  3001               	movlw	1
  2658     03E2  00B8               	movwf	??___awmod
  2659     03E3  0838               	movf	??___awmod,w
  2660     03E4  07B9               	addwf	___awmod@counter,f
  2661     03E5                     l1842:
  2662     03E5  1FB5               	btfss	___awmod@divisor+1,7
  2663     03E6  2BE8               	goto	u1271
  2664     03E7  2BE9               	goto	u1270
  2665     03E8                     u1271:
  2666     03E8  2BDA               	goto	l1838
  2667     03E9                     u1270:
  2668     03E9                     l1844:
  2669     03E9  0835               	movf	___awmod@divisor+1,w
  2670     03EA  0237               	subwf	___awmod@dividend+1,w
  2671     03EB  1D03               	skipz
  2672     03EC  2BEF               	goto	u1285
  2673     03ED  0834               	movf	___awmod@divisor,w
  2674     03EE  0236               	subwf	___awmod@dividend,w
  2675     03EF                     u1285:
  2676     03EF  1C03               	skipc
  2677     03F0  2BF2               	goto	u1281
  2678     03F1  2BF3               	goto	u1280
  2679     03F2                     u1281:
  2680     03F2  2BF9               	goto	l1848
  2681     03F3                     u1280:
  2682     03F3                     l1846:
  2683     03F3  0834               	movf	___awmod@divisor,w
  2684     03F4  02B6               	subwf	___awmod@dividend,f
  2685     03F5  0835               	movf	___awmod@divisor+1,w
  2686     03F6  1C03               	skipc
  2687     03F7  03B7               	decf	___awmod@dividend+1,f
  2688     03F8  02B7               	subwf	___awmod@dividend+1,f
  2689     03F9                     l1848:
  2690     03F9  3001               	movlw	1
  2691     03FA                     u1295:
  2692     03FA  1003               	clrc
  2693     03FB  0CB5               	rrf	___awmod@divisor+1,f
  2694     03FC  0CB4               	rrf	___awmod@divisor,f
  2695     03FD  3EFF               	addlw	-1
  2696     03FE  1D03               	skipz
  2697     03FF  2BFA               	goto	u1295
  2698     0400                     l1850:
  2699     0400  3001               	movlw	1
  2700     0401  02B9               	subwf	___awmod@counter,f
  2701     0402  1D03               	btfss	3,2
  2702     0403  2C05               	goto	u1301
  2703     0404  2C06               	goto	u1300
  2704     0405                     u1301:
  2705     0405  2BE9               	goto	l1844
  2706     0406                     u1300:
  2707     0406                     l1852:
  2708     0406  083A               	movf	___awmod@sign,w
  2709     0407  1903               	btfsc	3,2
  2710     0408  2C0A               	goto	u1311
  2711     0409  2C0B               	goto	u1310
  2712     040A                     u1311:
  2713     040A  2C10               	goto	l1856
  2714     040B                     u1310:
  2715     040B                     l1854:
  2716     040B  09B6               	comf	___awmod@dividend,f
  2717     040C  09B7               	comf	___awmod@dividend+1,f
  2718     040D  0AB6               	incf	___awmod@dividend,f
  2719     040E  1903               	skipnz
  2720     040F  0AB7               	incf	___awmod@dividend+1,f
  2721     0410                     l1856:
  2722     0410  0837               	movf	___awmod@dividend+1,w
  2723     0411  00B5               	movwf	?___awmod+1
  2724     0412  0836               	movf	___awmod@dividend,w
  2725     0413  00B4               	movwf	?___awmod
  2726     0414                     l420:
  2727     0414  0008               	return
  2728     0415                     __end_of___awmod:
  2729                           
  2730                           	psect	text14
  2731     0353                     __ptext14:	
  2732 ;; *************** function ___awdiv *****************
  2733 ;; Defined at:
  2734 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  divisor         2    6[BANK0 ] int 
  2737 ;;  dividend        2    8[BANK0 ] int 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  quotient        2   13[BANK0 ] int 
  2740 ;;  sign            1   12[BANK0 ] unsigned char 
  2741 ;;  counter         1   11[BANK0 ] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  2    6[BANK0 ] int 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1
  2751 ;;      Params:         0       4       0
  2752 ;;      Locals:         0       4       0
  2753 ;;      Temps:          0       1       0
  2754 ;;      Totals:         0       9       0
  2755 ;;Total ram usage:        9 bytes
  2756 ;; Hardware stack levels used: 1
  2757 ;; Hardware stack levels required when called: 2
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_convertAngle
  2762 ;;		_calculateSpeedIncrement
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766     0353                     ___awdiv:	
  2767                           ;psect for function ___awdiv
  2768                           
  2769     0353                     l1366:	
  2770                           ;incstack = 0
  2771                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2772                           
  2773     0353  1283               	bcf	3,5	;RP0=0, select bank0
  2774     0354  01AC               	clrf	___awdiv@sign
  2775     0355                     l1368:
  2776     0355  1FA7               	btfss	___awdiv@divisor+1,7
  2777     0356  2B58               	goto	u781
  2778     0357  2B59               	goto	u780
  2779     0358                     u781:
  2780     0358  2B60               	goto	l1374
  2781     0359                     u780:
  2782     0359                     l1370:
  2783     0359  09A6               	comf	___awdiv@divisor,f
  2784     035A  09A7               	comf	___awdiv@divisor+1,f
  2785     035B  0AA6               	incf	___awdiv@divisor,f
  2786     035C  1903               	skipnz
  2787     035D  0AA7               	incf	___awdiv@divisor+1,f
  2788     035E                     l1372:
  2789     035E  01AC               	clrf	___awdiv@sign
  2790     035F  0AAC               	incf	___awdiv@sign,f
  2791     0360                     l1374:
  2792     0360  1FA9               	btfss	___awdiv@dividend+1,7
  2793     0361  2B63               	goto	u791
  2794     0362  2B64               	goto	u790
  2795     0363                     u791:
  2796     0363  2B6D               	goto	l1380
  2797     0364                     u790:
  2798     0364                     l1376:
  2799     0364  09A8               	comf	___awdiv@dividend,f
  2800     0365  09A9               	comf	___awdiv@dividend+1,f
  2801     0366  0AA8               	incf	___awdiv@dividend,f
  2802     0367  1903               	skipnz
  2803     0368  0AA9               	incf	___awdiv@dividend+1,f
  2804     0369                     l1378:
  2805     0369  3001               	movlw	1
  2806     036A  00AA               	movwf	??___awdiv
  2807     036B  082A               	movf	??___awdiv,w
  2808     036C  06AC               	xorwf	___awdiv@sign,f
  2809     036D                     l1380:
  2810     036D  01AD               	clrf	___awdiv@quotient
  2811     036E  01AE               	clrf	___awdiv@quotient+1
  2812     036F                     l1382:
  2813     036F  0826               	movf	___awdiv@divisor,w
  2814     0370  0427               	iorwf	___awdiv@divisor+1,w
  2815     0371  1903               	btfsc	3,2
  2816     0372  2B74               	goto	u801
  2817     0373  2B75               	goto	u800
  2818     0374                     u801:
  2819     0374  2BAC               	goto	l1402
  2820     0375                     u800:
  2821     0375                     l1384:
  2822     0375  01AB               	clrf	___awdiv@counter
  2823     0376  0AAB               	incf	___awdiv@counter,f
  2824     0377  2B83               	goto	l1390
  2825     0378                     l1386:
  2826     0378  3001               	movlw	1
  2827     0379                     u815:
  2828     0379  1003               	clrc
  2829     037A  0DA6               	rlf	___awdiv@divisor,f
  2830     037B  0DA7               	rlf	___awdiv@divisor+1,f
  2831     037C  3EFF               	addlw	-1
  2832     037D  1D03               	skipz
  2833     037E  2B79               	goto	u815
  2834     037F                     l1388:
  2835     037F  3001               	movlw	1
  2836     0380  00AA               	movwf	??___awdiv
  2837     0381  082A               	movf	??___awdiv,w
  2838     0382  07AB               	addwf	___awdiv@counter,f
  2839     0383                     l1390:
  2840     0383  1FA7               	btfss	___awdiv@divisor+1,7
  2841     0384  2B86               	goto	u821
  2842     0385  2B87               	goto	u820
  2843     0386                     u821:
  2844     0386  2B78               	goto	l1386
  2845     0387                     u820:
  2846     0387                     l1392:
  2847     0387  3001               	movlw	1
  2848     0388                     u835:
  2849     0388  1003               	clrc
  2850     0389  0DAD               	rlf	___awdiv@quotient,f
  2851     038A  0DAE               	rlf	___awdiv@quotient+1,f
  2852     038B  3EFF               	addlw	-1
  2853     038C  1D03               	skipz
  2854     038D  2B88               	goto	u835
  2855     038E  0827               	movf	___awdiv@divisor+1,w
  2856     038F  0229               	subwf	___awdiv@dividend+1,w
  2857     0390  1D03               	skipz
  2858     0391  2B94               	goto	u845
  2859     0392  0826               	movf	___awdiv@divisor,w
  2860     0393  0228               	subwf	___awdiv@dividend,w
  2861     0394                     u845:
  2862     0394  1C03               	skipc
  2863     0395  2B97               	goto	u841
  2864     0396  2B98               	goto	u840
  2865     0397                     u841:
  2866     0397  2B9F               	goto	l1398
  2867     0398                     u840:
  2868     0398                     l1394:
  2869     0398  0826               	movf	___awdiv@divisor,w
  2870     0399  02A8               	subwf	___awdiv@dividend,f
  2871     039A  0827               	movf	___awdiv@divisor+1,w
  2872     039B  1C03               	skipc
  2873     039C  03A9               	decf	___awdiv@dividend+1,f
  2874     039D  02A9               	subwf	___awdiv@dividend+1,f
  2875     039E                     l1396:
  2876     039E  142D               	bsf	___awdiv@quotient,0
  2877     039F                     l1398:
  2878     039F  3001               	movlw	1
  2879     03A0                     u855:
  2880     03A0  1003               	clrc
  2881     03A1  0CA7               	rrf	___awdiv@divisor+1,f
  2882     03A2  0CA6               	rrf	___awdiv@divisor,f
  2883     03A3  3EFF               	addlw	-1
  2884     03A4  1D03               	skipz
  2885     03A5  2BA0               	goto	u855
  2886     03A6                     l1400:
  2887     03A6  3001               	movlw	1
  2888     03A7  02AB               	subwf	___awdiv@counter,f
  2889     03A8  1D03               	btfss	3,2
  2890     03A9  2BAB               	goto	u861
  2891     03AA  2BAC               	goto	u860
  2892     03AB                     u861:
  2893     03AB  2B87               	goto	l1392
  2894     03AC                     u860:
  2895     03AC                     l1402:
  2896     03AC  082C               	movf	___awdiv@sign,w
  2897     03AD  1903               	btfsc	3,2
  2898     03AE  2BB0               	goto	u871
  2899     03AF  2BB1               	goto	u870
  2900     03B0                     u871:
  2901     03B0  2BB6               	goto	l1406
  2902     03B1                     u870:
  2903     03B1                     l1404:
  2904     03B1  09AD               	comf	___awdiv@quotient,f
  2905     03B2  09AE               	comf	___awdiv@quotient+1,f
  2906     03B3  0AAD               	incf	___awdiv@quotient,f
  2907     03B4  1903               	skipnz
  2908     03B5  0AAE               	incf	___awdiv@quotient+1,f
  2909     03B6                     l1406:
  2910     03B6  082E               	movf	___awdiv@quotient+1,w
  2911     03B7  00A7               	movwf	?___awdiv+1
  2912     03B8  082D               	movf	___awdiv@quotient,w
  2913     03B9  00A6               	movwf	?___awdiv
  2914     03BA                     l407:
  2915     03BA  0008               	return
  2916     03BB                     __end_of___awdiv:
  2917                           
  2918                           	psect	text15
  2919     0415                     __ptext15:	
  2920 ;; *************** function _myISR *****************
  2921 ;; Defined at:
  2922 ;;		line 77 in file "main.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMMON   BANK0   BANK1
  2936 ;;      Params:         0       0       0
  2937 ;;      Locals:         0       0       0
  2938 ;;      Temps:          3       0       0
  2939 ;;      Totals:         3       0       0
  2940 ;;Total ram usage:        3 bytes
  2941 ;; Hardware stack levels used: 1
  2942 ;; Hardware stack levels required when called: 1
  2943 ;; This function calls:
  2944 ;;		_timer1InterruptHandler
  2945 ;; This function is called by:
  2946 ;;		Interrupt level 1
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950     0415                     _myISR:	
  2951                           ;psect for function _myISR
  2952                           
  2953     0415                     i1l1632:
  2954                           
  2955                           ;main.c: 78:     if (INTCONbits.TMR0IF) {
  2956     0415  1D0B               	btfss	11,2	;volatile
  2957     0416  2C18               	goto	u108_21
  2958     0417  2C19               	goto	u108_20
  2959     0418                     u108_21:
  2960     0418  2C43               	goto	i1l1650
  2961     0419                     u108_20:
  2962     0419                     i1l1634:
  2963                           
  2964                           ;main.c: 79:         INTCONbits.TMR0IF = 0;
  2965     0419  110B               	bcf	11,2	;volatile
  2966     041A                     i1l1636:
  2967                           
  2968                           ;main.c: 80:         TMR0 = 178;
  2969     041A  30B2               	movlw	178
  2970     041B  1283               	bcf	3,5	;RP0=0, select bank0
  2971     041C  0081               	movwf	1	;volatile
  2972                           
  2973                           ;main.c: 81:         overflow_count++;
  2974     041D  3001               	movlw	1
  2975     041E  07E3               	addwf	_overflow_count,f	;volatile
  2976     041F  1803               	skipnc
  2977     0420  0AE4               	incf	_overflow_count+1,f	;volatile
  2978     0421  3000               	movlw	0
  2979     0422  07E4               	addwf	_overflow_count+1,f	;volatile
  2980                           
  2981                           ;main.c: 83:         if (overflow_count >= 5) {
  2982     0423  3000               	movlw	0
  2983     0424  0264               	subwf	_overflow_count+1,w	;volatile
  2984     0425  3005               	movlw	5
  2985     0426  1903               	skipnz
  2986     0427  0263               	subwf	_overflow_count,w	;volatile
  2987     0428  1C03               	skipc
  2988     0429  2C2B               	goto	u109_21
  2989     042A  2C2C               	goto	u109_20
  2990     042B                     u109_21:
  2991     042B  2C30               	goto	i1l1642
  2992     042C                     u109_20:
  2993     042C                     i1l1638:
  2994                           
  2995                           ;main.c: 84:             overflow_count = 0;
  2996     042C  01E3               	clrf	_overflow_count	;volatile
  2997     042D  01E4               	clrf	_overflow_count+1	;volatile
  2998     042E                     i1l1640:
  2999                           
  3000                           ;main.c: 85:             mustCheckServos = 1;
  3001     042E  01F8               	clrf	_mustCheckServos
  3002     042F  0AF8               	incf	_mustCheckServos,f
  3003     0430                     i1l1642:
  3004                           
  3005                           ;main.c: 87:         otroContador++;
  3006     0430  3001               	movlw	1
  3007     0431  07E1               	addwf	_otroContador,f	;volatile
  3008     0432  1803               	skipnc
  3009     0433  0AE2               	incf	_otroContador+1,f	;volatile
  3010     0434  3000               	movlw	0
  3011     0435  07E2               	addwf	_otroContador+1,f	;volatile
  3012     0436                     i1l1644:
  3013                           
  3014                           ;main.c: 88:         if (otroContador >= 1000) {
  3015     0436  3003               	movlw	3
  3016     0437  0262               	subwf	_otroContador+1,w	;volatile
  3017     0438  30E8               	movlw	232
  3018     0439  1903               	skipnz
  3019     043A  0261               	subwf	_otroContador,w	;volatile
  3020     043B  1C03               	skipc
  3021     043C  2C3E               	goto	u110_21
  3022     043D  2C3F               	goto	u110_20
  3023     043E                     u110_21:
  3024     043E  2C43               	goto	i1l1650
  3025     043F                     u110_20:
  3026     043F                     i1l1646:
  3027                           
  3028                           ;main.c: 89:             GP2 ^= 1;
  3029     043F  3004               	movlw	4
  3030     0440  0685               	xorwf	5,f
  3031     0441                     i1l1648:
  3032                           
  3033                           ;main.c: 90:             otroContador = 0;
  3034     0441  01E1               	clrf	_otroContador	;volatile
  3035     0442  01E2               	clrf	_otroContador+1	;volatile
  3036     0443                     i1l1650:
  3037                           
  3038                           ;main.c: 94:     if (PIR1bits.TMR1IF) {
  3039     0443  1283               	bcf	3,5	;RP0=0, select bank0
  3040     0444  1C0C               	btfss	12,0	;volatile
  3041     0445  2C47               	goto	u111_21
  3042     0446  2C48               	goto	u111_20
  3043     0447                     u111_21:
  3044     0447  2C4A               	goto	i1l1656
  3045     0448                     u111_20:
  3046     0448                     i1l1652:
  3047                           
  3048                           ;main.c: 95:         PIR1bits.TMR1IF = 0;
  3049     0448  100C               	bcf	12,0	;volatile
  3050     0449                     i1l1654:
  3051                           
  3052                           ;main.c: 96:         timer1InterruptHandler();
  3053     0449  22E2               	fcall	_timer1InterruptHandler
  3054     044A                     i1l1656:
  3055                           
  3056                           ;main.c: 100:     if (PIR1bits.TMR2IF) {
  3057     044A  1283               	bcf	3,5	;RP0=0, select bank0
  3058     044B  1C8C               	btfss	12,1	;volatile
  3059     044C  2C4E               	goto	u112_21
  3060     044D  2C4F               	goto	u112_20
  3061     044E                     u112_21:
  3062     044E  2C54               	goto	i1l88
  3063     044F                     u112_20:
  3064     044F                     i1l1658:
  3065                           
  3066                           ;main.c: 101:         TMR2ON = 0;
  3067     044F  1112               	bcf	18,2	;volatile
  3068                           
  3069                           ;main.c: 103:         PIR1bits.TMR2IF = 0;
  3070     0450  108C               	bcf	12,1	;volatile
  3071     0451                     i1l1660:
  3072                           
  3073                           ;main.c: 105:         GPIO = GPIO & 0b11001111;
  3074     0451  0805               	movf	5,w	;volatile
  3075     0452  39CF               	andlw	207
  3076     0453  0085               	movwf	5	;volatile
  3077     0454                     i1l88:
  3078     0454  0874               	movf	??_myISR+2,w
  3079     0455  008A               	movwf	10
  3080     0456  0873               	movf	??_myISR+1,w
  3081     0457  0084               	movwf	4
  3082     0458  0E72               	swapf	??_myISR,w
  3083     0459  0083               	movwf	3
  3084     045A  0EFE               	swapf	btemp,f
  3085     045B  0E7E               	swapf	btemp,w
  3086     045C  0009               	retfie
  3087     045D                     __end_of_myISR:
  3088                           
  3089                           	psect	intentry
  3090     0004                     __pintentry:	
  3091                           ;incstack = 0
  3092                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3093                           
  3094     0004                     interrupt_function:
  3095     007E                     saved_w	set	btemp
  3096     0004  00FE               	movwf	btemp
  3097     0005  0E03               	swapf	3,w
  3098     0006  00F2               	movwf	??_myISR
  3099     0007  0804               	movf	4,w
  3100     0008  00F3               	movwf	??_myISR+1
  3101     0009  080A               	movf	10,w
  3102     000A  00F4               	movwf	??_myISR+2
  3103     000B  2C15               	ljmp	_myISR
  3104                           
  3105                           	psect	text16
  3106     02E2                     __ptext16:	
  3107 ;; *************** function _timer1InterruptHandler *****************
  3108 ;; Defined at:
  3109 ;;		line 139 in file "main.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;		None
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;		None
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      void 
  3116 ;; Registers used:
  3117 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMMON   BANK0   BANK1
  3123 ;;      Params:         0       0       0
  3124 ;;      Locals:         0       0       0
  3125 ;;      Temps:          2       0       0
  3126 ;;      Totals:         2       0       0
  3127 ;;Total ram usage:        2 bytes
  3128 ;; Hardware stack levels used: 1
  3129 ;; This function calls:
  3130 ;;		Nothing
  3131 ;; This function is called by:
  3132 ;;		_myISR
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136     02E2                     _timer1InterruptHandler:	
  3137                           ;psect for function _timer1InterruptHandler
  3138                           
  3139     02E2                     i1l1476:	
  3140                           ;incstack = 0
  3141                           ; Regs used in _timer1InterruptHandler: [wreg-fsr0h+status,2+status,0]
  3142                           
  3143                           
  3144                           ;main.c: 140:     switch (EstadoRCServo) {
  3145     02E2  2B3F               	goto	i1l1522
  3146     02E3                     i1l99:	
  3147                           ;main.c: 141:         case 0:
  3148                           
  3149                           
  3150                           ;main.c: 142:             TMR1 = 64561;
  3151     02E3  30FC               	movlw	252
  3152     02E4  1283               	bcf	3,5	;RP0=0, select bank0
  3153     02E5  008F               	movwf	15	;volatile
  3154     02E6  3031               	movlw	49
  3155     02E7  008E               	movwf	14	;volatile
  3156                           
  3157                           ;main.c: 143:             TMR2ON = 0;
  3158     02E8  1112               	bcf	18,2	;volatile
  3159     02E9                     i1l1478:
  3160                           
  3161                           ;main.c: 144:             TMR2 = 0;
  3162     02E9  0191               	clrf	17	;volatile
  3163     02EA                     i1l1480:
  3164                           
  3165                           ;main.c: 145:             EstadoRCServo = 1;
  3166     02EA  01F6               	clrf	_EstadoRCServo
  3167     02EB  0AF6               	incf	_EstadoRCServo,f
  3168     02EC                     i1l1482:
  3169                           
  3170                           ;main.c: 146:             if (ContadorMotor >= 2) {
  3171     02EC  3002               	movlw	2
  3172     02ED  0275               	subwf	_ContadorMotor,w
  3173     02EE  1C03               	skipc
  3174     02EF  2AF1               	goto	u93_21
  3175     02F0  2AF2               	goto	u93_20
  3176     02F1                     u93_21:
  3177     02F1  2AF8               	goto	i1l1488
  3178     02F2                     u93_20:
  3179     02F2                     i1l1484:
  3180                           
  3181                           ;main.c: 147:                 ContadorMotor = 0;
  3182     02F2  01F5               	clrf	_ContadorMotor
  3183     02F3                     i1l1486:
  3184                           
  3185                           ;main.c: 148:                 MaskMotor = 0b00010000;
  3186     02F3  3010               	movlw	16
  3187     02F4  00F9               	movwf	_MaskMotor
  3188                           
  3189                           ;main.c: 149:                 GPIO = GPIO & 0b11001111;
  3190     02F5  0805               	movf	5,w	;volatile
  3191     02F6  39CF               	andlw	207
  3192     02F7  0085               	movwf	5	;volatile
  3193     02F8                     i1l1488:
  3194                           
  3195                           ;main.c: 151:             GPIO = (GPIO & 0b11001111) | MaskMotor;
  3196     02F8  0805               	movf	5,w	;volatile
  3197     02F9  39CF               	andlw	207
  3198     02FA  0479               	iorwf	_MaskMotor,w
  3199     02FB  0085               	movwf	5	;volatile
  3200                           
  3201                           ;main.c: 153:             break;
  3202     02FC  2B52               	goto	i1l108
  3203     02FD                     i1l102:	
  3204                           ;main.c: 154:         case 1:
  3205                           
  3206                           
  3207                           ;main.c: 155:             TMR1 = 61561;
  3208     02FD  30F0               	movlw	240
  3209     02FE  1283               	bcf	3,5	;RP0=0, select bank0
  3210     02FF  008F               	movwf	15	;volatile
  3211     0300  3079               	movlw	121
  3212     0301  008E               	movwf	14	;volatile
  3213     0302                     i1l1490:
  3214                           
  3215                           ;main.c: 156:             PR2 = motorRawValueTarget[ContadorMotor];
  3216     0302  0875               	movf	_ContadorMotor,w
  3217     0303  3E69               	addlw	(low (_motorRawValueTarget| 0))& (0+255)
  3218     0304  0084               	movwf	4
  3219     0305  1383               	bcf	3,7	;select IRP bank0
  3220     0306  0800               	movf	0,w
  3221     0307  1683               	bsf	3,5	;RP0=1, select bank1
  3222     0308  0092               	movwf	18	;volatile
  3223     0309                     i1l1492:
  3224                           
  3225                           ;main.c: 157:             TMR2ON = 1;
  3226     0309  1283               	bcf	3,5	;RP0=0, select bank0
  3227     030A  1512               	bsf	18,2	;volatile
  3228     030B                     i1l1494:
  3229                           
  3230                           ;main.c: 158:             EstadoRCServo = 2;
  3231     030B  3002               	movlw	2
  3232     030C  00F6               	movwf	_EstadoRCServo
  3233     030D                     i1l1496:
  3234                           
  3235                           ;main.c: 159:             if (PR2 <= 1) {
  3236     030D  3002               	movlw	2
  3237     030E  1683               	bsf	3,5	;RP0=1, select bank1
  3238     030F  0212               	subwf	18,w	;volatile
  3239     0310  1803               	skipnc
  3240     0311  2B13               	goto	u94_21
  3241     0312  2B14               	goto	u94_20
  3242     0313                     u94_21:
  3243     0313  2B52               	goto	i1l108
  3244     0314                     u94_20:
  3245     0314                     i1l1498:
  3246                           
  3247                           ;main.c: 161:                 TMR2ON = 0;
  3248     0314  1283               	bcf	3,5	;RP0=0, select bank0
  3249     0315  1112               	bcf	18,2	;volatile
  3250     0316                     i1l1500:
  3251                           
  3252                           ;main.c: 163:                 GPIO = (GPIO & 0b11001111);
  3253     0316  1283               	bcf	3,5	;RP0=0, select bank0
  3254     0317  0805               	movf	5,w	;volatile
  3255     0318  39CF               	andlw	207
  3256     0319  0085               	movwf	5	;volatile
  3257     031A  2B52               	goto	i1l108
  3258     031B                     i1l104:	
  3259                           ;main.c: 167:         case 2:
  3260                           
  3261                           
  3262                           ;main.c: 168:             TMR2IF = 0;
  3263     031B  1283               	bcf	3,5	;RP0=0, select bank0
  3264     031C  108C               	bcf	12,1	;volatile
  3265                           
  3266                           ;main.c: 170:             TMR2ON = 0;
  3267     031D  1112               	bcf	18,2	;volatile
  3268     031E                     i1l1502:
  3269                           
  3270                           ;main.c: 171:             EstadoRCServo = 0;
  3271     031E  01F6               	clrf	_EstadoRCServo
  3272     031F                     i1l1504:
  3273                           
  3274                           ;main.c: 172:             ContadorMotor++;
  3275     031F  3001               	movlw	1
  3276     0320  00F0               	movwf	??_timer1InterruptHandler
  3277     0321  0870               	movf	??_timer1InterruptHandler,w
  3278     0322  07F5               	addwf	_ContadorMotor,f
  3279     0323                     i1l1506:
  3280                           
  3281                           ;main.c: 173:             GPIO = GPIO & 0b11001111;
  3282     0323  0805               	movf	5,w	;volatile
  3283     0324  39CF               	andlw	207
  3284     0325  0085               	movwf	5	;volatile
  3285     0326                     i1l1508:
  3286                           
  3287                           ;main.c: 174:             MaskMotor = (uint8_t)(MaskMotor << 1);
  3288     0326  0879               	movf	_MaskMotor,w
  3289     0327  00F0               	movwf	??_timer1InterruptHandler
  3290     0328  0770               	addwf	??_timer1InterruptHandler,w
  3291     0329  00F9               	movwf	_MaskMotor
  3292                           
  3293                           ;main.c: 175:             if (ContadorMotor >= 2) {
  3294     032A  3002               	movlw	2
  3295     032B  0275               	subwf	_ContadorMotor,w
  3296     032C  1C03               	skipc
  3297     032D  2B2F               	goto	u95_21
  3298     032E  2B30               	goto	u95_20
  3299     032F                     u95_21:
  3300     032F  2B38               	goto	i1l105
  3301     0330                     u95_20:
  3302     0330                     i1l1510:
  3303                           
  3304                           ;main.c: 176:                 ContadorMotor = 0;
  3305     0330  01F5               	clrf	_ContadorMotor
  3306     0331                     i1l1512:
  3307                           
  3308                           ;main.c: 177:                 MaskMotor = 0b00010000;
  3309     0331  3010               	movlw	16
  3310     0332  00F9               	movwf	_MaskMotor
  3311     0333                     i1l1514:
  3312                           
  3313                           ;main.c: 178:                 TMR1 = 37535;
  3314     0333  3092               	movlw	146
  3315     0334  008F               	movwf	15	;volatile
  3316     0335  309F               	movlw	159
  3317     0336  008E               	movwf	14	;volatile
  3318                           
  3319                           ;main.c: 179:             } else {
  3320     0337  2B52               	goto	i1l108
  3321     0338                     i1l105:
  3322                           
  3323                           ;main.c: 180:                 TMR1 = 65535;
  3324     0338  30FF               	movlw	255
  3325     0339  008F               	movwf	15	;volatile
  3326     033A  30FF               	movlw	255
  3327     033B  008E               	movwf	14	;volatile
  3328     033C  2B52               	goto	i1l108
  3329     033D                     i1l1516:
  3330                           
  3331                           ;main.c: 186:             EstadoRCServo = 0;
  3332     033D  01F6               	clrf	_EstadoRCServo
  3333     033E  2B16               	goto	i1l1500
  3334     033F                     i1l1522:
  3335     033F  0876               	movf	_EstadoRCServo,w
  3336     0340  00F0               	movwf	??_timer1InterruptHandler
  3337     0341  01F1               	clrf	??_timer1InterruptHandler+1
  3338                           
  3339                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3340                           ; Switch size 1, requested type "simple"
  3341                           ; Number of cases is 1, Range of values is 0 to 0
  3342                           ; switch strategies available:
  3343                           ; Name         Instructions Cycles
  3344                           ; simple_byte            4     3 (average)
  3345                           ; direct_byte            7     6 (fixed)
  3346                           ; jumptable            260     6 (fixed)
  3347                           ;	Chosen strategy is simple_byte
  3348     0342  0871               	movf	??_timer1InterruptHandler+1,w
  3349     0343  3A00               	xorlw	0	; case 0
  3350     0344  1903               	skipnz
  3351     0345  2B47               	goto	i1l2154
  3352     0346  2B3D               	goto	i1l1516
  3353     0347                     i1l2154:
  3354                           
  3355                           ; Switch size 1, requested type "simple"
  3356                           ; Number of cases is 3, Range of values is 0 to 2
  3357                           ; switch strategies available:
  3358                           ; Name         Instructions Cycles
  3359                           ; direct_byte            9     6 (fixed)
  3360                           ; simple_byte           10     6 (average)
  3361                           ; jumptable            260     6 (fixed)
  3362                           ;	Chosen strategy is simple_byte
  3363     0347  0870               	movf	??_timer1InterruptHandler,w
  3364     0348  3A00               	xorlw	0	; case 0
  3365     0349  1903               	skipnz
  3366     034A  2AE3               	goto	i1l99
  3367     034B  3A01               	xorlw	1	; case 1
  3368     034C  1903               	skipnz
  3369     034D  2AFD               	goto	i1l102
  3370     034E  3A03               	xorlw	3	; case 2
  3371     034F  1903               	skipnz
  3372     0350  2B1B               	goto	i1l104
  3373     0351  2B3D               	goto	i1l1516
  3374     0352                     i1l108:
  3375     0352  0008               	return
  3376     0353                     __end_of_timer1InterruptHandler:
  3377     007E                     btemp	set	126	;btemp
  3378     007E                     wtemp0	set	126
  3379                           
  3380                           	psect	idloc
  3381                           
  3382                           ;Config register IDLOC0 @ 0x2000
  3383                           ;	unspecified, using default values
  3384     2000                     	org	8192
  3385     2000  3FFF               	dw	16383
  3386                           
  3387                           ;Config register IDLOC1 @ 0x2001
  3388                           ;	unspecified, using default values
  3389     2001                     	org	8193
  3390     2001  3FFF               	dw	16383
  3391                           
  3392                           ;Config register IDLOC2 @ 0x2002
  3393                           ;	unspecified, using default values
  3394     2002                     	org	8194
  3395     2002  3FFF               	dw	16383
  3396                           
  3397                           ;Config register IDLOC3 @ 0x2003
  3398                           ;	unspecified, using default values
  3399     2003                     	org	8195
  3400     2003  3FFF               	dw	16383
  3401                           
  3402                           	psect	config
  3403                           
  3404                           ;Config register CONFIG @ 0x2007
  3405                           ;	Oscillator Selection bits
  3406                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  3407                           ;	Watchdog Timer Enable bit
  3408                           ;	WDTE = OFF, WDT disabled
  3409                           ;	Power-up Timer Enable bit
  3410                           ;	PWRTE = ON, PWRT enabled
  3411                           ;	MCLR Pin Function Select bit
  3412                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  3413                           ;	Code Protection bit
  3414                           ;	CP = OFF, Program memory code protection is disabled
  3415                           ;	Data Code Protection bit
  3416                           ;	CPD = 0x1, unprogrammed default
  3417                           ;	Brown Out Detect
  3418                           ;	BOREN = ON, BOR enabled
  3419                           ;	Internal External Switchover bit
  3420                           ;	IESO = 0x1, unprogrammed default
  3421                           ;	Fail-Safe Clock Monitor Enabled bit
  3422                           ;	FCMEN = 0x1, unprogrammed default
  3423     2007                     	org	8199
  3424     2007  3FC4               	dw	16324

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         26
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     53      79
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    _myISR->_timer1InterruptHandler

Critical Paths under _main in BANK0

    _main->_setTorretPosition
    _setup->_srand
    _setTorretPosition->_calculateSpeedIncrement
    _convertAngle->___awdiv
    _calculateSpeedIncrement->_generateRandom
    _generateRandom->___awmod
    _rand->___lmul
    ___awmod->_rand
    ___awdiv->___wmul

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10789
                                             50 BANK0      3     3      0
                       _convertAngle
                  _setTorretPosition
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     121
                            _initPWM
                        _setupTimer0
                        _setupTimer1
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _setupTimer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTorretPosition                                    1     1      0    8085
                                             49 BANK0      1     1      0
            _calculateSpeedIncrement
                       _convertAngle
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _convertAngle                                         4     2      2    2583
                                             15 BANK0      4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _calculateSpeedIncrement                             14    12      2    3183
                                             35 BANK0     14    12      2
                            ___awdiv
                     _generateRandom
 ---------------------------------------------------------------------------------
 (2) _generateRandom                                       8     4      4    2319
                                             27 BANK0      8     4      4
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                             13 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                             20 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     604
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                3     3      0       0
                                              2 COMMON     3     3      0
             _timer1InterruptHandler
 ---------------------------------------------------------------------------------
 (7) _timer1InterruptHandler                               2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convertAngle
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _setTorretPosition
     _calculateSpeedIncrement
       ___awdiv
       _generateRandom
         ___awmod
           _rand (ARG)
             ___lmul
         _rand
     _convertAngle
     _generateRandom
   _setup
     _initPWM
     _setupTimer0
     _setupTimer1
     _srand

 _myISR (ROOT)
   _timer1InterruptHandler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     35      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      59       8        0.0%
ABS                  0      0      59       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Feb 04 21:00:04 2024

             ??_setTorretPosition 0051                      ___awdiv@sign 002C                                fsr 0004  
             ___wmul@multiplicand 0022                               l111 05B4                               l120 0594  
                             l114 05AA                               l123 0576                               l133 02E1  
                             l117 05A0                               l134 02DD                               l143 0034  
                             l129 04E9                               l420 0414                               l254 0538  
                             l407 03BA                               l159 0178                               l256 0550  
                             l268 04A3                               l710 052A                               l707 05C4  
                             _GP2 002A                               _PR2 0092                               u800 0375  
                             u801 0374                               u820 0387                               u821 0386  
                             u815 0379                               u840 0398                               u841 0397  
                             u835 0388                               u860 03AC                               u780 0359  
                             u861 03AB                               u845 0394                               u781 0358  
                             u870 03B1                               u790 0364                               u871 03B0  
                             u855 03A0                               u791 0363                               fsr0 0004  
                             indf 0000                      ___awmod@sign 003A                              l2000 007F  
                            l2010 00AF                              l2002 0086                              l2020 00D2  
                            l2012 00B6                              l2004 008E                              l2100 0203  
                            l2030 010F                              l2022 00E0                              l2006 009C  
                            l2014 00BE                              l2110 0228                              l2102 0211  
                            l1400 03A6                              l2032 011D                              l2040 013F  
                            l2024 00E9                              l2016 00C7                              l2008 00AB  
                            l2120 0244                              l2112 022A                              l2104 0216  
                            l1402 03AC                              l2050 0171                              l2042 014D  
                            l2034 012C                              l2026 00F8                              l2018 00CE  
                            l2130 0262                              l2122 024B                              l2114 0238  
                            l2106 021A                              l1404 03B1                              l2044 015C  
                            l2036 0130                              l2028 0107                              l2132 0263  
                            l2124 024D                              l2116 023B                              l2108 0221  
                            l2060 0186                              l2052 0179                              l1406 03B6  
                            l2046 0160                              l2038 0137                              l2126 025B  
                            l2118 023D                              l2070 01A5                              l2062 018D  
                            l2054 017A                              l2048 0168                              l2128 025D  
                            l2080 01C8                              l2072 01AC                              l2064 018E  
                            l2056 017D                              l1370 0359                              l2090 01EA  
                            l2082 01CC                              l2074 01B3                              l2066 019C  
                            l2058 017F                              l1380 036D                              l1372 035E  
                            l2092 01EF                              l2084 01D3                              l2076 01B5  
                            l2068 01A1                              l1390 0383                              l1382 036F  
                            l1374 0360                              l1366 0353                              l2094 01F3  
                            l2086 01DA                              l2078 01C3                              l1392 0387  
                            l1384 0375                              l1376 0364                              l1368 0355  
                            l1800 045D                              l2096 01FA                              l2088 01DC  
                            l1394 0398                              l1386 0378                              l1378 0369  
                            l1810 049B                              l1802 0466                              l2098 0201  
                            l1396 039E                              l1388 037F                              l1804 046A  
                            l1900 0595                              l1398 039F                              l1830 03C8  
                            l1822 03BB                              l1806 0481                              l1814 04EA  
                            l1910 059F                              l1902 0597                              l1840 03E1  
                            l1832 03CC                              l1824 03BD                              l1808 048A  
                            l1816 0505                              l1920 04C6                              l1904 0599  
                            l1912 05BD                              l1850 0400                              l1842 03E5  
                            l1834 03D1                              l1826 03C1                              l1818 0513  
                            l1930 026E                              l1922 04CB                              l1914 04A4  
                            l1906 059C                              l1844 03E9                              l1836 03D7  
                            l1852 0406                              l1828 03C6                              l1860 0551  
                            l1940 02AF                              l1924 04E8                              l1916 04B2  
                            l1908 059E                              l1854 040B                              l1846 03F3  
                            l1838 03DA                              l1862 0551                              l1942 02D2  
                            l1934 0271                              l1870 052E                              l1918 04B8  
                            l1950 057D                              l1856 0410                              l1848 03F9  
                            l1864 0572                              l1944 02D8                              l1936 0282  
                            l1928 0268                              l1872 0532                              l1960 0585  
                            l1952 0580                              l1938 02A9                              l1874 053F  
                            l1890 05B3                              l1882 05AB                              l1970 058C  
                            l1962 0587                              l1954 0581                              l1876 0546  
                            l1868 052B                              l1884 05AD                              l1892 05A1  
                            l1980 0591                              l1972 058D                              l1964 0589  
                            l1956 0583                              l1948 0577                              l1878 054C  
                            l1990 0047                              l1886 05AE                              l1894 05A3  
                            l1982 0593                              l1974 058E                              l1966 058A  
                            l1958 0584                              l1992 0056                              l1984 0020  
                            l1888 05B0                              l1896 05A5                              l1976 058F  
                            l1968 058B                              l1994 005E                              l1986 0026  
                            l1898 05A9                              l1978 0590         __end_of_setTorretPosition 0179  
                            l1996 006C                              l1988 0039                              l1998 007B  
                            u1210 049B                              u1211 049A                              u1300 0406  
                            u1220 0522                              u1301 0405                              u1205 048B  
                            u1310 040B                              u1230 03C1                              u1311 040A  
                            u1231 03C0                              u1240 03CC                              u1400 02D2  
                            u1320 0532                              u1241 03CB                              u1225 051D  
                            u1401 02D1                              u1321 0531                              u1250 03D7  
                            u1170 046A                              u1410 0026                              u1251 03D6  
                            u1171 0469                              u1411 0025                              u1500 00F8  
                            u1420 0034                              u1181 0473                              u1405 02CE  
                            u1501 00F7                              u1421 0033                              u1270 03E9  
                            u1182 047A                              u1350 054C                              u1510 011D  
                            u1430 0039                              u1271 03E8                              u1183 0481  
                            u1351 054B                              u1335 0539                              u1511 011C  
                            u1431 0038                              u1280 03F3                              u1360 04B2  
                            u1520 014D                              u1440 0047                              u1281 03F2  
                            u1265 03DB                              u1345 0540                              u1361 04B1  
                            u1521 014C                              u1505 00F4                              u1441 0046  
                            u1425 0030                              u1370 04C6                              u1450 006C  
                            u1530 0262                              u1195 0483                              u1371 04C5  
                            u1515 0119                              u1451 006B                              u1531 0261  
                            u1380 026E                              u1460 009C                              u1285 03EF  
                            u1381 026D                              u1365 04AE                              u1525 0149  
                            u1461 009B                              u1445 0043                              u1390 02AF  
                            u1470 00D2                              u1295 03FA                              u1391 02AE  
                            u1375 04C2                              u1471 00D1                              u1455 0068  
                            u1480 00E0                              u1481 00DF                              u1465 0098  
                            _GPIO 0005                              u1490 00E9                              u1491 00E8  
                            u1547 0195                              u1485 00DC                              u1557 01BC  
                            u1567 01E3                              u1577 020A                              u1587 0231  
                            u1597 0254                     _EstadoRCServo 0076                              i1l88 0454  
                            i1l99 02E3                              _TMR0 0001                              _TMR1 000E  
                            _TMR2 0011                              _main 0179                              _rand 04EA  
                            btemp 007E                              start 000C                     ?_convertAngle 002F  
                           ?_main 0070                             ?_rand 002D                   __end_of___awdiv 03BB  
                 __end_of___awmod 0415                             _ANSEL 009F                   ___awdiv@divisor 0026  
                           _T1CON 0010                             _T2CON 0012                             i1l102 02FD  
                           i1l104 031B                             i1l105 0338                             i1l108 0352  
                 ___awdiv@counter 002B                             u93_20 02F2                             u93_21 02F1  
                           u94_20 0314                             u94_21 0313                             u95_20 0330  
                           u95_21 032F               ___lmul@multiplicand 0024                   __end_of_initPWM 05A1  
                           _myISR 0415                             _randx 006B                             _speed 0065  
                           _setup 0577                             _srand 05BD                             pclath 000A  
      generateRandom@randomNumber 0041                             status 0003                             wtemp0 007E  
                  ??_convertAngle 0031                   __initialization 000D          ?_calculateSpeedIncrement 0043  
                    __end_of_main 0266                      __end_of_rand 052B                            ??_main 0052  
                          ??_rand 002F                  ??_generateRandom 003F          ??_timer1InterruptHandler 0070  
                          ?_myISR 0070                  ___awdiv@dividend 0028                            ?_setup 0070  
                          ?_srand 0020                            u110_20 043F                            u110_21 043E  
                          u111_20 0448                            u111_21 0447                            i1l1500 0316  
                          i1l1510 0330                            i1l1502 031E                            i1l1512 0331  
                          i1l1504 031F                            u112_20 044F                            u112_21 044E  
                          i1l2154 0347                            i1l1514 0333                            i1l1506 0323  
                          i1l1522 033F                            i1l1516 033D                            i1l1508 0326  
                          i1l1480 02EA                            i1l1640 042E                            i1l1632 0415  
                          i1l1490 0302                            i1l1482 02EC                            i1l1642 0430  
                          i1l1634 0419                            i1l1650 0443                            i1l1492 0309  
                          i1l1484 02F2                            i1l1476 02E2                            i1l1660 0451  
                          i1l1652 0448                            i1l1644 0436                            i1l1636 041A  
                          i1l1494 030B                            i1l1486 02F3                            i1l1478 02E9  
                          i1l1654 0449                            i1l1646 043F                            i1l1638 042C  
                          i1l1496 030D                            i1l1488 02F8                            i1l1656 044A  
                          i1l1648 0441                            i1l1498 0314                            i1l1658 044F  
                          u108_20 0419                            u108_21 0418                            u109_20 042C  
                          u109_21 042B                            _OSCCON 008F                            _TMR2IF 0061  
                          _TMR2ON 0092                            _TRISIO 0085                            ___lmul 045D  
                          ___wmul 052B                         ??___awdiv 002A                         ??___awmod 0038  
                ___awdiv@quotient 002D                   ___awmod@divisor 0034                   ___awmod@counter 0039  
                       ??_initPWM 0020                            saved_w 007E                            srand@x 0020  
                    ?_setupTimer0 0070                      ?_setupTimer1 0070           __end_of__initialization 001E  
                convertAngle@temp 0031                    __pcstackCOMMON 0070                      __pidataBANK0 05C5  
                   __end_of_myISR 045D                     __end_of_setup 0595                     __end_of_srand 05C5  
                  _OPTION_REGbits 0081              __end_of_convertAngle 04EA                           ??_myISR 0072  
                         ??_setup 0022                           ??_srand 0022                        __pbssBANK0 0055  
                      __pnvCOMMON 0079                        __pmaintext 0179                           ?___lmul 0020  
                         ?___wmul 0020                        __pintentry 0004                           _CCP1CON 0015  
                  ___lmul@product 0029            _timer1InterruptHandler 02E2                   _mustCheckServos 0078  
                         ___awdiv 0353                           ___awmod 03BB                           __ptext1 0577  
                         __ptext2 05BD                           __ptext3 05A1                           __ptext4 05AB  
                         __ptext5 0595                           __ptext6 0020                           __ptext7 04A4  
                         __ptext8 052B                           __ptext9 0266                         _T1CONbits 0010  
                         _initPWM 0595                  ___awmod@dividend 0036                           clrloop0 05B6  
            end_of_initialization 001E                        _motorAngle 0055                 convertAngle@value 002F  
                    _convertAngle 04A4                    _motorIncrement 0059                    __end_of___lmul 04A4  
                  __end_of___wmul 0551               start_initialization 000D                         _MaskMotor 0079  
                        ??___lmul 0028                          ??___wmul 0024                       __pdataBANK0 006B  
         _calculateSpeedIncrement 0266                       __pbssCOMMON 0075                         ___latbits 0000  
                   __pcstackBANK0 0020                       _activeMotor 0077           ?_timer1InterruptHandler 0070  
                        ?___awdiv 0026                          ?___awmod 0034                          ?_initPWM 0070  
  __end_of_timer1InterruptHandler 0353                 interrupt_function 0004                    ___wmul@product 0024  
                        _GPIObits 0005                         clear_ram0 05B5                          _PIE1bits 008C  
               generateRandom@max 003D                 generateRandom@min 003B                          _PIR1bits 000C  
                       _pwmActual 0067         ??_calculateSpeedIncrement 0045                 ___wmul@multiplier 0020  
                   ??_setupTimer0 0020                     ??_setupTimer1 0020               _motorRawValueTarget 0069  
               ___lmul@multiplier 0020                    _generateRandom 0551            __end_of_generateRandom 0577  
                        __ptext10 0551                          __ptext11 04EA                          __ptext12 045D  
                        __ptext13 03BB                          __ptext14 0353                          __ptext15 0415  
                        __ptext16 02E2   __end_of_calculateSpeedIncrement 02E2                     _ContadorMotor 0075  
             __end_of_setupTimer0 05B5               __end_of_setupTimer1 05AB                    _overflow_count 0063  
                      _INTCONbits 000B                   ?_generateRandom 003B                          intlevel1 0000  
                     _motorTarget 005D      calculateSpeedIncrement@index 0050      calculateSpeedIncrement@speed 004C  
                      _OPTION_REG 0081                      _otroContador 0061  calculateSpeedIncrement@increment 004E  
                     _setupTimer0 05AB                       _setupTimer1 05A1                 _setTorretPosition 0020  
              ?_setTorretPosition 0070  
