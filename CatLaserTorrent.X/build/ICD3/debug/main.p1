Version 3.2 HI-TECH Software Intermediate Code
[t ~ __interrupt . k ]
[t T11 __interrupt  ]
"242 C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic12f683.h
[s S14 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S14 . GPIF INTF T0IF GPIE INTE T0IE PEIE GIE ]
"252
[s S15 :2 `uc 1 :1 `uc 1 :2 `uc 1 :1 `uc 1 ]
[n S15 . . TMR0IF . TMR0IE ]
"241
[u S13 `S14 1 `S15 1 ]
[n S13 . . . ]
"259
[v _INTCONbits `VS13 ~T0 @X0 0 e@11 ]
"59
[v _TMR0 `Vuc ~T0 @X0 0 e@1 ]
"320
[s S17 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S17 . TMR1IF TMR2IF OSFIF CMIF . CCP1IF ADIF EEIF ]
"330
[s S18 :1 `uc 1 :1 `uc 1 ]
[n S18 . T1IF T2IF ]
"319
[u S16 `S17 1 `S18 1 ]
[n S16 . . . ]
"335
[v _PIR1bits `VS16 ~T0 @X0 0 e@12 ]
"76 main.c
[v _timer1InterruptHandler `(v ~T0 @X0 0 ef ]
"2121 C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic12f683.h
[v _TMR2ON `Vb ~T0 @X0 0 e@146 ]
"166
[v _GPIO `Vuc ~T0 @X0 0 e@5 ]
"385
[v _TMR1 `Vus ~T0 @X0 0 e@14 ]
"483
[v _TMR2 `Vuc ~T0 @X0 0 e@17 ]
"1228
[v _PR2 `Vuc ~T0 @X0 0 e@146 ]
"2118
[v _TMR2IF `Vb ~T0 @X0 0 e@97 ]
"881
[v _OPTION_REG `Vuc ~T0 @X0 0 e@129 ]
"887
[s S42 :3 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S42 . PS PSA T0SE T0CS INTEDG nGPPU ]
"895
[s S43 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S43 . PS0 PS1 PS2 ]
"886
[u S41 `S42 1 `S43 1 ]
[n S41 . . . ]
"901
[v _OPTION_REGbits `VS41 ~T0 @X0 0 e@129 ]
"406
[v _T1CON `Vuc ~T0 @X0 0 e@16 ]
"412
[s S20 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :2 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S20 . TMR1ON TMR1CS nT1SYNC T1OSCEN T1CKPS TMR1GE T1GINV ]
"421
[s S21 :4 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S21 . . T1CKPS0 T1CKPS1 T1GE ]
"411
[u S19 `S20 1 `S21 1 ]
[n S19 . . . ]
"428
[v _T1CONbits `VS19 ~T0 @X0 0 e@16 ]
"582
[v _CCP1CON `Vuc ~T0 @X0 0 e@21 ]
"490
[v _T2CON `Vuc ~T0 @X0 0 e@18 ]
"76 C:\Program Files\Microchip\xc8\v2.46\pic\include\c90\stdlib.h
[v _srand `(v ~T0 @X0 0 ef1`ui ]
"1111 C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic12f683.h
[v _OSCCON `Vuc ~T0 @X0 0 e@143 ]
"1720
[v _ANSEL `Vuc ~T0 @X0 0 e@159 ]
"951
[v _TRISIO `Vuc ~T0 @X0 0 e@133 ]
"172
[s S10 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S10 . GP0 GP1 GP2 GP3 GP4 GP5 ]
"171
[u S9 `S10 1 ]
[n S9 . . ]
"181
[v _GPIObits `VS9 ~T0 @X0 0 e@5 ]
"1007
[s S47 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S47 . TMR1IE TMR2IE OSFIE CMIE . CCP1IE ADIE EEIE ]
"1017
[s S48 :1 `uc 1 :1 `uc 1 ]
[n S48 . T1IE T2IE ]
"1006
[u S46 `S47 1 `S48 1 ]
[n S46 . . . ]
"1022
[v _PIE1bits `VS46 ~T0 @X0 0 e@140 ]
"75 C:\Program Files\Microchip\xc8\v2.46\pic\include\c90\stdlib.h
[v _rand `(i ~T0 @X0 0 ef ]
"8 C:\Program Files\Microchip\xc8\v2.46\pic\include\builtins.h
[v ___nop `(v ~T0 @X0 0 ef ]
[p i ___nop ]
[p mainexit ]
"1923 C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic12f683.h
[v _GP2 `Vb ~T0 @X0 0 e@42 ]
[v F158 `(v ~T0 @X0 1 tf1`ul ]
"20 C:\Program Files\Microchip\xc8\v2.46\pic\include\builtins.h
[v __delay `JF158 ~T0 @X0 0 e ]
[p i __delay ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *) __attribute__((__deprecated__));
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 73: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 75: extern int rand(void);
[; ;stdlib.h: 76: extern void srand(unsigned int);
[; ;stdlib.h: 77: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 78: extern div_t div(int numer, int denom);
[; ;stdlib.h: 79: extern udiv_t udiv(unsigned numer, unsigned denom) __attribute__((__deprecated__));
[; ;stdlib.h: 80: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 81: extern uldiv_t uldiv(unsigned long numer,unsigned long denom) __attribute__((__deprecated__));
[; ;stdlib.h: 85: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 86: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 87: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 88: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 93: extern void * malloc(size_t);
[; ;stdlib.h: 94: extern void free(void *);
[; ;stdlib.h: 95: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 104: extern int atexit(void (*)(void));
[; ;stdlib.h: 105: extern char * getenv(const char *);
[; ;stdlib.h: 106: extern char ** environ;
[; ;stdlib.h: 107: extern int system(char *);
[; ;stdlib.h: 108: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 109: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 110: extern int abs(int);
[; ;stdlib.h: 111: extern long labs(long);
[; ;stdlib.h: 113: extern char * itoa(char * buf, int val, int base) __attribute__((__deprecated__));
[; ;stdlib.h: 114: extern char * utoa(char * buf, unsigned val, int base) __attribute__((__deprecated__));
[; ;stdlib.h: 119: extern char * ltoa(char * buf, long val, int base) __attribute__((__deprecated__));
[; ;stdlib.h: 120: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 122: extern char * ftoa(float f, int * status) __attribute__((__deprecated__));
[; ;xc.h: 18: extern const char __xc8_OPTIM_SPEED;
[; ;xc.h: 20: extern double __fpnormalize(double);
[; ;builtins.h: 8: extern void __nop(void);
[; ;builtins.h: 20: extern __nonreentrant void _delay(uint32_t);
[; ;builtins.h: 22: extern __nonreentrant void _delaywdt(uint32_t);
[; ;pic12f683.h: 52: extern volatile unsigned char INDF __at(0x000);
"54 C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic12f683.h
[; ;pic12f683.h: 54: asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
[; ;pic12f683.h: 59: extern volatile unsigned char TMR0 __at(0x001);
"61
[; ;pic12f683.h: 61: asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
[; ;pic12f683.h: 66: extern volatile unsigned char PCL __at(0x002);
"68
[; ;pic12f683.h: 68: asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
[; ;pic12f683.h: 73: extern volatile unsigned char STATUS __at(0x003);
"75
[; ;pic12f683.h: 75: asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
[; ;pic12f683.h: 78: typedef union {
[; ;pic12f683.h: 79: struct {
[; ;pic12f683.h: 80: unsigned C :1;
[; ;pic12f683.h: 81: unsigned DC :1;
[; ;pic12f683.h: 82: unsigned Z :1;
[; ;pic12f683.h: 83: unsigned nPD :1;
[; ;pic12f683.h: 84: unsigned nTO :1;
[; ;pic12f683.h: 85: unsigned RP :2;
[; ;pic12f683.h: 86: unsigned IRP :1;
[; ;pic12f683.h: 87: };
[; ;pic12f683.h: 88: struct {
[; ;pic12f683.h: 89: unsigned :5;
[; ;pic12f683.h: 90: unsigned RP0 :1;
[; ;pic12f683.h: 91: unsigned RP1 :1;
[; ;pic12f683.h: 92: };
[; ;pic12f683.h: 93: struct {
[; ;pic12f683.h: 94: unsigned CARRY :1;
[; ;pic12f683.h: 95: unsigned :1;
[; ;pic12f683.h: 96: unsigned ZERO :1;
[; ;pic12f683.h: 97: };
[; ;pic12f683.h: 98: } STATUSbits_t;
[; ;pic12f683.h: 99: extern volatile STATUSbits_t STATUSbits __at(0x003);
[; ;pic12f683.h: 159: extern volatile unsigned char FSR __at(0x004);
"161
[; ;pic12f683.h: 161: asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
[; ;pic12f683.h: 166: extern volatile unsigned char GPIO __at(0x005);
"168
[; ;pic12f683.h: 168: asm("GPIO equ 05h");
[; <" GPIO equ 05h ;# ">
[; ;pic12f683.h: 171: typedef union {
[; ;pic12f683.h: 172: struct {
[; ;pic12f683.h: 173: unsigned GP0 :1;
[; ;pic12f683.h: 174: unsigned GP1 :1;
[; ;pic12f683.h: 175: unsigned GP2 :1;
[; ;pic12f683.h: 176: unsigned GP3 :1;
[; ;pic12f683.h: 177: unsigned GP4 :1;
[; ;pic12f683.h: 178: unsigned GP5 :1;
[; ;pic12f683.h: 179: };
[; ;pic12f683.h: 180: } GPIObits_t;
[; ;pic12f683.h: 181: extern volatile GPIObits_t GPIObits __at(0x005);
[; ;pic12f683.h: 216: extern volatile unsigned char PCLATH __at(0x00A);
"218
[; ;pic12f683.h: 218: asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
[; ;pic12f683.h: 221: typedef union {
[; ;pic12f683.h: 222: struct {
[; ;pic12f683.h: 223: unsigned PCLATH :5;
[; ;pic12f683.h: 224: };
[; ;pic12f683.h: 225: } PCLATHbits_t;
[; ;pic12f683.h: 226: extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
[; ;pic12f683.h: 236: extern volatile unsigned char INTCON __at(0x00B);
"238
[; ;pic12f683.h: 238: asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
[; ;pic12f683.h: 241: typedef union {
[; ;pic12f683.h: 242: struct {
[; ;pic12f683.h: 243: unsigned GPIF :1;
[; ;pic12f683.h: 244: unsigned INTF :1;
[; ;pic12f683.h: 245: unsigned T0IF :1;
[; ;pic12f683.h: 246: unsigned GPIE :1;
[; ;pic12f683.h: 247: unsigned INTE :1;
[; ;pic12f683.h: 248: unsigned T0IE :1;
[; ;pic12f683.h: 249: unsigned PEIE :1;
[; ;pic12f683.h: 250: unsigned GIE :1;
[; ;pic12f683.h: 251: };
[; ;pic12f683.h: 252: struct {
[; ;pic12f683.h: 253: unsigned :2;
[; ;pic12f683.h: 254: unsigned TMR0IF :1;
[; ;pic12f683.h: 255: unsigned :2;
[; ;pic12f683.h: 256: unsigned TMR0IE :1;
[; ;pic12f683.h: 257: };
[; ;pic12f683.h: 258: } INTCONbits_t;
[; ;pic12f683.h: 259: extern volatile INTCONbits_t INTCONbits __at(0x00B);
[; ;pic12f683.h: 314: extern volatile unsigned char PIR1 __at(0x00C);
"316
[; ;pic12f683.h: 316: asm("PIR1 equ 0Ch");
[; <" PIR1 equ 0Ch ;# ">
[; ;pic12f683.h: 319: typedef union {
[; ;pic12f683.h: 320: struct {
[; ;pic12f683.h: 321: unsigned TMR1IF :1;
[; ;pic12f683.h: 322: unsigned TMR2IF :1;
[; ;pic12f683.h: 323: unsigned OSFIF :1;
[; ;pic12f683.h: 324: unsigned CMIF :1;
[; ;pic12f683.h: 325: unsigned :1;
[; ;pic12f683.h: 326: unsigned CCP1IF :1;
[; ;pic12f683.h: 327: unsigned ADIF :1;
[; ;pic12f683.h: 328: unsigned EEIF :1;
[; ;pic12f683.h: 329: };
[; ;pic12f683.h: 330: struct {
[; ;pic12f683.h: 331: unsigned T1IF :1;
[; ;pic12f683.h: 332: unsigned T2IF :1;
[; ;pic12f683.h: 333: };
[; ;pic12f683.h: 334: } PIR1bits_t;
[; ;pic12f683.h: 335: extern volatile PIR1bits_t PIR1bits __at(0x00C);
[; ;pic12f683.h: 385: extern volatile unsigned short TMR1 __at(0x00E);
"387
[; ;pic12f683.h: 387: asm("TMR1 equ 0Eh");
[; <" TMR1 equ 0Eh ;# ">
[; ;pic12f683.h: 392: extern volatile unsigned char TMR1L __at(0x00E);
"394
[; ;pic12f683.h: 394: asm("TMR1L equ 0Eh");
[; <" TMR1L equ 0Eh ;# ">
[; ;pic12f683.h: 399: extern volatile unsigned char TMR1H __at(0x00F);
"401
[; ;pic12f683.h: 401: asm("TMR1H equ 0Fh");
[; <" TMR1H equ 0Fh ;# ">
[; ;pic12f683.h: 406: extern volatile unsigned char T1CON __at(0x010);
"408
[; ;pic12f683.h: 408: asm("T1CON equ 010h");
[; <" T1CON equ 010h ;# ">
[; ;pic12f683.h: 411: typedef union {
[; ;pic12f683.h: 412: struct {
[; ;pic12f683.h: 413: unsigned TMR1ON :1;
[; ;pic12f683.h: 414: unsigned TMR1CS :1;
[; ;pic12f683.h: 415: unsigned nT1SYNC :1;
[; ;pic12f683.h: 416: unsigned T1OSCEN :1;
[; ;pic12f683.h: 417: unsigned T1CKPS :2;
[; ;pic12f683.h: 418: unsigned TMR1GE :1;
[; ;pic12f683.h: 419: unsigned T1GINV :1;
[; ;pic12f683.h: 420: };
[; ;pic12f683.h: 421: struct {
[; ;pic12f683.h: 422: unsigned :4;
[; ;pic12f683.h: 423: unsigned T1CKPS0 :1;
[; ;pic12f683.h: 424: unsigned T1CKPS1 :1;
[; ;pic12f683.h: 425: unsigned T1GE :1;
[; ;pic12f683.h: 426: };
[; ;pic12f683.h: 427: } T1CONbits_t;
[; ;pic12f683.h: 428: extern volatile T1CONbits_t T1CONbits __at(0x010);
[; ;pic12f683.h: 483: extern volatile unsigned char TMR2 __at(0x011);
"485
[; ;pic12f683.h: 485: asm("TMR2 equ 011h");
[; <" TMR2 equ 011h ;# ">
[; ;pic12f683.h: 490: extern volatile unsigned char T2CON __at(0x012);
"492
[; ;pic12f683.h: 492: asm("T2CON equ 012h");
[; <" T2CON equ 012h ;# ">
[; ;pic12f683.h: 495: typedef union {
[; ;pic12f683.h: 496: struct {
[; ;pic12f683.h: 497: unsigned T2CKPS :2;
[; ;pic12f683.h: 498: unsigned TMR2ON :1;
[; ;pic12f683.h: 499: unsigned TOUTPS :4;
[; ;pic12f683.h: 500: };
[; ;pic12f683.h: 501: struct {
[; ;pic12f683.h: 502: unsigned T2CKPS0 :1;
[; ;pic12f683.h: 503: unsigned T2CKPS1 :1;
[; ;pic12f683.h: 504: unsigned :1;
[; ;pic12f683.h: 505: unsigned TOUTPS0 :1;
[; ;pic12f683.h: 506: unsigned TOUTPS1 :1;
[; ;pic12f683.h: 507: unsigned TOUTPS2 :1;
[; ;pic12f683.h: 508: unsigned TOUTPS3 :1;
[; ;pic12f683.h: 509: };
[; ;pic12f683.h: 510: } T2CONbits_t;
[; ;pic12f683.h: 511: extern volatile T2CONbits_t T2CONbits __at(0x012);
[; ;pic12f683.h: 561: extern volatile unsigned short CCPR1 __at(0x013);
"563
[; ;pic12f683.h: 563: asm("CCPR1 equ 013h");
[; <" CCPR1 equ 013h ;# ">
[; ;pic12f683.h: 568: extern volatile unsigned char CCPR1L __at(0x013);
"570
[; ;pic12f683.h: 570: asm("CCPR1L equ 013h");
[; <" CCPR1L equ 013h ;# ">
[; ;pic12f683.h: 575: extern volatile unsigned char CCPR1H __at(0x014);
"577
[; ;pic12f683.h: 577: asm("CCPR1H equ 014h");
[; <" CCPR1H equ 014h ;# ">
[; ;pic12f683.h: 582: extern volatile unsigned char CCP1CON __at(0x015);
"584
[; ;pic12f683.h: 584: asm("CCP1CON equ 015h");
[; <" CCP1CON equ 015h ;# ">
[; ;pic12f683.h: 587: typedef union {
[; ;pic12f683.h: 588: struct {
[; ;pic12f683.h: 589: unsigned CCP1M :4;
[; ;pic12f683.h: 590: unsigned DC1B :2;
[; ;pic12f683.h: 591: };
[; ;pic12f683.h: 592: struct {
[; ;pic12f683.h: 593: unsigned CCP1M0 :1;
[; ;pic12f683.h: 594: unsigned CCP1M1 :1;
[; ;pic12f683.h: 595: unsigned CCP1M2 :1;
[; ;pic12f683.h: 596: unsigned CCP1M3 :1;
[; ;pic12f683.h: 597: unsigned DC1B0 :1;
[; ;pic12f683.h: 598: unsigned DC1B1 :1;
[; ;pic12f683.h: 599: };
[; ;pic12f683.h: 600: } CCP1CONbits_t;
[; ;pic12f683.h: 601: extern volatile CCP1CONbits_t CCP1CONbits __at(0x015);
[; ;pic12f683.h: 646: extern volatile unsigned char WDTCON __at(0x018);
"648
[; ;pic12f683.h: 648: asm("WDTCON equ 018h");
[; <" WDTCON equ 018h ;# ">
[; ;pic12f683.h: 651: typedef union {
[; ;pic12f683.h: 652: struct {
[; ;pic12f683.h: 653: unsigned SWDTEN :1;
[; ;pic12f683.h: 654: unsigned WDTPS :4;
[; ;pic12f683.h: 655: };
[; ;pic12f683.h: 656: struct {
[; ;pic12f683.h: 657: unsigned :1;
[; ;pic12f683.h: 658: unsigned WDTPS0 :1;
[; ;pic12f683.h: 659: unsigned WDTPS1 :1;
[; ;pic12f683.h: 660: unsigned WDTPS2 :1;
[; ;pic12f683.h: 661: unsigned WDTPS3 :1;
[; ;pic12f683.h: 662: };
[; ;pic12f683.h: 663: } WDTCONbits_t;
[; ;pic12f683.h: 664: extern volatile WDTCONbits_t WDTCONbits __at(0x018);
[; ;pic12f683.h: 699: extern volatile unsigned char CMCON0 __at(0x019);
"701
[; ;pic12f683.h: 701: asm("CMCON0 equ 019h");
[; <" CMCON0 equ 019h ;# ">
[; ;pic12f683.h: 704: typedef union {
[; ;pic12f683.h: 705: struct {
[; ;pic12f683.h: 706: unsigned CM :3;
[; ;pic12f683.h: 707: unsigned CIS :1;
[; ;pic12f683.h: 708: unsigned CINV :1;
[; ;pic12f683.h: 709: unsigned :1;
[; ;pic12f683.h: 710: unsigned COUT :1;
[; ;pic12f683.h: 711: };
[; ;pic12f683.h: 712: struct {
[; ;pic12f683.h: 713: unsigned CM0 :1;
[; ;pic12f683.h: 714: unsigned CM1 :1;
[; ;pic12f683.h: 715: unsigned CM2 :1;
[; ;pic12f683.h: 716: };
[; ;pic12f683.h: 717: } CMCON0bits_t;
[; ;pic12f683.h: 718: extern volatile CMCON0bits_t CMCON0bits __at(0x019);
[; ;pic12f683.h: 758: extern volatile unsigned char CMCON1 __at(0x01A);
"760
[; ;pic12f683.h: 760: asm("CMCON1 equ 01Ah");
[; <" CMCON1 equ 01Ah ;# ">
[; ;pic12f683.h: 763: typedef union {
[; ;pic12f683.h: 764: struct {
[; ;pic12f683.h: 765: unsigned CMSYNC :1;
[; ;pic12f683.h: 766: unsigned T1GSS :1;
[; ;pic12f683.h: 767: };
[; ;pic12f683.h: 768: } CMCON1bits_t;
[; ;pic12f683.h: 769: extern volatile CMCON1bits_t CMCON1bits __at(0x01A);
[; ;pic12f683.h: 784: extern volatile unsigned char ADRESH __at(0x01E);
"786
[; ;pic12f683.h: 786: asm("ADRESH equ 01Eh");
[; <" ADRESH equ 01Eh ;# ">
[; ;pic12f683.h: 791: extern volatile unsigned char ADCON0 __at(0x01F);
"793
[; ;pic12f683.h: 793: asm("ADCON0 equ 01Fh");
[; <" ADCON0 equ 01Fh ;# ">
[; ;pic12f683.h: 796: typedef union {
[; ;pic12f683.h: 797: struct {
[; ;pic12f683.h: 798: unsigned ADON :1;
[; ;pic12f683.h: 799: unsigned GO_nDONE :1;
[; ;pic12f683.h: 800: unsigned CHS :2;
[; ;pic12f683.h: 801: unsigned :2;
[; ;pic12f683.h: 802: unsigned VCFG :1;
[; ;pic12f683.h: 803: unsigned ADFM :1;
[; ;pic12f683.h: 804: };
[; ;pic12f683.h: 805: struct {
[; ;pic12f683.h: 806: unsigned :1;
[; ;pic12f683.h: 807: unsigned GO :1;
[; ;pic12f683.h: 808: unsigned CHS0 :1;
[; ;pic12f683.h: 809: unsigned CHS1 :1;
[; ;pic12f683.h: 810: unsigned CHS2 :1;
[; ;pic12f683.h: 811: };
[; ;pic12f683.h: 812: struct {
[; ;pic12f683.h: 813: unsigned :1;
[; ;pic12f683.h: 814: unsigned nDONE :1;
[; ;pic12f683.h: 815: };
[; ;pic12f683.h: 816: struct {
[; ;pic12f683.h: 817: unsigned :1;
[; ;pic12f683.h: 818: unsigned GO_DONE :1;
[; ;pic12f683.h: 819: };
[; ;pic12f683.h: 820: } ADCON0bits_t;
[; ;pic12f683.h: 821: extern volatile ADCON0bits_t ADCON0bits __at(0x01F);
[; ;pic12f683.h: 881: extern volatile unsigned char OPTION_REG __at(0x081);
"883
[; ;pic12f683.h: 883: asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
[; ;pic12f683.h: 886: typedef union {
[; ;pic12f683.h: 887: struct {
[; ;pic12f683.h: 888: unsigned PS :3;
[; ;pic12f683.h: 889: unsigned PSA :1;
[; ;pic12f683.h: 890: unsigned T0SE :1;
[; ;pic12f683.h: 891: unsigned T0CS :1;
[; ;pic12f683.h: 892: unsigned INTEDG :1;
[; ;pic12f683.h: 893: unsigned nGPPU :1;
[; ;pic12f683.h: 894: };
[; ;pic12f683.h: 895: struct {
[; ;pic12f683.h: 896: unsigned PS0 :1;
[; ;pic12f683.h: 897: unsigned PS1 :1;
[; ;pic12f683.h: 898: unsigned PS2 :1;
[; ;pic12f683.h: 899: };
[; ;pic12f683.h: 900: } OPTION_REGbits_t;
[; ;pic12f683.h: 901: extern volatile OPTION_REGbits_t OPTION_REGbits __at(0x081);
[; ;pic12f683.h: 951: extern volatile unsigned char TRISIO __at(0x085);
"953
[; ;pic12f683.h: 953: asm("TRISIO equ 085h");
[; <" TRISIO equ 085h ;# ">
[; ;pic12f683.h: 956: typedef union {
[; ;pic12f683.h: 957: struct {
[; ;pic12f683.h: 958: unsigned TRISIO0 :1;
[; ;pic12f683.h: 959: unsigned TRISIO1 :1;
[; ;pic12f683.h: 960: unsigned TRISIO2 :1;
[; ;pic12f683.h: 961: unsigned TRISIO3 :1;
[; ;pic12f683.h: 962: unsigned TRISIO4 :1;
[; ;pic12f683.h: 963: unsigned TRISIO5 :1;
[; ;pic12f683.h: 964: };
[; ;pic12f683.h: 965: } TRISIObits_t;
[; ;pic12f683.h: 966: extern volatile TRISIObits_t TRISIObits __at(0x085);
[; ;pic12f683.h: 1001: extern volatile unsigned char PIE1 __at(0x08C);
"1003
[; ;pic12f683.h: 1003: asm("PIE1 equ 08Ch");
[; <" PIE1 equ 08Ch ;# ">
[; ;pic12f683.h: 1006: typedef union {
[; ;pic12f683.h: 1007: struct {
[; ;pic12f683.h: 1008: unsigned TMR1IE :1;
[; ;pic12f683.h: 1009: unsigned TMR2IE :1;
[; ;pic12f683.h: 1010: unsigned OSFIE :1;
[; ;pic12f683.h: 1011: unsigned CMIE :1;
[; ;pic12f683.h: 1012: unsigned :1;
[; ;pic12f683.h: 1013: unsigned CCP1IE :1;
[; ;pic12f683.h: 1014: unsigned ADIE :1;
[; ;pic12f683.h: 1015: unsigned EEIE :1;
[; ;pic12f683.h: 1016: };
[; ;pic12f683.h: 1017: struct {
[; ;pic12f683.h: 1018: unsigned T1IE :1;
[; ;pic12f683.h: 1019: unsigned T2IE :1;
[; ;pic12f683.h: 1020: };
[; ;pic12f683.h: 1021: } PIE1bits_t;
[; ;pic12f683.h: 1022: extern volatile PIE1bits_t PIE1bits __at(0x08C);
[; ;pic12f683.h: 1072: extern volatile unsigned char PCON __at(0x08E);
"1074
[; ;pic12f683.h: 1074: asm("PCON equ 08Eh");
[; <" PCON equ 08Eh ;# ">
[; ;pic12f683.h: 1077: typedef union {
[; ;pic12f683.h: 1078: struct {
[; ;pic12f683.h: 1079: unsigned nBOD :1;
[; ;pic12f683.h: 1080: unsigned nPOR :1;
[; ;pic12f683.h: 1081: unsigned :2;
[; ;pic12f683.h: 1082: unsigned SBODEN :1;
[; ;pic12f683.h: 1083: unsigned ULPWUE :1;
[; ;pic12f683.h: 1084: };
[; ;pic12f683.h: 1085: } PCONbits_t;
[; ;pic12f683.h: 1086: extern volatile PCONbits_t PCONbits __at(0x08E);
[; ;pic12f683.h: 1111: extern volatile unsigned char OSCCON __at(0x08F);
"1113
[; ;pic12f683.h: 1113: asm("OSCCON equ 08Fh");
[; <" OSCCON equ 08Fh ;# ">
[; ;pic12f683.h: 1116: typedef union {
[; ;pic12f683.h: 1117: struct {
[; ;pic12f683.h: 1118: unsigned SCS :1;
[; ;pic12f683.h: 1119: unsigned LTS :1;
[; ;pic12f683.h: 1120: unsigned HTS :1;
[; ;pic12f683.h: 1121: unsigned OSTS :1;
[; ;pic12f683.h: 1122: unsigned IRCF :3;
[; ;pic12f683.h: 1123: };
[; ;pic12f683.h: 1124: struct {
[; ;pic12f683.h: 1125: unsigned :4;
[; ;pic12f683.h: 1126: unsigned IRCF0 :1;
[; ;pic12f683.h: 1127: unsigned IRCF1 :1;
[; ;pic12f683.h: 1128: unsigned IRCF2 :1;
[; ;pic12f683.h: 1129: };
[; ;pic12f683.h: 1130: } OSCCONbits_t;
[; ;pic12f683.h: 1131: extern volatile OSCCONbits_t OSCCONbits __at(0x08F);
[; ;pic12f683.h: 1176: extern volatile unsigned char OSCTUNE __at(0x090);
"1178
[; ;pic12f683.h: 1178: asm("OSCTUNE equ 090h");
[; <" OSCTUNE equ 090h ;# ">
[; ;pic12f683.h: 1181: typedef union {
[; ;pic12f683.h: 1182: struct {
[; ;pic12f683.h: 1183: unsigned TUN :5;
[; ;pic12f683.h: 1184: };
[; ;pic12f683.h: 1185: struct {
[; ;pic12f683.h: 1186: unsigned TUN0 :1;
[; ;pic12f683.h: 1187: unsigned TUN1 :1;
[; ;pic12f683.h: 1188: unsigned TUN2 :1;
[; ;pic12f683.h: 1189: unsigned TUN3 :1;
[; ;pic12f683.h: 1190: unsigned TUN4 :1;
[; ;pic12f683.h: 1191: };
[; ;pic12f683.h: 1192: } OSCTUNEbits_t;
[; ;pic12f683.h: 1193: extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x090);
[; ;pic12f683.h: 1228: extern volatile unsigned char PR2 __at(0x092);
"1230
[; ;pic12f683.h: 1230: asm("PR2 equ 092h");
[; <" PR2 equ 092h ;# ">
[; ;pic12f683.h: 1235: extern volatile unsigned char WPU __at(0x095);
"1237
[; ;pic12f683.h: 1237: asm("WPU equ 095h");
[; <" WPU equ 095h ;# ">
[; ;pic12f683.h: 1240: extern volatile unsigned char WPUA __at(0x095);
"1242
[; ;pic12f683.h: 1242: asm("WPUA equ 095h");
[; <" WPUA equ 095h ;# ">
[; ;pic12f683.h: 1245: typedef union {
[; ;pic12f683.h: 1246: struct {
[; ;pic12f683.h: 1247: unsigned WPU0 :1;
[; ;pic12f683.h: 1248: unsigned WPU1 :1;
[; ;pic12f683.h: 1249: unsigned WPU2 :1;
[; ;pic12f683.h: 1250: unsigned :1;
[; ;pic12f683.h: 1251: unsigned WPU4 :1;
[; ;pic12f683.h: 1252: unsigned WPU5 :1;
[; ;pic12f683.h: 1253: };
[; ;pic12f683.h: 1254: struct {
[; ;pic12f683.h: 1255: unsigned WPUA0 :1;
[; ;pic12f683.h: 1256: unsigned WPUA1 :1;
[; ;pic12f683.h: 1257: unsigned WPUA2 :1;
[; ;pic12f683.h: 1258: unsigned :1;
[; ;pic12f683.h: 1259: unsigned WPUA4 :1;
[; ;pic12f683.h: 1260: unsigned WPUA5 :1;
[; ;pic12f683.h: 1261: };
[; ;pic12f683.h: 1262: } WPUbits_t;
[; ;pic12f683.h: 1263: extern volatile WPUbits_t WPUbits __at(0x095);
[; ;pic12f683.h: 1316: typedef union {
[; ;pic12f683.h: 1317: struct {
[; ;pic12f683.h: 1318: unsigned WPU0 :1;
[; ;pic12f683.h: 1319: unsigned WPU1 :1;
[; ;pic12f683.h: 1320: unsigned WPU2 :1;
[; ;pic12f683.h: 1321: unsigned :1;
[; ;pic12f683.h: 1322: unsigned WPU4 :1;
[; ;pic12f683.h: 1323: unsigned WPU5 :1;
[; ;pic12f683.h: 1324: };
[; ;pic12f683.h: 1325: struct {
[; ;pic12f683.h: 1326: unsigned WPUA0 :1;
[; ;pic12f683.h: 1327: unsigned WPUA1 :1;
[; ;pic12f683.h: 1328: unsigned WPUA2 :1;
[; ;pic12f683.h: 1329: unsigned :1;
[; ;pic12f683.h: 1330: unsigned WPUA4 :1;
[; ;pic12f683.h: 1331: unsigned WPUA5 :1;
[; ;pic12f683.h: 1332: };
[; ;pic12f683.h: 1333: } WPUAbits_t;
[; ;pic12f683.h: 1334: extern volatile WPUAbits_t WPUAbits __at(0x095);
[; ;pic12f683.h: 1389: extern volatile unsigned char IOC __at(0x096);
"1391
[; ;pic12f683.h: 1391: asm("IOC equ 096h");
[; <" IOC equ 096h ;# ">
[; ;pic12f683.h: 1394: extern volatile unsigned char IOCA __at(0x096);
"1396
[; ;pic12f683.h: 1396: asm("IOCA equ 096h");
[; <" IOCA equ 096h ;# ">
[; ;pic12f683.h: 1399: typedef union {
[; ;pic12f683.h: 1400: struct {
[; ;pic12f683.h: 1401: unsigned IOC0 :1;
[; ;pic12f683.h: 1402: unsigned IOC1 :1;
[; ;pic12f683.h: 1403: unsigned IOC2 :1;
[; ;pic12f683.h: 1404: unsigned IOC3 :1;
[; ;pic12f683.h: 1405: unsigned IOC4 :1;
[; ;pic12f683.h: 1406: unsigned IOC5 :1;
[; ;pic12f683.h: 1407: };
[; ;pic12f683.h: 1408: struct {
[; ;pic12f683.h: 1409: unsigned IOCA0 :1;
[; ;pic12f683.h: 1410: unsigned IOCA1 :1;
[; ;pic12f683.h: 1411: unsigned IOCA2 :1;
[; ;pic12f683.h: 1412: unsigned IOCA3 :1;
[; ;pic12f683.h: 1413: unsigned IOCA4 :1;
[; ;pic12f683.h: 1414: unsigned IOCA5 :1;
[; ;pic12f683.h: 1415: };
[; ;pic12f683.h: 1416: } IOCbits_t;
[; ;pic12f683.h: 1417: extern volatile IOCbits_t IOCbits __at(0x096);
[; ;pic12f683.h: 1480: typedef union {
[; ;pic12f683.h: 1481: struct {
[; ;pic12f683.h: 1482: unsigned IOC0 :1;
[; ;pic12f683.h: 1483: unsigned IOC1 :1;
[; ;pic12f683.h: 1484: unsigned IOC2 :1;
[; ;pic12f683.h: 1485: unsigned IOC3 :1;
[; ;pic12f683.h: 1486: unsigned IOC4 :1;
[; ;pic12f683.h: 1487: unsigned IOC5 :1;
[; ;pic12f683.h: 1488: };
[; ;pic12f683.h: 1489: struct {
[; ;pic12f683.h: 1490: unsigned IOCA0 :1;
[; ;pic12f683.h: 1491: unsigned IOCA1 :1;
[; ;pic12f683.h: 1492: unsigned IOCA2 :1;
[; ;pic12f683.h: 1493: unsigned IOCA3 :1;
[; ;pic12f683.h: 1494: unsigned IOCA4 :1;
[; ;pic12f683.h: 1495: unsigned IOCA5 :1;
[; ;pic12f683.h: 1496: };
[; ;pic12f683.h: 1497: } IOCAbits_t;
[; ;pic12f683.h: 1498: extern volatile IOCAbits_t IOCAbits __at(0x096);
[; ;pic12f683.h: 1563: extern volatile unsigned char VRCON __at(0x099);
"1565
[; ;pic12f683.h: 1565: asm("VRCON equ 099h");
[; <" VRCON equ 099h ;# ">
[; ;pic12f683.h: 1568: typedef union {
[; ;pic12f683.h: 1569: struct {
[; ;pic12f683.h: 1570: unsigned VR :4;
[; ;pic12f683.h: 1571: unsigned :1;
[; ;pic12f683.h: 1572: unsigned VRR :1;
[; ;pic12f683.h: 1573: unsigned :1;
[; ;pic12f683.h: 1574: unsigned VREN :1;
[; ;pic12f683.h: 1575: };
[; ;pic12f683.h: 1576: struct {
[; ;pic12f683.h: 1577: unsigned VR0 :1;
[; ;pic12f683.h: 1578: unsigned VR1 :1;
[; ;pic12f683.h: 1579: unsigned VR2 :1;
[; ;pic12f683.h: 1580: unsigned VR3 :1;
[; ;pic12f683.h: 1581: };
[; ;pic12f683.h: 1582: } VRCONbits_t;
[; ;pic12f683.h: 1583: extern volatile VRCONbits_t VRCONbits __at(0x099);
[; ;pic12f683.h: 1623: extern volatile unsigned char EEDAT __at(0x09A);
"1625
[; ;pic12f683.h: 1625: asm("EEDAT equ 09Ah");
[; <" EEDAT equ 09Ah ;# ">
[; ;pic12f683.h: 1628: extern volatile unsigned char EEDATA __at(0x09A);
"1630
[; ;pic12f683.h: 1630: asm("EEDATA equ 09Ah");
[; <" EEDATA equ 09Ah ;# ">
[; ;pic12f683.h: 1633: typedef union {
[; ;pic12f683.h: 1634: struct {
[; ;pic12f683.h: 1635: unsigned EEDAT :8;
[; ;pic12f683.h: 1636: };
[; ;pic12f683.h: 1637: } EEDATbits_t;
[; ;pic12f683.h: 1638: extern volatile EEDATbits_t EEDATbits __at(0x09A);
[; ;pic12f683.h: 1646: typedef union {
[; ;pic12f683.h: 1647: struct {
[; ;pic12f683.h: 1648: unsigned EEDAT :8;
[; ;pic12f683.h: 1649: };
[; ;pic12f683.h: 1650: } EEDATAbits_t;
[; ;pic12f683.h: 1651: extern volatile EEDATAbits_t EEDATAbits __at(0x09A);
[; ;pic12f683.h: 1661: extern volatile unsigned char EEADR __at(0x09B);
"1663
[; ;pic12f683.h: 1663: asm("EEADR equ 09Bh");
[; <" EEADR equ 09Bh ;# ">
[; ;pic12f683.h: 1668: extern volatile unsigned char EECON1 __at(0x09C);
"1670
[; ;pic12f683.h: 1670: asm("EECON1 equ 09Ch");
[; <" EECON1 equ 09Ch ;# ">
[; ;pic12f683.h: 1673: typedef union {
[; ;pic12f683.h: 1674: struct {
[; ;pic12f683.h: 1675: unsigned RD :1;
[; ;pic12f683.h: 1676: unsigned WR :1;
[; ;pic12f683.h: 1677: unsigned WREN :1;
[; ;pic12f683.h: 1678: unsigned WRERR :1;
[; ;pic12f683.h: 1679: };
[; ;pic12f683.h: 1680: } EECON1bits_t;
[; ;pic12f683.h: 1681: extern volatile EECON1bits_t EECON1bits __at(0x09C);
[; ;pic12f683.h: 1706: extern volatile unsigned char EECON2 __at(0x09D);
"1708
[; ;pic12f683.h: 1708: asm("EECON2 equ 09Dh");
[; <" EECON2 equ 09Dh ;# ">
[; ;pic12f683.h: 1713: extern volatile unsigned char ADRESL __at(0x09E);
"1715
[; ;pic12f683.h: 1715: asm("ADRESL equ 09Eh");
[; <" ADRESL equ 09Eh ;# ">
[; ;pic12f683.h: 1720: extern volatile unsigned char ANSEL __at(0x09F);
"1722
[; ;pic12f683.h: 1722: asm("ANSEL equ 09Fh");
[; <" ANSEL equ 09Fh ;# ">
[; ;pic12f683.h: 1725: typedef union {
[; ;pic12f683.h: 1726: struct {
[; ;pic12f683.h: 1727: unsigned ANS :4;
[; ;pic12f683.h: 1728: unsigned ADCS :3;
[; ;pic12f683.h: 1729: };
[; ;pic12f683.h: 1730: struct {
[; ;pic12f683.h: 1731: unsigned ANS0 :1;
[; ;pic12f683.h: 1732: unsigned ANS1 :1;
[; ;pic12f683.h: 1733: unsigned ANS2 :1;
[; ;pic12f683.h: 1734: unsigned ANS3 :1;
[; ;pic12f683.h: 1735: unsigned ADCS0 :1;
[; ;pic12f683.h: 1736: unsigned ADCS1 :1;
[; ;pic12f683.h: 1737: unsigned ADCS2 :1;
[; ;pic12f683.h: 1738: };
[; ;pic12f683.h: 1739: } ANSELbits_t;
[; ;pic12f683.h: 1740: extern volatile ANSELbits_t ANSELbits __at(0x09F);
[; ;pic12f683.h: 1800: extern volatile __bit ADCS0 __at(0x4FC);
[; ;pic12f683.h: 1803: extern volatile __bit ADCS1 __at(0x4FD);
[; ;pic12f683.h: 1806: extern volatile __bit ADCS2 __at(0x4FE);
[; ;pic12f683.h: 1809: extern volatile __bit ADFM __at(0xFF);
[; ;pic12f683.h: 1812: extern volatile __bit ADIE __at(0x466);
[; ;pic12f683.h: 1815: extern volatile __bit ADIF __at(0x66);
[; ;pic12f683.h: 1818: extern volatile __bit ADON __at(0xF8);
[; ;pic12f683.h: 1821: extern volatile __bit ANS0 __at(0x4F8);
[; ;pic12f683.h: 1824: extern volatile __bit ANS1 __at(0x4F9);
[; ;pic12f683.h: 1827: extern volatile __bit ANS2 __at(0x4FA);
[; ;pic12f683.h: 1830: extern volatile __bit ANS3 __at(0x4FB);
[; ;pic12f683.h: 1833: extern volatile __bit CARRY __at(0x18);
[; ;pic12f683.h: 1836: extern volatile __bit CCP1IE __at(0x465);
[; ;pic12f683.h: 1839: extern volatile __bit CCP1IF __at(0x65);
[; ;pic12f683.h: 1842: extern volatile __bit CCP1M0 __at(0xA8);
[; ;pic12f683.h: 1845: extern volatile __bit CCP1M1 __at(0xA9);
[; ;pic12f683.h: 1848: extern volatile __bit CCP1M2 __at(0xAA);
[; ;pic12f683.h: 1851: extern volatile __bit CCP1M3 __at(0xAB);
[; ;pic12f683.h: 1854: extern volatile __bit CHS0 __at(0xFA);
[; ;pic12f683.h: 1857: extern volatile __bit CHS1 __at(0xFB);
[; ;pic12f683.h: 1860: extern volatile __bit CHS2 __at(0xFC);
[; ;pic12f683.h: 1863: extern volatile __bit CINV __at(0xCC);
[; ;pic12f683.h: 1866: extern volatile __bit CIS __at(0xCB);
[; ;pic12f683.h: 1869: extern volatile __bit CM0 __at(0xC8);
[; ;pic12f683.h: 1872: extern volatile __bit CM1 __at(0xC9);
[; ;pic12f683.h: 1875: extern volatile __bit CM2 __at(0xCA);
[; ;pic12f683.h: 1878: extern volatile __bit CMIE __at(0x463);
[; ;pic12f683.h: 1881: extern volatile __bit CMIF __at(0x63);
[; ;pic12f683.h: 1884: extern volatile __bit CMSYNC __at(0xD0);
[; ;pic12f683.h: 1887: extern volatile __bit COUT __at(0xCE);
[; ;pic12f683.h: 1890: extern volatile __bit DC __at(0x19);
[; ;pic12f683.h: 1893: extern volatile __bit DC1B0 __at(0xAC);
[; ;pic12f683.h: 1896: extern volatile __bit DC1B1 __at(0xAD);
[; ;pic12f683.h: 1899: extern volatile __bit EEIE __at(0x467);
[; ;pic12f683.h: 1902: extern volatile __bit EEIF __at(0x67);
[; ;pic12f683.h: 1905: extern volatile __bit GIE __at(0x5F);
[; ;pic12f683.h: 1908: extern volatile __bit GO __at(0xF9);
[; ;pic12f683.h: 1911: extern volatile __bit GO_DONE __at(0xF9);
[; ;pic12f683.h: 1914: extern volatile __bit GO_nDONE __at(0xF9);
[; ;pic12f683.h: 1917: extern volatile __bit GP0 __at(0x28);
[; ;pic12f683.h: 1920: extern volatile __bit GP1 __at(0x29);
[; ;pic12f683.h: 1923: extern volatile __bit GP2 __at(0x2A);
[; ;pic12f683.h: 1926: extern volatile __bit GP3 __at(0x2B);
[; ;pic12f683.h: 1929: extern volatile __bit GP4 __at(0x2C);
[; ;pic12f683.h: 1932: extern volatile __bit GP5 __at(0x2D);
[; ;pic12f683.h: 1935: extern volatile __bit GPIE __at(0x5B);
[; ;pic12f683.h: 1938: extern volatile __bit GPIF __at(0x58);
[; ;pic12f683.h: 1941: extern volatile __bit HTS __at(0x47A);
[; ;pic12f683.h: 1944: extern volatile __bit INTE __at(0x5C);
[; ;pic12f683.h: 1947: extern volatile __bit INTEDG __at(0x40E);
[; ;pic12f683.h: 1950: extern volatile __bit INTF __at(0x59);
[; ;pic12f683.h: 1953: extern volatile __bit IOC0 __at(0x4B0);
[; ;pic12f683.h: 1956: extern volatile __bit IOC1 __at(0x4B1);
[; ;pic12f683.h: 1959: extern volatile __bit IOC2 __at(0x4B2);
[; ;pic12f683.h: 1962: extern volatile __bit IOC3 __at(0x4B3);
[; ;pic12f683.h: 1965: extern volatile __bit IOC4 __at(0x4B4);
[; ;pic12f683.h: 1968: extern volatile __bit IOC5 __at(0x4B5);
[; ;pic12f683.h: 1971: extern volatile __bit IOCA0 __at(0x4B0);
[; ;pic12f683.h: 1974: extern volatile __bit IOCA1 __at(0x4B1);
[; ;pic12f683.h: 1977: extern volatile __bit IOCA2 __at(0x4B2);
[; ;pic12f683.h: 1980: extern volatile __bit IOCA3 __at(0x4B3);
[; ;pic12f683.h: 1983: extern volatile __bit IOCA4 __at(0x4B4);
[; ;pic12f683.h: 1986: extern volatile __bit IOCA5 __at(0x4B5);
[; ;pic12f683.h: 1989: extern volatile __bit IRCF0 __at(0x47C);
[; ;pic12f683.h: 1992: extern volatile __bit IRCF1 __at(0x47D);
[; ;pic12f683.h: 1995: extern volatile __bit IRCF2 __at(0x47E);
[; ;pic12f683.h: 1998: extern volatile __bit IRP __at(0x1F);
[; ;pic12f683.h: 2001: extern volatile __bit LTS __at(0x479);
[; ;pic12f683.h: 2004: extern volatile __bit OSFIE __at(0x462);
[; ;pic12f683.h: 2007: extern volatile __bit OSFIF __at(0x62);
[; ;pic12f683.h: 2010: extern volatile __bit OSTS __at(0x47B);
[; ;pic12f683.h: 2013: extern volatile __bit PEIE __at(0x5E);
[; ;pic12f683.h: 2016: extern volatile __bit PS0 __at(0x408);
[; ;pic12f683.h: 2019: extern volatile __bit PS1 __at(0x409);
[; ;pic12f683.h: 2022: extern volatile __bit PS2 __at(0x40A);
[; ;pic12f683.h: 2025: extern volatile __bit PSA __at(0x40B);
[; ;pic12f683.h: 2028: extern volatile __bit RD __at(0x4E0);
[; ;pic12f683.h: 2031: extern volatile __bit RP0 __at(0x1D);
[; ;pic12f683.h: 2034: extern volatile __bit RP1 __at(0x1E);
[; ;pic12f683.h: 2037: extern volatile __bit SBODEN __at(0x474);
[; ;pic12f683.h: 2040: extern volatile __bit SCS __at(0x478);
[; ;pic12f683.h: 2043: extern volatile __bit SWDTEN __at(0xC0);
[; ;pic12f683.h: 2046: extern volatile __bit T0CS __at(0x40D);
[; ;pic12f683.h: 2049: extern volatile __bit T0IE __at(0x5D);
[; ;pic12f683.h: 2052: extern volatile __bit T0IF __at(0x5A);
[; ;pic12f683.h: 2055: extern volatile __bit T0SE __at(0x40C);
[; ;pic12f683.h: 2058: extern volatile __bit T1CKPS0 __at(0x84);
[; ;pic12f683.h: 2061: extern volatile __bit T1CKPS1 __at(0x85);
[; ;pic12f683.h: 2064: extern volatile __bit T1GE __at(0x86);
[; ;pic12f683.h: 2067: extern volatile __bit T1GINV __at(0x87);
[; ;pic12f683.h: 2070: extern volatile __bit T1GSS __at(0xD1);
[; ;pic12f683.h: 2073: extern volatile __bit T1IE __at(0x460);
[; ;pic12f683.h: 2076: extern volatile __bit T1IF __at(0x60);
[; ;pic12f683.h: 2079: extern volatile __bit T1OSCEN __at(0x83);
[; ;pic12f683.h: 2082: extern volatile __bit T2CKPS0 __at(0x90);
[; ;pic12f683.h: 2085: extern volatile __bit T2CKPS1 __at(0x91);
[; ;pic12f683.h: 2088: extern volatile __bit T2IE __at(0x461);
[; ;pic12f683.h: 2091: extern volatile __bit T2IF __at(0x61);
[; ;pic12f683.h: 2094: extern volatile __bit TMR0IE __at(0x5D);
[; ;pic12f683.h: 2097: extern volatile __bit TMR0IF __at(0x5A);
[; ;pic12f683.h: 2100: extern volatile __bit TMR1CS __at(0x81);
[; ;pic12f683.h: 2103: extern volatile __bit TMR1GE __at(0x86);
[; ;pic12f683.h: 2106: extern volatile __bit TMR1IE __at(0x460);
[; ;pic12f683.h: 2109: extern volatile __bit TMR1IF __at(0x60);
[; ;pic12f683.h: 2112: extern volatile __bit TMR1ON __at(0x80);
[; ;pic12f683.h: 2115: extern volatile __bit TMR2IE __at(0x461);
[; ;pic12f683.h: 2118: extern volatile __bit TMR2IF __at(0x61);
[; ;pic12f683.h: 2121: extern volatile __bit TMR2ON __at(0x92);
[; ;pic12f683.h: 2124: extern volatile __bit TOUTPS0 __at(0x93);
[; ;pic12f683.h: 2127: extern volatile __bit TOUTPS1 __at(0x94);
[; ;pic12f683.h: 2130: extern volatile __bit TOUTPS2 __at(0x95);
[; ;pic12f683.h: 2133: extern volatile __bit TOUTPS3 __at(0x96);
[; ;pic12f683.h: 2136: extern volatile __bit TRISIO0 __at(0x428);
[; ;pic12f683.h: 2139: extern volatile __bit TRISIO1 __at(0x429);
[; ;pic12f683.h: 2142: extern volatile __bit TRISIO2 __at(0x42A);
[; ;pic12f683.h: 2145: extern volatile __bit TRISIO3 __at(0x42B);
[; ;pic12f683.h: 2148: extern volatile __bit TRISIO4 __at(0x42C);
[; ;pic12f683.h: 2151: extern volatile __bit TRISIO5 __at(0x42D);
[; ;pic12f683.h: 2154: extern volatile __bit TUN0 __at(0x480);
[; ;pic12f683.h: 2157: extern volatile __bit TUN1 __at(0x481);
[; ;pic12f683.h: 2160: extern volatile __bit TUN2 __at(0x482);
[; ;pic12f683.h: 2163: extern volatile __bit TUN3 __at(0x483);
[; ;pic12f683.h: 2166: extern volatile __bit TUN4 __at(0x484);
[; ;pic12f683.h: 2169: extern volatile __bit ULPWUE __at(0x475);
[; ;pic12f683.h: 2172: extern volatile __bit VCFG __at(0xFE);
[; ;pic12f683.h: 2175: extern volatile __bit VR0 __at(0x4C8);
[; ;pic12f683.h: 2178: extern volatile __bit VR1 __at(0x4C9);
[; ;pic12f683.h: 2181: extern volatile __bit VR2 __at(0x4CA);
[; ;pic12f683.h: 2184: extern volatile __bit VR3 __at(0x4CB);
[; ;pic12f683.h: 2187: extern volatile __bit VREN __at(0x4CF);
[; ;pic12f683.h: 2190: extern volatile __bit VRR __at(0x4CD);
[; ;pic12f683.h: 2193: extern volatile __bit WDTPS0 __at(0xC1);
[; ;pic12f683.h: 2196: extern volatile __bit WDTPS1 __at(0xC2);
[; ;pic12f683.h: 2199: extern volatile __bit WDTPS2 __at(0xC3);
[; ;pic12f683.h: 2202: extern volatile __bit WDTPS3 __at(0xC4);
[; ;pic12f683.h: 2205: extern volatile __bit WPU0 __at(0x4A8);
[; ;pic12f683.h: 2208: extern volatile __bit WPU1 __at(0x4A9);
[; ;pic12f683.h: 2211: extern volatile __bit WPU2 __at(0x4AA);
[; ;pic12f683.h: 2214: extern volatile __bit WPU4 __at(0x4AC);
[; ;pic12f683.h: 2217: extern volatile __bit WPU5 __at(0x4AD);
[; ;pic12f683.h: 2220: extern volatile __bit WPUA0 __at(0x4A8);
[; ;pic12f683.h: 2223: extern volatile __bit WPUA1 __at(0x4A9);
[; ;pic12f683.h: 2226: extern volatile __bit WPUA2 __at(0x4AA);
[; ;pic12f683.h: 2229: extern volatile __bit WPUA4 __at(0x4AC);
[; ;pic12f683.h: 2232: extern volatile __bit WPUA5 __at(0x4AD);
[; ;pic12f683.h: 2235: extern volatile __bit WR __at(0x4E1);
[; ;pic12f683.h: 2238: extern volatile __bit WREN __at(0x4E2);
[; ;pic12f683.h: 2241: extern volatile __bit WRERR __at(0x4E3);
[; ;pic12f683.h: 2244: extern volatile __bit ZERO __at(0x1A);
[; ;pic12f683.h: 2247: extern volatile __bit nBOD __at(0x470);
[; ;pic12f683.h: 2250: extern volatile __bit nDONE __at(0xF9);
[; ;pic12f683.h: 2253: extern volatile __bit nGPPU __at(0x40F);
[; ;pic12f683.h: 2256: extern volatile __bit nPD __at(0x1B);
[; ;pic12f683.h: 2259: extern volatile __bit nPOR __at(0x471);
[; ;pic12f683.h: 2262: extern volatile __bit nT1SYNC __at(0x82);
[; ;pic12f683.h: 2265: extern volatile __bit nTO __at(0x1C);
[; ;pic.h: 76: __attribute__((__unsupported__("The " "FLASH_READ" " macro function is no longer supported. Please use the MPLAB X MCC."))) unsigned char __flash_read(unsigned short addr);
[; ;pic.h: 78: __attribute__((__unsupported__("The " "FLASH_WRITE" " macro function is no longer supported. Please use the MPLAB X MCC."))) void __flash_write(unsigned short addr, unsigned short data);
[; ;pic.h: 80: __attribute__((__unsupported__("The " "FLASH_ERASE" " macro function is no longer supported. Please use the MPLAB X MCC."))) void __flash_erase(unsigned short addr);
[; ;eeprom_routines.h: 114: extern void eeprom_write(unsigned char addr, unsigned char value);
[; ;eeprom_routines.h: 115: extern unsigned char eeprom_read(unsigned char addr);
[; ;pic.h: 118: extern __bank0 unsigned char __resetbits;
[; ;pic.h: 119: extern __bank0 __bit __powerdown;
[; ;pic.h: 120: extern __bank0 __bit __timeout;
"14 main.c
[p x FOSC=INTOSCIO ]
"15
[p x WDTE=OFF ]
"16
[p x PWRTE=ON ]
"17
[p x MCLRE=OFF ]
"18
[p x CP=OFF ]
"20
[p x BOREN=ON ]
"58
[v _motorTarget `i ~T0 @X0 -> 2 `i e ]
[; ;main.c: 58: int motorTarget[2];
"59
[v _motorRawValueTarget `uc ~T0 @X0 -> 2 `i e ]
[; ;main.c: 59: uint8_t motorRawValueTarget[2];
"60
[v _pwmActual `uc ~T0 @X0 -> 2 `i e ]
[; ;main.c: 60: uint8_t pwmActual[2];
"61
[v _motorIncrement `i ~T0 @X0 -> 2 `i e ]
[; ;main.c: 61: int motorIncrement[2];
"62
[v _motorAngle `i ~T0 @X0 -> 2 `i e ]
[; ;main.c: 62: int motorAngle[2];
"63
[v _speed `uc ~T0 @X0 -> 2 `i e ]
[; ;main.c: 63: uint8_t speed[2];
"64
[v _mustCheckServos `uc ~T0 @X0 1 e ]
[; ;main.c: 64: uint8_t mustCheckServos;
"65
[v _mustStopNow `uc ~T0 @X0 1 e ]
[; ;main.c: 65: uint8_t mustStopNow ;
"67
[v _activeMotor `uc ~T0 @X0 1 e ]
[; ;main.c: 67: uint8_t activeMotor;
"68
[v _EstadoRCServo `uc ~T0 @X0 1 e ]
[; ;main.c: 68: uint8_t EstadoRCServo;
"69
[v _contador1Seg `uc ~T0 @X0 1 e ]
[; ;main.c: 69: uint8_t contador1Seg;
"70
[v _contadorTimeShutOff `ui ~T0 @X0 1 e ]
[; ;main.c: 70: uint16_t contadorTimeShutOff;
"71
[v _ContadorMotor `uc ~T0 @X0 1 e ]
[; ;main.c: 71: uint8_t ContadorMotor;
"73
[v _MaskMotor `uc ~T0 @X0 1 e ]
[; ;main.c: 73: uint8_t MaskMotor;
"74
[v _overflow_count `Vui ~T0 @X0 1 e ]
[i _overflow_count
-> -> 0 `i `ui
]
[; ;main.c: 74: volatile unsigned int overflow_count = 0;
[; ;main.c: 76: void timer1InterruptHandler(void);
[; ;main.c: 77: void timer1InterruptOld(void);
[; ;main.c: 78: int calculateSpeedIncrement(uint8_t index);
[; ;main.c: 79: uint8_t convertAngle(int value);
[v $root$_myISR `(v ~T0 @X0 0 e ]
"81
[v _myISR `(v ~T11 @X0 1 ef ]
{
[; ;main.c: 81: void __interrupt() myISR(void) {
[e :U _myISR ]
[f ]
[; ;main.c: 82: if (INTCONbits.TMR0IF) {
"82
[e $ ! != -> . . _INTCONbits 1 1 `i -> -> -> 0 `i `Vuc `i 82  ]
{
[; ;main.c: 83: INTCONbits.TMR0IF = 0;
"83
[e = . . _INTCONbits 1 1 -> -> 0 `i `uc ]
[; ;main.c: 84: TMR0 = 178;
"84
[e = _TMR0 -> -> 178 `i `uc ]
[; ;main.c: 85: overflow_count++;
"85
[e ++ _overflow_count -> -> 1 `i `ui ]
[; ;main.c: 87: if (overflow_count >= 5) {
"87
[e $ ! >= _overflow_count -> -> 5 `i `ui 83  ]
{
[; ;main.c: 88: overflow_count = 0;
"88
[e = _overflow_count -> -> 0 `i `ui ]
[; ;main.c: 89: mustCheckServos = 1;
"89
[e = _mustCheckServos -> -> 1 `i `uc ]
"90
}
[e :U 83 ]
[; ;main.c: 90: }
[; ;main.c: 91: contador1Seg++;
"91
[e ++ _contador1Seg -> -> 1 `i `uc ]
[; ;main.c: 92: if(contador1Seg>= 100){
"92
[e $ ! >= -> _contador1Seg `i -> 100 `i 84  ]
{
[; ;main.c: 93: contador1Seg = 0;
"93
[e = _contador1Seg -> -> 0 `i `uc ]
[; ;main.c: 94: contadorTimeShutOff++;
"94
[e ++ _contadorTimeShutOff -> -> 1 `i `ui ]
[; ;main.c: 95: if(contadorTimeShutOff >= 15*60*10) {
"95
[e $ ! >= _contadorTimeShutOff -> * * -> 15 `i -> 60 `i -> 10 `i `ui 85  ]
{
"97
}
[e :U 85 ]
"98
}
[e :U 84 ]
"100
}
[e :U 82 ]
[; ;main.c: 97: }
[; ;main.c: 98: }
[; ;main.c: 100: }
[; ;main.c: 102: if (PIR1bits.TMR1IF) {
"102
[e $ ! != -> . . _PIR1bits 0 0 `i -> -> -> 0 `i `Vuc `i 86  ]
{
[; ;main.c: 103: PIR1bits.TMR1IF = 0;
"103
[e = . . _PIR1bits 0 0 -> -> 0 `i `uc ]
[; ;main.c: 104: timer1InterruptHandler();
"104
[e ( _timer1InterruptHandler ..  ]
"105
}
[e :U 86 ]
[; ;main.c: 105: }
[; ;main.c: 107: if (PIR1bits.TMR2IF) {
"107
[e $ ! != -> . . _PIR1bits 0 1 `i -> -> -> 0 `i `Vuc `i 87  ]
{
[; ;main.c: 108: TMR2ON = 0;
"108
[e = _TMR2ON -> -> 0 `i `b ]
[; ;main.c: 110: PIR1bits.TMR2IF = 0;
"110
[e = . . _PIR1bits 0 1 -> -> 0 `i `uc ]
[; ;main.c: 112: GPIO = GPIO & 0b11001111;
"112
[e = _GPIO -> & -> _GPIO `i -> 207 `i `uc ]
"113
}
[e :U 87 ]
[; ;main.c: 113: }
[; ;main.c: 116: }
"116
[e :UE 81 ]
}
"118
[v _timer1InterruptHandler `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 118: void timer1InterruptHandler(void) {
[e :U _timer1InterruptHandler ]
[f ]
[; ;main.c: 119: switch (EstadoRCServo) {
"119
[e $U 90  ]
{
[; ;main.c: 120: case 0:
"120
[e :U 91 ]
[; ;main.c: 121: TMR1 = 64561;
"121
[e = _TMR1 -> -> 64561 `l `us ]
[; ;main.c: 122: TMR2ON = 0;
"122
[e = _TMR2ON -> -> 0 `i `b ]
[; ;main.c: 123: TMR2 = 0;
"123
[e = _TMR2 -> -> 0 `i `uc ]
[; ;main.c: 124: EstadoRCServo = 1;
"124
[e = _EstadoRCServo -> -> 1 `i `uc ]
[; ;main.c: 125: if (ContadorMotor >= 2) {
"125
[e $ ! >= -> _ContadorMotor `i -> 2 `i 92  ]
{
[; ;main.c: 126: ContadorMotor = 0;
"126
[e = _ContadorMotor -> -> 0 `i `uc ]
[; ;main.c: 127: MaskMotor = 0b00010000;
"127
[e = _MaskMotor -> -> 16 `i `uc ]
[; ;main.c: 128: GPIO = GPIO & 0b11001111;
"128
[e = _GPIO -> & -> _GPIO `i -> 207 `i `uc ]
"129
}
[e :U 92 ]
[; ;main.c: 129: }
[; ;main.c: 130: GPIO = (GPIO & 0b11001111) | MaskMotor;
"130
[e = _GPIO -> | & -> _GPIO `i -> 207 `i -> _MaskMotor `i `uc ]
[; ;main.c: 132: break;
"132
[e $U 89  ]
[; ;main.c: 133: case 1:
"133
[e :U 93 ]
[; ;main.c: 134: TMR1 = 61561;
"134
[e = _TMR1 -> -> 61561 `l `us ]
[; ;main.c: 135: PR2 = motorRawValueTarget[ContadorMotor];
"135
[e = _PR2 *U + &U _motorRawValueTarget * -> _ContadorMotor `ux -> -> # *U &U _motorRawValueTarget `ui `ux ]
[; ;main.c: 136: TMR2ON = 1;
"136
[e = _TMR2ON -> -> 1 `i `b ]
[; ;main.c: 137: EstadoRCServo = 2;
"137
[e = _EstadoRCServo -> -> 2 `i `uc ]
[; ;main.c: 138: if (PR2 <= 1) {
"138
[e $ ! <= -> _PR2 `i -> 1 `i 94  ]
{
[; ;main.c: 139: TMR2ON = 0;
"139
[e = _TMR2ON -> -> 0 `i `b ]
[; ;main.c: 141: GPIO = (GPIO & 0b11001111);
"141
[e = _GPIO -> & -> _GPIO `i -> 207 `i `uc ]
"142
}
[e :U 94 ]
[; ;main.c: 142: }
[; ;main.c: 143: break;
"143
[e $U 89  ]
[; ;main.c: 145: case 2:
"145
[e :U 95 ]
[; ;main.c: 146: TMR2IF = 0;
"146
[e = _TMR2IF -> -> 0 `i `b ]
[; ;main.c: 148: TMR2ON = 0;
"148
[e = _TMR2ON -> -> 0 `i `b ]
[; ;main.c: 149: EstadoRCServo = 0;
"149
[e = _EstadoRCServo -> -> 0 `i `uc ]
[; ;main.c: 150: ContadorMotor++;
"150
[e ++ _ContadorMotor -> -> 1 `i `uc ]
[; ;main.c: 151: GPIO = GPIO & 0b11001111;
"151
[e = _GPIO -> & -> _GPIO `i -> 207 `i `uc ]
[; ;main.c: 152: MaskMotor = (uint8_t)(MaskMotor << 1);
"152
[e = _MaskMotor -> << -> _MaskMotor `i -> 1 `i `uc ]
[; ;main.c: 153: if (ContadorMotor >= 2) {
"153
[e $ ! >= -> _ContadorMotor `i -> 2 `i 96  ]
{
[; ;main.c: 154: ContadorMotor = 0;
"154
[e = _ContadorMotor -> -> 0 `i `uc ]
[; ;main.c: 155: MaskMotor = 0b00010000;
"155
[e = _MaskMotor -> -> 16 `i `uc ]
[; ;main.c: 156: TMR1 = 37535;
"156
[e = _TMR1 -> -> 37535 `l `us ]
"157
}
[; ;main.c: 157: } else {
[e $U 97  ]
[e :U 96 ]
{
[; ;main.c: 158: TMR1 = 65535;
"158
[e = _TMR1 -> -> 65535 `l `us ]
"160
}
[e :U 97 ]
[; ;main.c: 160: }
[; ;main.c: 161: break;
"161
[e $U 89  ]
[; ;main.c: 163: default:
"163
[e :U 98 ]
[; ;main.c: 164: EstadoRCServo = 0;
"164
[e = _EstadoRCServo -> -> 0 `i `uc ]
[; ;main.c: 165: GPIO = GPIO & 0b11001111;
"165
[e = _GPIO -> & -> _GPIO `i -> 207 `i `uc ]
[; ;main.c: 166: break;
"166
[e $U 89  ]
"167
}
[; ;main.c: 167: }
[e $U 89  ]
"119
[e :U 90 ]
[e [\ _EstadoRCServo , $ -> -> 0 `i `uc 91
 , $ -> -> 1 `i `uc 93
 , $ -> -> 2 `i `uc 95
 98 ]
"167
[e :U 89 ]
[; ;main.c: 168: }
"168
[e :UE 88 ]
}
"170
[v _setupTimer0 `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 170: void setupTimer0() {
[e :U _setupTimer0 ]
[f ]
[; ;main.c: 171: OPTION_REG = 0;
"171
[e = _OPTION_REG -> -> 0 `i `uc ]
[; ;main.c: 172: OPTION_REGbits.PSA = 0;
"172
[e = . . _OPTION_REGbits 0 1 -> -> 0 `i `uc ]
[; ;main.c: 173: OPTION_REGbits.PS = 7;
"173
[e = . . _OPTION_REGbits 0 0 -> -> 7 `i `uc ]
[; ;main.c: 174: TMR0 = 176;
"174
[e = _TMR0 -> -> 176 `i `uc ]
[; ;main.c: 175: INTCONbits.TMR0IE = 1;
"175
[e = . . _INTCONbits 1 3 -> -> 1 `i `uc ]
[; ;main.c: 176: }
"176
[e :UE 99 ]
}
"178
[v _setupTimer1 `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 178: void setupTimer1() {
[e :U _setupTimer1 ]
[f ]
[; ;main.c: 179: T1CON = 0;
"179
[e = _T1CON -> -> 0 `i `uc ]
[; ;main.c: 180: T1CONbits.T1CKPS = 0;
"180
[e = . . _T1CONbits 0 4 -> -> 0 `i `uc ]
[; ;main.c: 181: TMR1 = 61561;
"181
[e = _TMR1 -> -> 61561 `l `us ]
[; ;main.c: 182: T1CONbits.TMR1ON = 1;
"182
[e = . . _T1CONbits 0 0 -> -> 1 `i `uc ]
[; ;main.c: 183: }
"183
[e :UE 100 ]
}
"185
[v _initPWM `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 185: void initPWM() {
[e :U _initPWM ]
[f ]
[; ;main.c: 186: CCP1CON = 0b00000000;
"186
[e = _CCP1CON -> -> 0 `i `uc ]
[; ;main.c: 187: T2CON = 0b00000011;
"187
[e = _T2CON -> -> 3 `i `uc ]
[; ;main.c: 192: PR2 = 249;
"192
[e = _PR2 -> -> 249 `i `uc ]
[; ;main.c: 194: MaskMotor = 0b00010000;
"194
[e = _MaskMotor -> -> 16 `i `uc ]
[; ;main.c: 195: EstadoRCServo = 0;
"195
[e = _EstadoRCServo -> -> 0 `i `uc ]
[; ;main.c: 196: ContadorMotor = 0;
"196
[e = _ContadorMotor -> -> 0 `i `uc ]
[; ;main.c: 197: }
"197
[e :UE 101 ]
}
"199
[v _setup `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 199: void setup(void) {
[e :U _setup ]
[f ]
[; ;main.c: 200: srand(TMR1);
"200
[e ( _srand (1 -> _TMR1 `ui ]
[; ;main.c: 201: OSCCON = 0x71;
"201
[e = _OSCCON -> -> 113 `i `uc ]
[; ;main.c: 202: ANSEL = 0;
"202
[e = _ANSEL -> -> 0 `i `uc ]
[; ;main.c: 203: TRISIO = 0b00000011;
"203
[e = _TRISIO -> -> 3 `i `uc ]
[; ;main.c: 204: initPWM();
"204
[e ( _initPWM ..  ]
[; ;main.c: 205: setupTimer1();
"205
[e ( _setupTimer1 ..  ]
[; ;main.c: 206: setupTimer0();
"206
[e ( _setupTimer0 ..  ]
[; ;main.c: 207: ContadorMotor = 0;
"207
[e = _ContadorMotor -> -> 0 `i `uc ]
[; ;main.c: 208: contador1Seg =0;
"208
[e = _contador1Seg -> -> 0 `i `uc ]
[; ;main.c: 209: contadorTimeShutOff =0;
"209
[e = _contadorTimeShutOff -> -> 0 `i `ui ]
[; ;main.c: 210: mustStopNow = 0;
"210
[e = _mustStopNow -> -> 0 `i `uc ]
[; ;main.c: 211: GPIObits.GP2 = 0;
"211
[e = . . _GPIObits 0 2 -> -> 0 `i `uc ]
[; ;main.c: 212: GPIObits.GP4 = 0;
"212
[e = . . _GPIObits 0 4 -> -> 0 `i `uc ]
[; ;main.c: 213: GPIObits.GP5 = 0;
"213
[e = . . _GPIObits 0 5 -> -> 0 `i `uc ]
[; ;main.c: 216: INTCONbits.GIE = 1;
"216
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
[; ;main.c: 217: INTCONbits.PEIE = 1;
"217
[e = . . _INTCONbits 0 6 -> -> 1 `i `uc ]
[; ;main.c: 219: INTCONbits.TMR0IF = 0;
"219
[e = . . _INTCONbits 1 1 -> -> 0 `i `uc ]
[; ;main.c: 220: PIR1bits.TMR1IF = 0;
"220
[e = . . _PIR1bits 0 0 -> -> 0 `i `uc ]
[; ;main.c: 221: PIR1bits.TMR2IF = 0;
"221
[e = . . _PIR1bits 0 1 -> -> 0 `i `uc ]
[; ;main.c: 222: INTCONbits.TMR0IE = 1;
"222
[e = . . _INTCONbits 1 3 -> -> 1 `i `uc ]
[; ;main.c: 223: PIE1bits.TMR2IE = 1;
"223
[e = . . _PIE1bits 0 1 -> -> 1 `i `uc ]
[; ;main.c: 224: PIE1bits.TMR1IE = 1;
"224
[e = . . _PIE1bits 0 0 -> -> 1 `i `uc ]
[; ;main.c: 226: }
"226
[e :UE 102 ]
}
"228
[v _generateRandom `(i ~T0 @X0 1 ef2`i`i ]
{
[; ;main.c: 228: int generateRandom(int min, int max) {
[e :U _generateRandom ]
[v _min `i ~T0 @X0 1 r1 ]
[v _max `i ~T0 @X0 1 r2 ]
[f ]
"229
[v _randomNumber `i ~T0 @X0 1 a ]
[; ;main.c: 229: int randomNumber = 0;
[e = _randomNumber -> 0 `i ]
[; ;main.c: 231: randomNumber = (rand() % (max - min + 1)) +
[; ;main.c: 232: min;
"232
[e = _randomNumber + % ( _rand ..  + - _max _min -> 1 `i _min ]
[; ;main.c: 233: return randomNumber;
"233
[e ) _randomNumber ]
[e $UE 103  ]
[; ;main.c: 234: }
"234
[e :UE 103 ]
}
"236
[v _convertAngle `(uc ~T0 @X0 1 ef1`i ]
{
[; ;main.c: 236: uint8_t convertAngle(int value) {
[e :U _convertAngle ]
[v _value `i ~T0 @X0 1 r1 ]
[f ]
"237
[v _temp `i ~T0 @X0 1 a ]
[; ;main.c: 237: int temp;
[; ;main.c: 238: if (value < -90) {
"238
[e $ ! < _value -U -> 90 `i 105  ]
{
[; ;main.c: 239: value = -90;
"239
[e = _value -U -> 90 `i ]
"240
}
[; ;main.c: 240: } else if (value > 90) {
[e $U 106  ]
[e :U 105 ]
[e $ ! > _value -> 90 `i 107  ]
{
[; ;main.c: 241: value = 90;
"241
[e = _value -> 90 `i ]
"242
}
[e :U 107 ]
"243
[e :U 106 ]
[; ;main.c: 242: }
[; ;main.c: 243: temp = (value * 255) / (90 - -90) + (127);
[e = _temp + / * _value -> 255 `i - -> 90 `i -U -> 90 `i -> 127 `i ]
[; ;main.c: 244: return temp;
"244
[e ) -> _temp `uc ]
[e $UE 104  ]
[; ;main.c: 245: }
"245
[e :UE 104 ]
}
"247
[v _calculateSpeedIncrement `(i ~T0 @X0 1 ef1`uc ]
{
[; ;main.c: 247: int calculateSpeedIncrement(uint8_t index) {
[e :U _calculateSpeedIncrement ]
[v _index `uc ~T0 @X0 1 r1 ]
[f ]
"248
[v _increment `i ~T0 @X0 1 a ]
[v _speed `i ~T0 @X0 1 a ]
[; ;main.c: 248: int increment;
[; ;main.c: 249: int speed;
[; ;main.c: 251: if (index > (2 - 1)) {
"251
[e $ ! > -> _index `i - -> 2 `i -> 1 `i 109  ]
{
[; ;main.c: 252: return 0;
"252
[e ) -> 0 `i ]
[e $UE 108  ]
"253
}
[e :U 109 ]
[; ;main.c: 253: }
[; ;main.c: 254: speed = (uint8_t)generateRandom(15, 30);
"254
[e = _speed -> -> ( _generateRandom (2 , -> 15 `i -> 30 `i `uc `i ]
[; ;main.c: 255: increment = (motorTarget[index] - motorAngle[index]) / speed;
"255
[e = _increment / - *U + &U _motorTarget * -> _index `ux -> -> # *U &U _motorTarget `ui `ux *U + &U _motorAngle * -> _index `ux -> -> # *U &U _motorAngle `ui `ux _speed ]
[; ;main.c: 256: if (increment == 0) {
"256
[e $ ! == _increment -> 0 `i 110  ]
{
[; ;main.c: 257: if (motorTarget[index] > motorAngle[index]) {
"257
[e $ ! > *U + &U _motorTarget * -> _index `ux -> -> # *U &U _motorTarget `ui `ux *U + &U _motorAngle * -> _index `ux -> -> # *U &U _motorAngle `ui `ux 111  ]
{
[; ;main.c: 258: increment = 1;
"258
[e = _increment -> 1 `i ]
"259
}
[; ;main.c: 259: } else {
[e $U 112  ]
[e :U 111 ]
{
[; ;main.c: 260: increment = -1;
"260
[e = _increment -U -> 1 `i ]
"261
}
[e :U 112 ]
"262
}
[e :U 110 ]
[; ;main.c: 261: }
[; ;main.c: 262: }
[; ;main.c: 263: return increment;
"263
[e ) _increment ]
[e $UE 108  ]
[; ;main.c: 264: }
"264
[e :UE 108 ]
}
"266
[v _setTorretPosition `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 266: void setTorretPosition(void) {
[e :U _setTorretPosition ]
[f ]
[; ;main.c: 269: __nop();
"269
[e ( ___nop ..  ]
[; ;main.c: 270: if ((motorIncrement[0] >= 0 && (motorAngle[0] >= motorTarget[0])) ||
[; ;main.c: 271: ((motorIncrement[0] < 0 && (motorAngle[0] <= motorTarget[0])))) {
"271
[e $ ! || && >= *U + &U _motorIncrement * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux -> 0 `i >= *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux *U + &U _motorTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux && < *U + &U _motorIncrement * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux -> 0 `i <= *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux *U + &U _motorTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux 114  ]
{
[; ;main.c: 272: motorTarget[0] = (int)generateRandom(-60, 60);
"272
[e = *U + &U _motorTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux ( _generateRandom (2 , -U -> 60 `i -> 60 `i ]
[; ;main.c: 273: motorIncrement[0] = calculateSpeedIncrement(0);
"273
[e = *U + &U _motorIncrement * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ( _calculateSpeedIncrement (1 -> -> 0 `i `uc ]
"274
}
[; ;main.c: 274: } else if (motorAngle[0] < -60) {
[e $U 115  ]
[e :U 114 ]
[e $ ! < *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 60 `i 116  ]
{
[; ;main.c: 275: motorTarget[0] = (int)generateRandom(-60, 60);
"275
[e = *U + &U _motorTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux ( _generateRandom (2 , -U -> 60 `i -> 60 `i ]
[; ;main.c: 276: motorAngle[0] = -60;
"276
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 60 `i ]
[; ;main.c: 277: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"277
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 278: motorIncrement[0] = calculateSpeedIncrement(0);
"278
[e = *U + &U _motorIncrement * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ( _calculateSpeedIncrement (1 -> -> 0 `i `uc ]
"279
}
[; ;main.c: 279: } else if (motorAngle[0] > 60) {
[e $U 117  ]
[e :U 116 ]
[e $ ! > *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 60 `i 118  ]
{
[; ;main.c: 280: motorTarget[0] = (int)generateRandom(-60, 60);
"280
[e = *U + &U _motorTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux ( _generateRandom (2 , -U -> 60 `i -> 60 `i ]
[; ;main.c: 281: motorAngle[0] = 60;
"281
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 60 `i ]
[; ;main.c: 282: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"282
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 283: motorIncrement[0] = calculateSpeedIncrement(0);
"283
[e = *U + &U _motorIncrement * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ( _calculateSpeedIncrement (1 -> -> 0 `i `uc ]
"284
}
[; ;main.c: 284: } else {
[e $U 119  ]
[e :U 118 ]
{
[; ;main.c: 285: motorAngle[0] = motorAngle[0] + motorIncrement[0];
"285
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux + *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux *U + &U _motorIncrement * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ]
[; ;main.c: 286: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"286
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
"287
}
[e :U 119 ]
[e :U 117 ]
[e :U 115 ]
[; ;main.c: 287: }
[; ;main.c: 293: if ((motorIncrement[1] >= 0 && (motorAngle[1] >= motorTarget[1])) ||
[; ;main.c: 294: ((motorIncrement[1] < 0 && (motorAngle[1] <= motorTarget[1])))) {
"294
[e $ ! || && >= *U + &U _motorIncrement * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux -> 0 `i >= *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux *U + &U _motorTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux && < *U + &U _motorIncrement * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux -> 0 `i <= *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux *U + &U _motorTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux 120  ]
{
[; ;main.c: 295: motorTarget[1] = (int)generateRandom(-65, -5);
"295
[e = *U + &U _motorTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux ( _generateRandom (2 , -U -> 65 `i -U -> 5 `i ]
[; ;main.c: 296: motorIncrement[1] = calculateSpeedIncrement(1);
"296
[e = *U + &U _motorIncrement * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ( _calculateSpeedIncrement (1 -> -> 1 `i `uc ]
"297
}
[; ;main.c: 297: } else if (motorAngle[1] < -65) {
[e $U 121  ]
[e :U 120 ]
[e $ ! < *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 65 `i 122  ]
{
[; ;main.c: 298: motorTarget[1] = (int)generateRandom(-65, -5);
"298
[e = *U + &U _motorTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux ( _generateRandom (2 , -U -> 65 `i -U -> 5 `i ]
[; ;main.c: 299: motorAngle[1] = -65;
"299
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 65 `i ]
[; ;main.c: 300: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
"300
[e = *U + &U _motorRawValueTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 301: motorIncrement[1] = calculateSpeedIncrement(1);
"301
[e = *U + &U _motorIncrement * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ( _calculateSpeedIncrement (1 -> -> 1 `i `uc ]
"302
}
[; ;main.c: 302: } else if (motorAngle[1] > -5) {
[e $U 123  ]
[e :U 122 ]
[e $ ! > *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 5 `i 124  ]
{
[; ;main.c: 303: motorTarget[1] = (int)generateRandom(-65, -5);
"303
[e = *U + &U _motorTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorTarget `ui `ux ( _generateRandom (2 , -U -> 65 `i -U -> 5 `i ]
[; ;main.c: 304: motorAngle[1] = -5;
"304
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 5 `i ]
[; ;main.c: 305: motorIncrement[1] = calculateSpeedIncrement(1);
"305
[e = *U + &U _motorIncrement * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ( _calculateSpeedIncrement (1 -> -> 1 `i `uc ]
"306
}
[; ;main.c: 306: } else {
[e $U 125  ]
[e :U 124 ]
{
[; ;main.c: 307: motorAngle[1] = motorAngle[1] + motorIncrement[1];
"307
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux + *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux *U + &U _motorIncrement * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorIncrement `ui `ux ]
[; ;main.c: 308: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
"308
[e = *U + &U _motorRawValueTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
"309
}
[e :U 125 ]
[e :U 123 ]
[e :U 121 ]
[; ;main.c: 309: }
[; ;main.c: 310: }
"310
[e :UE 113 ]
}
[v $root$_main `(v ~T0 @X0 0 e ]
"312
[v _main `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 312: void main(void) {
[e :U _main ]
[f ]
[; ;main.c: 313: setup();
"313
[e ( _setup ..  ]
[; ;main.c: 314: motorAngle[0] = 0;
"314
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 0 `i ]
[; ;main.c: 315: motorAngle[1] = 0;
"315
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 0 `i ]
[; ;main.c: 316: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"316
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 317: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
"317
[e = *U + &U _motorRawValueTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 318: GP2 = 0;
"318
[e = _GP2 -> -> 0 `i `b ]
[; ;main.c: 334: _delay((unsigned long)((1000)*(8000000/4000.0)));
"334
[e ( __delay (1 -> * -> -> 1000 `i `d / -> -> 8000000 `l `d .4000.0 `ul ]
[; ;main.c: 336: motorAngle[0] = -60;
"336
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 60 `i ]
[; ;main.c: 337: motorAngle[1] = -65;
"337
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 65 `i ]
[; ;main.c: 338: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"338
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 339: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
"339
[e = *U + &U _motorRawValueTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 341: _delay((unsigned long)((1000)*(8000000/4000.0)));
"341
[e ( __delay (1 -> * -> -> 1000 `i `d / -> -> 8000000 `l `d .4000.0 `ul ]
[; ;main.c: 342: motorAngle[0] = 60;
"342
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 60 `i ]
[; ;main.c: 343: motorAngle[1] = -5;
"343
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -U -> 5 `i ]
[; ;main.c: 344: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"344
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 345: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
"345
[e = *U + &U _motorRawValueTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 347: _delay((unsigned long)((1000)*(8000000/4000.0)));
"347
[e ( __delay (1 -> * -> -> 1000 `i `d / -> -> 8000000 `l `d .4000.0 `ul ]
[; ;main.c: 348: motorAngle[0] = 0;
"348
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 0 `i ]
[; ;main.c: 349: motorAngle[1] = 0;
"349
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 0 `i ]
[; ;main.c: 350: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"350
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 351: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
"351
[e = *U + &U _motorRawValueTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 353: _delay((unsigned long)((1000)*(8000000/4000.0)));
"353
[e ( __delay (1 -> * -> -> 1000 `i `d / -> -> 8000000 `l `d .4000.0 `ul ]
[; ;main.c: 354: GP2 = 1;
"354
[e = _GP2 -> -> 1 `i `b ]
[; ;main.c: 356: while (1) {
"356
[e :U 128 ]
{
[; ;main.c: 357: if (mustCheckServos == 1 && !mustStopNow) {
"357
[e $ ! && == -> _mustCheckServos `i -> 1 `i ! != -> _mustStopNow `i -> -> -> 0 `i `uc `i 130  ]
{
[; ;main.c: 358: mustCheckServos = 0;
"358
[e = _mustCheckServos -> -> 0 `i `uc ]
[; ;main.c: 359: setTorretPosition();
"359
[e ( _setTorretPosition ..  ]
"360
}
[e :U 130 ]
[; ;main.c: 360: }
[; ;main.c: 361: if (mustStopNow == 1) {
"361
[e $ ! == -> _mustStopNow `i -> 1 `i 131  ]
{
[; ;main.c: 362: GP2 = 0;
"362
[e = _GP2 -> -> 0 `i `b ]
[; ;main.c: 363: motorAngle[0] = 0;
"363
[e = *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 0 `i ]
[; ;main.c: 364: motorAngle[1] = 0;
"364
[e = *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux -> 0 `i ]
[; ;main.c: 365: motorRawValueTarget[0] = convertAngle(motorAngle[0]);
"365
[e = *U + &U _motorRawValueTarget * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 0 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
[; ;main.c: 366: motorRawValueTarget[1] = convertAngle(motorAngle[1]);
"366
[e = *U + &U _motorRawValueTarget * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorRawValueTarget `ui `ux ( _convertAngle (1 *U + &U _motorAngle * -> -> -> 1 `i `ui `ux -> -> # *U &U _motorAngle `ui `ux ]
"368
}
[e :U 131 ]
"370
}
[e :U 127 ]
"356
[e $U 128  ]
[e :U 129 ]
[; ;main.c: 368: }
[; ;main.c: 370: }
[; ;main.c: 372: return;
"372
[e $UE 126  ]
[; ;main.c: 373: }
"373
[e :UE 126 ]
}
